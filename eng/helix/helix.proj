<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test" TreatAsLocalProperty="ProjectToBuild">
  <PropertyGroup>
    <!--
      When invoking helix.proj for the whole repo with build.cmd, ProjectToBuild will be set to the path to this project.
      This must be reset in order for Build.props to evaluate a list of projects to be tested on Helix.
    -->
    <ProjectToBuild Condition="'$(ProjectToBuild)' == '$(MSBuildProjectFullPath)'"/>
  </PropertyGroup>

  <Import Project="..\targets\Helix.Common.props" />
  <Import Project="..\Build.props" />
  <Import Project="..\Versions.props" />

  <!-- Microsoft.DotNet.Helix.Sdk.MultiQueue.targets splits $(HelixTargetQueues) into @(HelixTargetQueue) items. -->
  <ItemGroup Condition=" '$(HelixTargetQueues)' == '' ">
    <HelixTargetQueue Condition="'$(_UseHelixOpenQueues)' == 'true'" Include="@(HelixAvailableTargetQueue)" />
    <HelixTargetQueue Condition="'$(_UseHelixOpenQueues)' != 'true'" Include="@(HelixAvailableTargetQueue->'%(Identity)'->Replace('.Open',''))" />
  </ItemGroup>

  <PropertyGroup>
    <HelixBuild>private-$(USERNAME)</HelixBuild>
    <HelixBuild Condition=" '$(USERNAME)' == '' ">private-$(USER)</HelixBuild>
    <IsExternal>true</IsExternal>
    <MaxRetryCount Condition="'$(MaxRetryCount)' == ''">2</MaxRetryCount>
    <HelixAccessToken Condition="'$(_UseHelixOpenQueues)' != 'true'">$(HelixApiAccessToken)</HelixAccessToken>
    <IncludeDotNetCli>true</IncludeDotNetCli>
    <DotNetCliPackageType>sdk</DotNetCliPackageType>
    <DotNetCliVersion>$(NETCoreSdkVersion)</DotNetCliVersion>
    <DotNetCliChannel>Current</DotNetCliChannel>

    <ArchiveExtension>.tar.gz</ArchiveExtension>
    <ArchiveExtension Condition="'$(IsWindowsHelixQueue)' == 'true'">.zip</ArchiveExtension>

    <!-- Similar to ProjectLayout.props in the Arcade SDK. The Helix SDK contains nothing similar. -->
    <OutputPath Condition=" '$(OutputPath)' == '' ">$(RepoRoot)artifacts\bin\$(MSBuildProjectName)\</OutputPath>

    <!--
      Define $(HelixTestConfigurationFilePath) so the Helix SDK automatically includes our test config file in the
      correlation payload. The Helix SDK has a fallback value that doesn't work w/o including the Arcade SDK and
      we intentionally do not do that in this project.
    -->
    <HelixTestConfigurationFilePath>$(RepoRoot)eng/test-configuration.json</HelixTestConfigurationFilePath>
  </PropertyGroup>

  <!-- Specify the runtime we need which will be included as a correlation payload -->
  <ItemGroup>
    <!--
      Use the BrowserDebugHost transport package as a sentinel for the non-shipping version of the NETCoreApp shared framework.
    -->
    <AdditionalDotNetPackage Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)">
      <PackageType>runtime</PackageType>
    </AdditionalDotNetPackage>

    <AdditionalDotNetPackageFeed Include="https://dotnetbuilds.blob.core.windows.net/internal"
                                 Condition="'$(SYSTEM_TEAMPROJECT)' == 'internal'">
      <SasToken>$([System.Environment]::GetEnvironmentVariable('DotNetBuildsInternalReadSasToken'))</SasToken>
    </AdditionalDotNetPackageFeed>
  </ItemGroup>

  <PropertyGroup Condition=" '$(ContinuousIntegrationBuild)' == 'true' ">
    <HelixType>ci</HelixType>
    <!-- Creator is not valid for internal queues -->
    <Creator Condition="'$(_UseHelixOpenQueues)' == 'true'">aspnetcore</Creator>
    <HelixBuild>$(BUILD_BUILDNUMBER).$(TargetArchitecture).$(SYSTEM_JOBATTEMPT)</HelixBuild>
    <WaitForWorkItemCompletion>true</WaitForWorkItemCompletion>
    <EnableAzurePipelinesReporter>true</EnableAzurePipelinesReporter>
    <EnableXUnitReporter>true</EnableXUnitReporter>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(ContinuousIntegrationBuild)' != 'true' ">
    <HelixType>dev</HelixType>
    <!-- Creator is not valid for internal queues -->
    <Creator Condition="'$(_UseHelixOpenQueues)' == 'true'">$(USERNAME)</Creator>
    <Creator Condition="'$(USERNAME)' == '' AND '$(_UseHelixOpenQueues)' == 'true'">$(USER)</Creator>
    <HelixBuild>$([System.DateTime]::Now.ToString('yyyyMMddHHmm'))</HelixBuild>
  </PropertyGroup>

  <!-- Items with the type "HelixProperties" will become arbitrary JSON associated with the job -->
  <!-- NOTE: These are global to the whole Job, so don't include project-specific content here. -->
  <ItemGroup>
    <HelixProperties Include="buildNumber" Value="$(BUILD_BUILDNUMBER)" Condition="'$(BUILD_BUILDNUMBER)' != ''" />
    <HelixProperties Include="buildId" Value="$(BUILD_BUILDID)" Condition="'$(BUILD_BUILDID)' != ''" />
    <HelixProperties Include="azdoProject" Value="$(SYSTEM_TEAMPROJECT)" Condition="'$(SYSTEM_TEAMPROJECT)' != ''" />
    <HelixProperties Include="buildDefinition" Value="$(BUILD_DEFINITIONNAME)" Condition="'$(BUILD_DEFINITIONNAME)' != ''" />
    <HelixProperties Include="commitSha" Value="$(BUILD_SOURCEVERSION)" Condition="'$(BUILD_SOURCEVERSION)' != ''" />
    <HelixProperties Include="branch" Value="$(BUILD_SOURCEBRANCH)" Condition="'$(BUILD_SOURCEBRANCH)' != ''" />
    <HelixProperties Condition="'$(RunQuarantinedTests)' == 'true'" Include="runType" Value="quarantined" />
    <HelixProperties Condition="'$(RunQuarantinedTests)' != 'true'" Include="runType" Value="unquarantined" />
  </ItemGroup>

  <Target Name="IncludeAspNetRuntime" BeforeTargets="Gather"
    Condition="'$(DoNotRequireSharedFxHelix)' != 'true' OR
    EXISTS('$(RepoRoot)artifacts\packages\$(Configuration)\Shipping\Microsoft.AspNetCore.App.Runtime.$(TargetRuntimeIdentifier).$(SharedFxVersion).nupkg')">
    <MSBuild Projects="$(RepoRoot)src\Framework\App.Runtime\src\Microsoft.AspNetCore.App.Runtime.csproj"
        Properties="DisableYarnCheck=true;ExcludeFromBuild=false"
        Targets="_GetPackageVersionInfo"
        SkipNonexistentProjects="false">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProductVersionInfo" />
    </MSBuild>

    <PropertyGroup>
      <SharedFxVersion>@(_ResolvedProductVersionInfo->'%(PackageVersion)')</SharedFxVersion>
    </PropertyGroup>

    <!-- Use package because .dotnet/ folder doesn't contain RuntimeList.xml file and SharedFxTests checks that. -->
    <Unzip
       SourceFiles="$(RepoRoot)artifacts\packages\$(Configuration)\Shipping\Microsoft.AspNetCore.App.Runtime.$(TargetRuntimeIdentifier).$(SharedFxVersion).nupkg"
       DestinationFolder="$(OutputPath)\SharedFx.Unzip" />
    <ItemGroup>
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\*.txt" />
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\*.json" />
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\*.dll" />
      <_appRuntimeFiles Include="$(OutputPath)\SharedFx.Unzip\**\RuntimeList.xml" />
    </ItemGroup>
    <Copy SourceFiles="@(_appRuntimeFiles)"
        DestinationFolder="$(OutputPath)\SharedFx.Layout\shared\Microsoft.AspNetCore.App\$(SharedFxVersion)" />
    <Copy SourceFiles="$(OutputPath)\SharedFx.Unzip\Microsoft.AspNetCore.App.versions.txt"
        DestinationFiles="$(OutputPath)\SharedFx.Layout\shared\Microsoft.AspNetCore.App\$(SharedFxVersion)\.version" />

    <Unzip Condition="Exists('$(RepoRoot)artifacts\packages\$(Configuration)\Shipping\Microsoft.AspNetCore.App.Ref.$(SharedFxVersion).nupkg')"
      SourceFiles="$(RepoRoot)artifacts\packages\$(Configuration)\Shipping\Microsoft.AspNetCore.App.Ref.$(SharedFxVersion).nupkg"
      DestinationFolder="$(OutputPath)\SharedFx.Layout\packs\Microsoft.AspNetCore.App.Ref\$(SharedFxVersion)" />
    <ZipDirectory Condition="Exists('$(OutputPath)\SharedFx.Layout')"
      SourceDirectory="$(OutputPath)\SharedFx.Layout"
      DestinationFile="$(OutputPath)\SharedFx.Layout.zip" Overwrite="true" />

    <ItemGroup>
      <HelixCorrelationPayload Include="$(OutputPath)\SharedFx.Layout.zip" Destination="$(DotNetCliDestination)" />
    </ItemGroup>
  </Target>

  <Target Name="Gather" BeforeTargets="Build">
    <MSBuild Projects="@(ProjectToBuild)"
              Targets="CreateHelixPayload"
              SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="HelixWorkItem" />
    </MSBuild>
  </Target>

</Project>
