<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test"
    TreatAsLocalProperty="ProjectToBuild;TreatWarningsAsErrors">
  <PropertyGroup>
    <!--
      When invoking helix.proj for the whole repo with build.cmd, ProjectToBuild will be set to the path to this project.
      This must be reset in order for Build.props to evaluate a list of projects to be tested on Helix.
    -->
    <ProjectToBuild Condition="'$(ProjectToBuild)' == '$(MSBuildProjectFullPath)'"/>

    <!--
      Do not load NuGet.targets since this project doesn't reference anything from NuGet. Reduces `msbuild`
      baggage slightly.
    -->
    <IsRestoreTargetsFileLoaded>true</IsRestoreTargetsFileLoaded>
  </PropertyGroup>

  <Import Project="..\targets\Helix.Common.props" />
  <Import Project="..\Build.props" />
  <Import Project="..\Versions.props" />

  <!-- Microsoft.DotNet.Helix.Sdk.MultiQueue.targets splits $(HelixTargetQueues) into @(HelixTargetQueue) items. -->
  <ItemGroup Condition=" '$(HelixTargetQueues)' == '' ">
    <HelixTargetQueue Condition="'$(_UseHelixOpenQueues)' == 'true'" Include="@(HelixAvailableTargetQueue)" />
    <HelixTargetQueue Condition="'$(_UseHelixOpenQueues)' != 'true'" Include="@(HelixAvailableTargetQueue->'%(Identity)'->Replace('.Open','')->Replace('.open',''))" />
  </ItemGroup>

  <PropertyGroup>
    <HelixBuild>private-$(USERNAME)</HelixBuild>
    <HelixBuild Condition=" '$(USERNAME)' == '' ">private-$(USER)</HelixBuild>
    <IsExternal>true</IsExternal>
    <MaxRetryCount Condition="'$(MaxRetryCount)' == ''">2</MaxRetryCount>
    <HelixAccessToken Condition="'$(_UseHelixOpenQueues)' != 'true'">$(HelixApiAccessToken)</HelixAccessToken>
    <IncludeDotNetCli>true</IncludeDotNetCli>
    <DotNetCliPackageType>sdk</DotNetCliPackageType>
    <DotNetCliVersion>$(NETCoreSdkVersion)</DotNetCliVersion>
    <DotNetCliChannel>Current</DotNetCliChannel>

    <!-- Similar to ProjectLayout.props in the Arcade SDK. The Helix SDK contains nothing similar. -->
    <ArtifactsBinDir Condition=" '$(ArtifactsBinDir)' == '' "
        >$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts', 'bin'))</ArtifactsBinDir>
    <OutputPath Condition=" '$(OutputPath)' == '' "
        >$([MSBuild]::NormalizeDirectory('$(ArtifactsBinDir)', '$(MSBuildProjectName)'))</OutputPath>

    <!--
      Define $(HelixTestConfigurationFilePath) so the Helix SDK automatically includes our test config file in the
      correlation payload. The Helix SDK has a fallback value that doesn't work w/o including the Arcade SDK and
      we intentionally do not do that in this project.
    -->
    <HelixTestConfigurationFilePath>$(RepoRoot)eng/test-configuration.json</HelixTestConfigurationFilePath>
  </PropertyGroup>

  <!-- Specify the .NET runtime we need which will be included as a correlation payload. -->
  <ItemGroup>
    <!--
      Use the BrowserDebugHost transport package as a sentinel for the non-shipping version of the NETCoreApp shared framework.
    -->
    <AdditionalDotNetPackage Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)">
      <PackageType>runtime</PackageType>
    </AdditionalDotNetPackage>

    <AdditionalDotNetPackageFeed Include="https://dotnetbuilds.blob.core.windows.net/internal"
                                 Condition="'$(SYSTEM_TEAMPROJECT)' == 'internal'">
      <SasToken>$([System.Environment]::GetEnvironmentVariable('DotNetBuildsInternalReadSasToken'))</SasToken>
    </AdditionalDotNetPackageFeed>

    <AdditionalDotNetPackageFeed Include="https://dotnetbuilds.blob.core.windows.net/internal"
                                 Condition="'$(SYSTEM_TEAMPROJECT)' == 'internal'">
      <SasToken>$([System.Environment]::GetEnvironmentVariable('DotNetBuildsInternalReadSasToken'))</SasToken>
    </AdditionalDotNetPackageFeed>

    <!-- Grab the tool packages for what HelixTestRunner installs. -->
    <HelixCorrelationPayload Include="$(NUGET_PACKAGES)\dotnet-dump\$(DotnetDumpVersion)\dotnet-dump.$(DotnetDumpVersion).nupkg" />
    <HelixCorrelationPayload Include="$(NUGET_PACKAGES)\dotnet-ef\$(DotnetEfVersion)\dotnet-ef.$(DotnetEfVersion).nupkg" />
    <HelixCorrelationPayload Include="$(NUGET_PACKAGES)\dotnet-serve\$(DotnetServeVersion)\dotnet-serve.$(DotnetServeVersion).nupkg" />

    <!-- Grab published `HelixTestRunner` project output. -->
    <HelixCorrelationPayload Include="$(ArtifactsBinDir)HelixTestRunner\$(Configuration)\net9.0\publish\"
        Destination="HelixTestRunner" />
  </ItemGroup>

  <Choose>
    <When Condition=" '$(ContinuousIntegrationBuild)' == 'true' ">
      <PropertyGroup>
        <!-- Creator is not valid for internal queues -->
        <Creator Condition=" '$(_UseHelixOpenQueues)' == 'true' ">aspnetcore</Creator>

        <HelixType>ci</HelixType>
        <HelixBuild>$(BUILD_BUILDNUMBER).$(SYSTEM_JOBATTEMPT)</HelixBuild>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <!-- Creator is not valid for internal queues -->
        <Creator Condition=" '$(_UseHelixOpenQueues)' == 'true' ">$(USERNAME)</Creator>
        <Creator Condition=" '$(_UseHelixOpenQueues)' == 'true' AND '$(USERNAME)' == '' ">$(USER)</Creator>

        <HelixType>dev</HelixType>
        <HelixBuild>$([System.DateTime]::Now.ToString('yyyyMMddHHmm'))</HelixBuild>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Items with the type "HelixProperties" will become arbitrary JSON associated with the job -->
  <!-- NOTE: These are global to the whole Job, so don't include project-specific content here. -->
  <ItemGroup>
    <HelixProperties Include="buildNumber" Value="$(BUILD_BUILDNUMBER)" Condition="'$(BUILD_BUILDNUMBER)' != ''" />
    <HelixProperties Include="buildId" Value="$(BUILD_BUILDID)" Condition="'$(BUILD_BUILDID)' != ''" />
    <HelixProperties Include="azdoProject" Value="$(SYSTEM_TEAMPROJECT)" Condition="'$(SYSTEM_TEAMPROJECT)' != ''" />
    <HelixProperties Include="buildDefinition" Value="$(BUILD_DEFINITIONNAME)" Condition="'$(BUILD_DEFINITIONNAME)' != ''" />
    <HelixProperties Include="commitSha" Value="$(BUILD_SOURCEVERSION)" Condition="'$(BUILD_SOURCEVERSION)' != ''" />
    <HelixProperties Include="branch" Value="$(BUILD_SOURCEBRANCH)" Condition="'$(BUILD_SOURCEBRANCH)' != ''" />
    <HelixProperties Condition="'$(RunQuarantinedTests)' == 'true'" Include="runType" Value="quarantined" />
    <HelixProperties Condition="'$(RunQuarantinedTests)' != 'true'" Include="runType" Value="unquarantined" />
  </ItemGroup>

  <!--
    In inner (per-queue) builds, tell the Helix SDK to pack up our just-built App.Ref / App.Runtime layouts w/
    the current versions.
  -->
  <Target Name="IncludeAspNetRuntime" BeforeTargets="Gather">
    <MSBuild Projects="$(RepoRoot)src\Framework\App.Runtime\src\Microsoft.AspNetCore.App.Runtime.csproj"
        Properties="ExcludeFromBuild=false"
        Targets="_GetPackageVersionInfo">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProductVersionInfo" />
    </MSBuild>

    <PropertyGroup>
      <SharedFxVersion>@(_ResolvedProductVersionInfo->'%(PackageVersion)')</SharedFxVersion>
      <_AppRefSubPath>$([System.IO.Path]::Combine('packs', 'Microsoft.AspNetCore.App.Ref', '$(SharedFxVersion)'))</_AppRefSubPath>
      <_AppRuntimeSubPath>$([System.IO.Path]::Combine('shared', 'Microsoft.AspNetCore.App', '$(SharedFxVersion)'))</_AppRuntimeSubPath>
      <_AppRefPath>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts', 'obj', 'TargetingPack.Layout', '$(Configuration)', '$(_AppRefSubPath)'))</_AppRefPath>
      <_AppRuntimePath>$([MSBuild]::NormalizeDirectory('$(RepoRoot)', 'artifacts', 'obj', 'SharedFx.Layout', '$(Configuration)', '$(TargetRuntimeIdentifier)', '$(_AppRuntimeSubPath)'))</_AppRuntimePath>

      <!--
        Don't bother checking for App.Runtime layout because we want both and App.Ref project depends on the
        App.Runtime project.
      -->
      <_AppRefPathExists Condition=" EXISTS('$(_AppRefPath)') ">true</_AppRefPathExists>
      <_AppRefPathExists Condition=" '$(_AppRefPathExists)' == '' ">false</_AppRefPathExists>
    </PropertyGroup>

    <!-- After complaining about missing App.Ref layout, do nothing else in this target.  -->
    <Message Importance="High"
        Text="Targeting path location '$(_AppRefPath)' does not exist and tests will use the SDK's bundled runtimes and targeting pack."
        Condition=" !$(_AppRefPathExists) AND '$(DoNotRequireSharedFxHelix)' == true " />
    <Error Text="Targeting path location '$(_AppRefPath)' does not exist and some tests are guaranteed to fail."
        Condition=" !$(_AppRefPathExists) AND '$(DoNotRequireSharedFxHelix)' != true " />

    <!-- Grab the ref pack and runtime pack that were just built and have Helix zip that up. -->
    <ItemGroup Condition=" $(_AppRefPathExists) ">
      <HelixCorrelationPayload Include="$(_AppRefPath)"
          Condition=" $(IsWindowsHelixQueue) "
          Destination="$(DotNetCliDestination)\$(_AppRefSubPath)" />
      <HelixCorrelationPayload Include="$(_AppRefPath)"
          Condition=" !$(IsWindowsHelixQueue) "
          Destination="$(DotNetCliDestination)/$(_AppRefSubPath.Replace('\','/'))" />
      <HelixCorrelationPayload Include="$(_AppRuntimePath)"
          Condition=" $(IsWindowsHelixQueue) "
          Destination="$(DotNetCliDestination)\$(_AppRuntimeSubPath)" />
      <HelixCorrelationPayload Include="$(_AppRuntimePath)"
          Condition=" !$(IsWindowsHelixQueue) "
          Destination="$(DotNetCliDestination)/$(_AppRuntimeSubPath.Replace('\','/'))" />
    </ItemGroup>
  </Target>

  <!-- In inner (per-queue) builds, Publish the test projects and create work items. -->
  <Target Name="Gather" BeforeTargets="BeforeTest" Condition=" '$(HelixTargetQueue)' != '' ">
    <MSBuild Projects="@(ProjectToBuild)"
        BuildInParallel="%(ProjectToBuild.BuildInParallel)"
        Targets="CreateHelixPayload"
        SkipNonexistentTargets="true">
      <Output TaskParameter="TargetOutputs" ItemName="HelixWorkItem" />
    </MSBuild>
  </Target>

  <!--
    The inner (per-queue) CoreTest target executes the SendHelixJob task and that may warn about expiring
    queues. Those warnings should not break the build but should be visible. Disable warn-as-error as close
    to target as we can get to avoid ignoring the many warnings that _should_ fail our build.
  -->
  <Target Name="TreatWarningsAsWarnings" BeforeTargets="CoreTest" Condition=" '$(HelixTargetQueue)' != '' ">
    <PropertyGroup>
      <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
    </PropertyGroup>
  </Target>
</Project>
