parameters:
  # This template adds arcade-powered source-build to CI.

  # This is a 'steps' template, and is intended for advanced scenarios where the existing build
  # infra has a careful build methodology that must be followed. For example, a repo
  # (dotnet/runtime) might choose to clone the GitHub repo only once and store it as a pipeline
  # artifact for all subsequent jobs to use, to reduce dependence on a strong network connection to
  # GitHub. Using this steps template leaves room for that infra to be included.

  # Defines the platform on which to run the steps. See 'eng/common/core-templates/job/source-build.yml'
  # for details. The entire object is described in the 'job' template for simplicity, even though
  # the usage of the properties on this object is split between the 'job' and 'steps' templates.
  platform: {}
  is1ESPipeline: false

steps:
# Build. Keep it self-contained for simple reusability. (No source-build-specific job variables.)
- script: |
    set -x
    df -h

    # If building on the internal project, the internal storage variable may be available (usually only if needed)
    # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
    # in the default public locations.
    internalRuntimeDownloadArgs=
    if [ '$(dotnetbuilds-internal-container-read-token-base64)' != '$''(dotnetbuilds-internal-container-read-token-base64)' ]; then
      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://ci.dot.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64) --runtimesourcefeed https://ci.dot.net/internal --runtimesourcefeedkey $(dotnetbuilds-internal-container-read-token-base64)'
    fi

    buildConfig=Release
    # Check if AzDO substitutes in a build config from a variable, and use it if so.
    if [ '$(_BuildConfig)' != '$''(_BuildConfig)' ]; then
      buildConfig='$(_BuildConfig)'
    fi

    targetRidArgs=
    if [ '${{ parameters.platform.targetRID }}' != '' ]; then
      targetRidArgs='/p:TargetRid=${{ parameters.platform.targetRID }}'
    fi

    runtimeOsArgs=
    if [ '${{ parameters.platform.runtimeOS }}' != '' ]; then
      runtimeOsArgs='/p:RuntimeOS=${{ parameters.platform.runtimeOS }}'
    fi

    baseOsArgs=
    if [ '${{ parameters.platform.baseOS }}' != '' ]; then
      baseOsArgs='/p:BaseOS=${{ parameters.platform.baseOS }}'
    fi

    portableBuildArgs=
    if [ '${{ parameters.platform.portableBuild }}' != '' ]; then
      portableBuildArgs='/p:PortableBuild=${{ parameters.platform.portableBuild }}'
    fi

    ${{ coalesce(parameters.platform.buildScript, './build.sh') }} --ci \
      --configuration $buildConfig \
      --restore --build --pack -bl \
      ${{ parameters.platform.buildArguments }} \
      $internalRuntimeDownloadArgs \
      $targetRidArgs \
      $runtimeOsArgs \
      $baseOsArgs \
      $portableBuildArgs \
      /p:DotNetBuildSourceOnly=true \
      /p:DotNetBuildRepo=true \
  displayName: Build

- template: /eng/common/core-templates/steps/publish-pipeline-artifacts.yml
  parameters:
    is1ESPipeline: ${{ parameters.is1ESPipeline }}
    args:
      displayName: Publish BuildLogs
      targetPath: artifacts/log/${{ coalesce(variables._BuildConfig, 'Release') }}
      artifactName: BuildLogs_SourceBuild_${{ parameters.platform.name }}_Attempt$(System.JobAttempt)
      continueOnError: true
      condition: succeededOrFailed()
      sbomEnabled: false  # we don't need SBOM for logs
