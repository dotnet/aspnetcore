parameters:
  # This template adds arcade-powered source-build to CI.

  # This is a 'steps' template, and is intended for advanced scenarios where the existing build
  # infra has a careful build methodology that must be followed. For example, a repo
  # (dotnet/runtime) might choose to clone the GitHub repo only once and store it as a pipeline
  # artifact for all subsequent jobs to use, to reduce dependence on a strong network connection to
  # GitHub. Using this steps template leaves room for that infra to be included.

  # Defines the platform on which to run the steps. See 'eng/common/core-templates/job/source-build.yml'
  # for details. The entire object is described in the 'job' template for simplicity, even though
  # the usage of the properties on this object is split between the 'job' and 'steps' templates.
  platform: {}
  is1ESPipeline: false

steps:
# Build. Keep it self-contained for simple reusability. (No source-build-specific job variables.)
- script: |
    set -x
    df -h

    # If file changes are detected, set CopyWipIntoInnerSourceBuildRepo to copy the WIP changes into the inner source build repo.
    internalRestoreArgs=
    if ! git diff --quiet; then
      internalRestoreArgs='/p:CopyWipIntoInnerSourceBuildRepo=true'
      # The 'Copy WIP' feature of source build uses git stash to apply changes from the original repo.
      # This only works if there is a username/email configured, which won't be the case in most CI runs.
      git config --get user.email
      if [ $? -ne 0 ]; then
        git config user.email dn-bot@microsoft.com
        git config user.name dn-bot
      fi
    fi

    # If building on the internal project, the internal storage variable may be available (usually only if needed)
    # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
    # in the default public locations.
    internalRuntimeDownloadArgs=
    if [ '$(dotnetbuilds-internal-container-read-token-base64)' != '$''(dotnetbuilds-internal-container-read-token-base64)' ]; then
      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64) --runtimesourcefeed https://dotnetbuilds.blob.core.windows.net/internal --runtimesourcefeedkey $(dotnetbuilds-internal-container-read-token-base64)'
    fi

    buildConfig=Release
    # Check if AzDO substitutes in a build config from a variable, and use it if so.
    if [ '$(_BuildConfig)' != '$''(_BuildConfig)' ]; then
      buildConfig='$(_BuildConfig)'
    fi

    officialBuildArgs=
    if [ '${{ and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}' = 'True' ]; then
      officialBuildArgs='/p:DotNetPublishUsingPipelines=true /p:OfficialBuildId=$(BUILD.BUILDNUMBER)'
    fi

    targetRidArgs=
    if [ '${{ parameters.platform.targetRID }}' != '' ]; then
      targetRidArgs='/p:TargetRid=${{ parameters.platform.targetRID }}'
    fi

    runtimeOsArgs=
    if [ '${{ parameters.platform.runtimeOS }}' != '' ]; then
      runtimeOsArgs='/p:RuntimeOS=${{ parameters.platform.runtimeOS }}'
    fi

    baseOsArgs=
    if [ '${{ parameters.platform.baseOS }}' != '' ]; then
      baseOsArgs='/p:BaseOS=${{ parameters.platform.baseOS }}'
    fi

    publishArgs=
    if [ '${{ parameters.platform.skipPublishValidation }}' != 'true' ]; then
      publishArgs='--publish'
    fi

    assetManifestFileName=SourceBuild_RidSpecific.xml
    if [ '${{ parameters.platform.name }}' != '' ]; then
      assetManifestFileName=SourceBuild_${{ parameters.platform.name }}.xml
    fi

    ${{ coalesce(parameters.platform.buildScript, './build.sh') }} --ci \
      --configuration $buildConfig \
      --restore --build --pack $publishArgs -bl \
      $officialBuildArgs \
      $internalRuntimeDownloadArgs \
      $internalRestoreArgs \
      $targetRidArgs \
      $runtimeOsArgs \
      $baseOsArgs \
      /p:SourceBuildNonPortable=${{ parameters.platform.nonPortable }} \
      /p:ArcadeBuildFromSource=true \
      /p:DotNetBuildSourceOnly=true \
      /p:DotNetBuildRepo=true \
      /p:AssetManifestFileName=$assetManifestFileName
  displayName: Build

# Upload build logs for diagnosis.
- task: CopyFiles@2
  displayName: Prepare BuildLogs staging directory
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/*.log
      **/*.binlog
      artifacts/sb/prebuilt-report/**
    TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
    CleanTargetFolder: true
  continueOnError: true
  condition: succeededOrFailed()

- template: /eng/common/core-templates/steps/publish-pipeline-artifacts.yml
  parameters:
    is1ESPipeline: ${{ parameters.is1ESPipeline }}
    args:
      displayName: Publish BuildLogs
      targetPath: '$(Build.StagingDirectory)/BuildLogs'
      artifactName: BuildLogs_SourceBuild_${{ parameters.platform.name }}_Attempt$(System.JobAttempt)
      continueOnError: true
      condition: succeededOrFailed()
      sbomEnabled: false  # we don't need SBOM for logs

# Manually inject component detection so that we can ignore the source build upstream cache, which contains
# a nupkg cache of input packages (a local feed).
# This path must match the upstream cache path in property 'CurrentRepoSourceBuiltNupkgCacheDir'
# in src\Microsoft.DotNet.Arcade.Sdk\tools\SourceBuild\SourceBuildArcade.targets
- template: /eng/common/core-templates/steps/component-governance.yml
  parameters:
    displayName: Component Detection (Exclude upstream cache)
    is1ESPipeline: ${{ parameters.is1ESPipeline }}
    componentGovernanceIgnoreDirectories: '$(Build.SourcesDirectory)/artifacts/sb/src/artifacts/obj/source-built-upstream-cache'
    disableComponentGovernance: ${{ eq(variables['System.TeamProject'], 'public') }}
