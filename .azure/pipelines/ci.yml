# Configure which branches trigger builds
trigger:
  batch: true
  branches:
    include:
    - release/2.*
    - internal/release/2.*

# Run PR validation on all branches
pr:
  branches:
    include:
    - '*'

parameters:
# Choose whether to run the steps that build the installers
- name: buildInstallers
  default: false
  displayName: Build installers?
  type: boolean

variables:
- name: ASPNETCORE_TEST_LOG_MAXPATH
  value: "200" # Keep test log file name length low enough for artifact zipping
- name: DOTNET_HOME
  value: $(Agent.BuildDirectory)/.dotnet
- name: TeamName
  value: AspNetCore
- name: BuildNumberArg
  value: '/p:BuildNumber=$(Build.BuildId)'
- name: SharedFxArgs
  value: '/t:Prepare
          /t:Restore
          /t:GeneratePropsFiles
          /t:BuildSharedFx
          $(BuildNumberArg)'
- ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
  - name: PB_ISFINALBUILD
    value: ${{ coalesce(variables.PB_ISFINALBUILD, 'true') }}
  - name: PB_SignType
    value: ${{ coalesce(variables.PB_SignType, 'real') }}

resources:
  repositories:
  # Repo: 1ESPipelineTemplates/1ESPipelineTemplates
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool:
        name: NetCore1ESPool-Svc-Internal
        image: 1es-windows-2022
        os: windows
    stages:
    - stage: build
      displayName: Build
      jobs:
      - template: .azure/pipelines/jobs/default-build.yml@self
        parameters:
          jobName: Windows_Build
          jobDisplayName: "Build and test: Windows"
          buildArgs: $(BuildNumberArg)
          codeSign: true
          beforeBuild:
          - powershell: "& ./src/Servers/IIS/tools/UpdateIISExpressCertificate.ps1"
            displayName: Setup IISExpress test certificates
          # Skip tests by default in internal non-PR builds.
          ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
            variables:
              PB_SKIPTESTS: ${{ coalesce(variables.PB_SKIPTESTS, 'true') }}

      - ${{ if eq(parameters.buildInstallers, 'true') }}:
        - job: Windows_SharedFx
          displayName: Build Windows x64/x86 SharedFx
          dependsOn: Windows_Build
          timeoutInMinutes: 90
          workspace:
            clean: all
          pool:
            name: NetCore1ESPool-Svc-Internal
            image: 1es-windows-2019
            os: windows
          variables:
            _SignType: real
            JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
            PB_SKIPTESTS: 'true'
          steps:
          - checkout: self
            clean: true
          - task: NodeTool@0
            displayName: Install Node 10.x
            inputs:
              versionSpec: 10.x
          - powershell: ./eng/scripts/InstallJdk.ps1 '11.0.1'
            displayName: Install JDK 11
          - task: NuGetCommand@2
            displayName: 'Clear NuGet caches'
            inputs:
              command: custom
              arguments: 'locals all -clear'
          - task: MicroBuildSigningPlugin@2
            displayName: Install MicroBuild Signing plugin
            inputs:
              signType: $(_SignType)
              zipSources: false
              feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
              ConnectedServiceName: 'MicroBuild Signing Task (DevDiv)'
              ConnectedPMEServiceName: 248d384a-b39b-46e3-8ad5-c2c210d5e7ca
          - task: DownloadPipelineArtifact@2
            displayName: Download artifacts
            inputs:
              artifactName: artifacts-Windows-Release
              targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
          - task: CopyFiles@2
            displayName: Copy artifacts to .deps/
            inputs:
              sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
              contents: '**'
              targetFolder: $(Build.SourcesDirectory)/.deps/
          - script: .\build.cmd
                    -ci
                    /p:SignType=$(_SignType)
                    $(SharedFxArgs)
                    /p:SharedFxRID=win-x64
                    /bl:artifacts/logs/SharedFx-win-x64.binlog
            env:
              PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
              PB_ASSETROOTURL: $(PB_AssetRootUrl)
              PB_RESTORESOURCE: $(PB_RestoreSource)
              PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
            displayName: Build win-x64 SharedFX
          - powershell: eng\scripts\KillProcesses.ps1
            displayName: Kill processes
            condition: always()
          - script: .\build.cmd
                    -ci
                    /p:SignType=$(_SignType)
                    $(SharedFxArgs)
                    /p:SharedFxRID=win-x86
                    /bl:artifacts/logs/SharedFx-win-x86.binlog
            env:
              PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
              PB_ASSETROOTURL: $(PB_AssetRootUrl)
              PB_RESTORESOURCE: $(PB_RestoreSource)
              PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
            displayName: Build win-x86 SharedFX
          - powershell: eng\scripts\KillProcesses.ps1
            displayName: Kill processes
            condition: always()
          - script: .\build.cmd
                    -ci
                    /p:SignType=$(_SignType)
                    $(BuildNumberArg)
                    /p:SkipArtifactInfoTargets=true
                    /p:DisableSignCheck=true
                    /t:DoCodeSigning
                    /bl:artifacts/logs/CodeSign.binlog
            env:
              PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
              PB_ASSETROOTURL: $(PB_AssetRootUrl)
              PB_RESTORESOURCE: $(PB_RestoreSource)
              PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
            displayName: Code Sign
          - powershell: eng\scripts\KillProcesses.ps1
            displayName: Kill processes
            condition: always()
          - task: MicroBuildCleanup@1
            displayName: Cleanup MicroBuild tasks
            condition: always()
          - ${{ if eq(variables['system.pullrequest.isfork'], false) }}:
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Upload artifacts
              condition: always()
              continueOnError: true
              inputs:
                path: artifacts/
                artifactName: artifacts-Windows-SharedFx
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Upload dependencies.g.props
              condition: always()
              continueOnError: true
              inputs:
                path: .deps/dependencies.g.props
                artifactName: artifacts-dependencies-props

        - job: Windows_Installers
          displayName: Build Windows Installers
          dependsOn: Windows_SharedFx
          timeoutInMinutes: 90
          workspace:
            clean: all
          pool:
            name: NetCore1ESPool-Svc-Internal
            image: 1es-windows-2019
            os: windows
          variables:
            _SignType: real
            JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
            PB_SKIPTESTS: 'true'
          steps:
          - checkout: self
            clean: true
          - task: NuGetCommand@2
            displayName: 'Clear NuGet caches'
            inputs:
              command: custom
              arguments: 'locals all -clear'
          - task: MicroBuildSigningPlugin@2
            displayName: Install MicroBuild Signing plugin
            inputs:
              signType: $(_SignType)
              zipSources: false
              feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
              ConnectedServiceName: 'MicroBuild Signing Task (DevDiv)'
              ConnectedPMEServiceName: 248d384a-b39b-46e3-8ad5-c2c210d5e7ca
          - task: DownloadPipelineArtifact@0
            displayName: Download artifacts
            inputs:
              artifactName: artifacts-Windows-SharedFx
              targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/
          - task: DownloadPipelineArtifact@0
            displayName: Download dependencies.g.props
            inputs:
              artifactName: artifacts-dependencies-props
              targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-dependencies-props/
          - task: CopyFiles@2
            displayName: Copy SharedFx artifacts to .deps/
            inputs:
              sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/SharedFX/
              contents: '**'
              targetFolder: $(Build.SourcesDirectory)/.deps/fx/
          - task: CopyFiles@2
            displayName: Copy SharedFx artifacts to .deps/
            inputs:
              sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/packages/
              contents: 'Microsoft.AspNetCore.AspNetCoreModule*.nupkg'
              targetFolder: $(Build.SourcesDirectory)/.deps/ANCM/
          - task: CopyFiles@2
            displayName: Copy dependencies.g.props to .deps/
            inputs:
              sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-dependencies-props/
              contents: 'dependencies.g.props'
              targetFolder: $(Build.SourcesDirectory)/.deps/
          - task: UseDotNet@2
            displayName: Use .NET Core SDK 2.1
            inputs:
              packageType: sdk
              version: 2.1.x
              installationPath: $(Agent.TempDirectory)/dotnet
              workingDirectory: $(Agent.TempDirectory)
          - powershell: src/Installers/Windows/build.ps1
              -Config Release
              -BuildNumber $(Build.BuildId)
            env:
              PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
              PB_ASSETROOTURL: $(PB_AssetRootUrl)
              PB_RESTORESOURCE: $(PB_RestoreSource)
              PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
            displayName: Run src/Installers/Windows/build.ps1
          - powershell: eng\scripts\KillProcesses.ps1
            displayName: Kill processes
            condition: always()
          - ${{ if eq(variables['system.pullrequest.isfork'], false) }}:
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Upload artifacts
              condition: always()
              continueOnError: true
              inputs:
                path: artifacts/
                artifactName: artifacts-Windows-Installers

        - job: Package_Archive
          displayName: Build Package Archive
          dependsOn: Windows_SharedFx
          timeoutInMinutes: 90
          workspace:
            clean: all
          pool:
            name: NetCore1ESPool-Svc-Internal
            image: 1es-windows-2019
            os: windows
          variables:
            _SignType: real
            JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
            PB_SKIPTESTS: 'true'
          steps:
          - checkout: self
            clean: true
          - task: NuGetCommand@2
            displayName: 'Clear NuGet caches'
            inputs:
              command: custom
              arguments: 'locals all -clear'
          - task: DownloadPipelineArtifact@0
            displayName: Download artifacts
            inputs:
              artifactName: artifacts-Windows-SharedFx
              targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/
          - task: CopyFiles@2
            displayName: Copy artifacts to .deps/
            inputs:
              sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/
              contents: '**'
              targetFolder: $(Build.SourcesDirectory)/.deps/Signed/
          - script: .\build.cmd
                    -ci
                    $(BuildNumberArg)
                    /p:SignType=$(_SignType)
                    /t:BuildFallbackArchive
                    /bl:artifacts/logs/PackageArchive.binlog
            env:
              PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
              PB_ASSETROOTURL: $(PB_AssetRootUrl)
              PB_RESTORESOURCE: $(PB_RestoreSource)
              PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
            displayName: Build Package Archive
          - powershell: eng\scripts\KillProcesses.ps1
            displayName: Kill processes
            condition: always()
          - ${{ if eq(variables['system.pullrequest.isfork'], false) }}:
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Upload artifacts
              condition: always()
              continueOnError: true
              inputs:
                path: artifacts/
                artifactName: artifacts-Package-Archive

        - job: SharedFX_Installers
          displayName: Build SharedFX Installers
          dependsOn: Windows_SharedFx
          timeoutInMinutes: 90
          workspace:
            clean: all
          pool:
            name: NetCore1ESPool-Svc-Internal
            image: 1es-windows-2019
            os: windows
          variables:
            LC_ALL: 'en_US.UTF-8'
            LANG: 'en_US.UTF-8'
            LANGUAGE: 'en_US.UTF-8'
            PB_SKIPTESTS: 'true'
          steps:
          - checkout: self
            clean: true
          - task: NuGetCommand@2
            displayName: 'Clear NuGet caches'
            inputs:
              command: custom
              arguments: 'locals all -clear'
          - task: DownloadPipelineArtifact@0
            displayName: Download Windows SharedFx artifacts
            inputs:
              artifactName: artifacts-Windows-SharedFx
              targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/
          - task: CopyFiles@2
            displayName: Copy Windows SharedFx artifacts to .deps/
            inputs:
              sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/
              contents: '**'
              targetFolder: $(Build.SourcesDirectory)/.deps/Signed/
          - script: .\build.cmd
                    -ci
                    $(BuildNumberArg)
                    /t:BuildInstallers
                    /bl:artifacts/logs/SharedFx-Installers.binlog
            env:
              PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
              PB_ASSETROOTURL: $(PB_AssetRootUrl)
              PB_RESTORESOURCE: $(PB_RestoreSource)
              PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
            displayName: Build SharedFX Installers
          - powershell: eng\scripts\KillProcesses.ps1
            displayName: Kill processes
            condition: always()
          - ${{ if eq(variables['system.pullrequest.isfork'], false) }}:
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Upload artifacts
              condition: always()
              continueOnError: true
              inputs:
                path: artifacts/
                artifactName: artifacts-SharedFx-Installers

        # Only run the publish job if this is a prodcon build
        - ${{ if variables['ProductBuildId'] }}:
          - job: Publish
            displayName: Publish
            dependsOn:
              - Windows_Installers
              - SharedFX_Installers
              - Package_Archive
            timeoutInMinutes: 90
            workspace:
              clean: all
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: 1es-windows-2019
              os: windows
            variables:
              _SignType: real
              JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
              PB_SKIPTESTS: 'true'
            steps:
            - checkout: self
              clean: true
            - task: NuGetCommand@2
              displayName: 'Clear NuGet caches'
              inputs:
                command: custom
                arguments: 'locals all -clear'
            - task: DownloadPipelineArtifact@0
              displayName: Download Windows artifacts
              inputs:
                artifactName: artifacts-Windows-Release
                targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/
            - task: DownloadPipelineArtifact@0
              displayName: Download Windows SharedFx artifacts
              inputs:
                artifactName: artifacts-Windows-SharedFx
                targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/
            - task: DownloadPipelineArtifact@0
              displayName: Download Package Archive artifacts
              inputs:
                artifactName: artifacts-Package-Archive
                targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Package-Archive/
            - task: DownloadPipelineArtifact@0
              displayName: Download SharedFx installer artifacts
              inputs:
                artifactName: artifacts-SharedFx-Installers
                targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-SharedFx-Installers/
            - task: DownloadPipelineArtifact@0
              displayName: Download Windows installer artifacts
              inputs:
                artifactName: artifacts-Windows-Installers
                targetPath: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Installers/
            - task: CopyFiles@2
              displayName: Copy Windows artifacts to .deps/assets
              inputs:
                sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Release/build/
                contents: '**/*.tgz'
                targetFolder: $(Build.SourcesDirectory)/.deps/assets/
                flattenFolders: true
            - task: CopyFiles@2
              displayName: Copy Windows SharedFx artifacts to .deps/assets
              inputs:
                sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/
                contents: |
                  SharedFx/**
                  OobArchives/**
                targetFolder: $(Build.SourcesDirectory)/.deps/assets/
                flattenFolders: true
            - task: CopyFiles@2
              displayName: Copy Package Archive artifacts to .deps/assets
              inputs:
                sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Package-Archive/lzma/
                contents: '**'
                targetFolder: $(Build.SourcesDirectory)/.deps/assets/
            - task: CopyFiles@2
              displayName: Copy SharedFx Installer artifacts to .deps/assets
              inputs:
                sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-SharedFx-Installers/installers/
                contents: '**'
                targetFolder: $(Build.SourcesDirectory)/.deps/assets/
            - task: CopyFiles@2
              displayName: Copy Windows Installer artifacts to .deps/assets
              inputs:
                sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-Installers/bin/Release/installers/
                contents: |
                  en-US/*.msi
                  **/*.exe
                  **/*.wixlib
                  **/*.nupkg
                targetFolder: $(Build.SourcesDirectory)/.deps/assets/
                flattenFolders: true
            - task: CopyFiles@2
              displayName: Copy Windows SharedFx artifacts to .deps/packages
              inputs:
                sourceFolder: $(Build.StagingDirectory)/downloaded_artifacts/artifacts-Windows-SharedFx/Signed/Packages/
                contents: '**'
                targetFolder: $(Build.SourcesDirectory)/.deps/packages/
            - task: DeleteFiles@1
              displayName: Delete korebuild.json
              inputs:
                contents: korebuild.json
            - script: .\build.cmd
                      -ci
                      $(BuildNumberArg)
                      /t:Publish
                      /p:BuildBranch=$(Build.SourceBranchName)
                      /bl:artifacts/logs/Publish.binlog
              env:
                PB_PACKAGEVERSIONPROPSURL: $(PB_PackageVersionPropsUrl)
                PB_ASSETROOTURL: $(PB_AssetRootUrl)
                PB_RESTORESOURCE: $(PB_RestoreSource)
                PB_PUBLISHBLOBFEEDKEY: $(PB_PublishBlobFeedKey)
              displayName: Publish
            - powershell: eng\scripts\KillProcesses.ps1
              displayName: Kill processes
              condition: always()
            - ${{ if eq(variables['system.pullrequest.isfork'], false) }}:
              - task: 1ES.PublishPipelineArtifact@1
                displayName: Upload logs
                condition: always()
                continueOnError: true
                inputs:
                  path: artifacts/logs
                  artifactName: artifacts-Publish
