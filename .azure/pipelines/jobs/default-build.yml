# default-build.yml
# Description: Defines a build phase for invoking build.cmd
# Parameters:
#   jobName: string
#       The name of the job. Defaults to the name of the OS. No spaces allowed
#   jobDisplayName: string
#       The friendly job name to display in the UI. Defaults to the name of the OS.
#   poolName: string
#       The name of the Azure DevOps agent pool to use.
#   agentOs: string
#       Used in templates to define variables which are OS specific. Typically 'Windows'.
#   buildArgs: string
#       Additional arguments to pass to the build.cmd script.
#       Note: -ci is always passed
#   beforeBuild: [steps]
#       Additional steps to run before build.cmd
#   afterBuild: [steps]
#       Additional steps to run after build.cmd
#   artifacts:
#      publish: boolean
#           Should artifacts be published
#      path: string
#           The file path to artifacts output
#      name: string
#           The name of the artifact container
#   variables: { string: string }
#     A map of custom variables
#   matrix: { string: { string: string } }
#     A map of matrix configurations and variables. https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#job
#   dependsOn: string | [ string ]
#     For fan-out/fan-in. https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#job
#   codeSign: boolean
#       This build definition is enabled for code signing. (Only applies to Windows)
#   buildDirectory: string
#       Specifies what directory to run build.cmd

#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details
#

parameters:
  agentOs: 'Windows'
  poolName: ''
  configuration: 'Release'
  beforeBuild: []
  afterBuild: []
  codeSign: false
  variables: {}
  dependsOn: ''
  # jobName: '' - use agentOs by default.
  # jobDisplayName: '' - use agentOs by default.
  # matrix: {} - don't define an empty object default because there is no way in template expression yet to check "if isEmpty(parameters.matrix)"
  artifacts:
    publish: true
    path: 'artifacts/'
  buildDirectory: ''
  buildArgs: ''
  timeoutInMinutes: 90

jobs:
- job: ${{ coalesce(parameters.jobName, parameters.agentOs) }}
  displayName: ${{ coalesce(parameters.jobDisplayName, parameters.agentOs) }}
  dependsOn: ${{ parameters.dependsOn }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  workspace:
    clean: all
  strategy:
    ${{ if ne(parameters.matrix, '') }}:
      maxParallel: 8
      matrix: ${{ parameters.matrix }}
  # Map friendly OS names to the right queue
  # See https://github.com/dotnet/arcade/blob/master/Documentation/ChoosingAMachinePool.md
  pool:
    # poolName parameter is currently always empty.
    ${{ if ne(parameters.poolName, '') }}:
      name: ${{ parameters.poolName }}
    # Setting AgentOS to anything but Windows will likely fail the build.
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'Windows')) }}:
      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        name: NetCore-Svc-Public
        demands: ImageOverride -equals 1es-windows-2019-open
      ${{ if ne(variables['System.TeamProject'], 'public') }}:
        name: NetCore1ESPool-Svc-Internal
        image: 1es-windows-2019
        os: windows
  variables:
    AgentOsName: ${{ parameters.agentOs }}
    BuildScriptArgs: ${{ parameters.buildArgs }}
    BuildConfiguration: ${{ parameters.configuration }}
    BuildDirectory: ${{ parameters.buildDirectory }}
    BinlogArg: /bl:artifacts/logs/${{ parameters.agentOs }}.binlog
    LC_ALL: 'en_US.UTF-8'
    LANG: 'en_US.UTF-8'
    LANGUAGE: 'en_US.UTF-8'
    ${{ if eq(parameters.agentOs, 'Windows') }}:
      JAVA_HOME: $(Agent.BuildDirectory)\.tools\jdk
    ${{ if or(ne(parameters.codeSign, 'true'), ne(variables['System.TeamProject'], 'internal'), in(variables['Build.Reason'], 'PullRequest')) }}:
      _SignType:
    ${{ if and(eq(parameters.codeSign, 'true'), eq(variables['System.TeamProject'], 'internal'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      _SignType: real
    ${{ insert }}: ${{ parameters.variables }}
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      PB_PackageVersionPropsUrl: ''
      PB_AssetRootUrl: ''
      PB_RestoreSource: ''
      PB_PublishBlobFeedKey: ''
  steps:
  - checkout: self
    clean: true
  - task: NodeTool@0
    displayName: Install Node 10.x
    inputs:
      versionSpec: 10.x
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - powershell: ./eng/scripts/InstallJdk.ps1 '11.0.1'
      displayName: Install JDK 11
    - task: NuGetCommand@2
      displayName: 'Clear NuGet caches'
      inputs:
        command: custom
        arguments: 'locals all -clear'
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows'), eq(parameters.codeSign, 'true')) }}:
    - task: MicroBuildSigningPlugin@2
      displayName: Install MicroBuild Signing plugin
      condition: and(succeeded(), in(variables['_SignType'], 'test', 'real'))
      inputs:
        signType: $(_SignType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
  - ${{ parameters.beforeBuild }}
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - script: .\$(BuildDirectory)\build.cmd
              -ci
              /p:SignType=$(_SignType)
              /p:Configuration=$(BuildConfiguration)
              /p:DisableSignCheck=true
              /p:_ProjectsOnly=true
              $(BuildScriptArgs)
              $(BinlogArg)
      env:
        PB_PackageVersionPropsUrl: $(PB_PackageVersionPropsUrl)
        PB_AssetRootUrl: $(PB_AssetRootUrl)
        PB_RestoreSource: $(PB_RestoreSource)
        PB_PublishBlobFeedKey: $(PB_PublishBlobFeedKey)
      displayName: Run build.cmd
    - powershell: eng\scripts\KillProcesses.ps1
      displayName: Kill processes
      condition: always()
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows')) }}:
    - powershell: |
        $snapshot = (Get-Content ./build/manifest.dummy.json | ConvertFrom-Json)
        $snapshot.builds[0].commit='$(Build.SourceVersion)'
        New-Item ./artifacts/manifest.json
        $snapshot | ConvertTo-Json -depth 10 | Out-File "./artifacts/manifest.json"
      displayName: Create manifest.json
  - ${{ if ne(parameters.variables.PB_SKIPTESTS, 'true') }}:
    - task: PublishTestResults@2
      displayName: Publish test results
      condition: always()
      continueOnError: true
      inputs:
        testRunTitle: $(AgentOsName)-$(BuildConfiguration)
        testRunner: vstest
        testResultsFiles: 'artifacts/logs/**/*.trx'
        mergeTestResults: true
  - ${{ if and(eq(parameters.artifacts.publish, 'true'), eq(variables['system.pullrequest.isfork'], false)) }}:
    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - task: 1ES.PublishPipelineArtifact@1
        displayName: Upload artifacts
        continueOnError: true
        inputs:
          ${{ if eq(parameters.buildDirectory, '') }}:
            path: ${{ parameters.artifacts.path }}
          ${{ if ne(parameters.buildDirectory, '') }}:
            path: ${{ parameters.buildDirectory }}\${{ parameters.artifacts.path }}
          ${{ if eq(parameters.artifacts.name, '') }}:
            artifactName: artifacts-$(AgentOsName)-$(BuildConfiguration)
          ${{ if ne(parameters.artifacts.name, '') }}:
            artifactName: ${{ parameters.artifacts.name }}
    - ${{ else }}:
      - task: PublishBuildArtifacts@1
        displayName: Upload artifacts
        continueOnError: true
        inputs:
          ${{ if eq(parameters.buildDirectory, '') }}:
            pathToPublish: ${{ parameters.artifacts.path }}
          ${{ if ne(parameters.buildDirectory, '') }}:
            pathToPublish: ${{ parameters.buildDirectory }}\${{ parameters.artifacts.path }}
          ${{ if eq(parameters.artifacts.name, '') }}:
            artifactName: artifacts-$(AgentOsName)-$(BuildConfiguration)
          ${{ if ne(parameters.artifacts.name, '') }}:
            artifactName: ${{ parameters.artifacts.name }}
          artifactType: Container
          parallel: true
  - ${{ if eq(parameters.artifacts.publish, 'true') }}:
    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - task: 1ES.PublishPipelineArtifact@1
        displayName: Upload logs
        condition: always()
        continueOnError: true
        inputs:
          ${{ if eq(parameters.buildDirectory, '') }}:
            path: artifacts/logs/
          ${{ if ne(parameters.buildDirectory, '') }}:
            path: ${{ parameters.buildDirectory }}/artifacts/logs
          artifactName: logs-$(AgentOsName)-$(BuildConfiguration)
    - ${{ else }}:
      - task: PublishBuildArtifacts@1
        displayName: Upload logs
        condition: always()
        continueOnError: true
        inputs:
          ${{ if eq(parameters.buildDirectory, '') }}:
            pathToPublish: artifacts/logs/
          ${{ if ne(parameters.buildDirectory, '') }}:
            pathToPublish: ${{ parameters.buildDirectory }}/artifacts/logs
          artifactName: logs-$(AgentOsName)-$(BuildConfiguration)
          artifactType: Container
          parallel: true
  - ${{ parameters.afterBuild }}
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows')) }}:
    - task: MicroBuildCleanup@1
      displayName: Cleanup MicroBuild tasks
      condition: always()
