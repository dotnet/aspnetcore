<Project>
  <PropertyGroup>
    <!-- This repo does not have solutions to build -->
    <DisableDefaultTargets>true</DisableDefaultTargets>
    <DisableDefaultItems>true</DisableDefaultItems>
    <BuildSolutions>false</BuildSolutions>

    <SkipTests>false</SkipTests>
    <SkipTests Condition="'$(CompileOnly)' == 'true'">true</SkipTests>
    <IsFinalBuild Condition="'$(IsFinalBuild)' == ''">false</IsFinalBuild>

    <SubmoduleRoot>$(RepositoryRoot)modules\</SubmoduleRoot>

    <DependencyPackageDir>$(RepositoryRoot).deps\build\</DependencyPackageDir>
    <SignedDependencyPackageDir>$(RepositoryRoot).deps\Signed\Packages\</SignedDependencyPackageDir>
    <SharedSourcesFolder>$(RepositoryRoot)src\Shared\</SharedSourcesFolder>
    <SharedFxArchitecture Condition="'$(SharedFxArchitecture)' == ''">$(SharedFxRid.Substring($([MSBuild]::Add($(SharedFxRid.LastIndexOf('-')), 1))))</SharedFxArchitecture>
    <BuildSiteExtension>false</BuildSiteExtension>
    <BuildSiteExtension Condition="'$(BuildSiteExtension)' == 'true' AND '$(OS)' != 'Windows_NT'">false</BuildSiteExtension>
  </PropertyGroup>

  <ItemGroup>
    <!-- Don't populate SharedSourceDirectories while doing Code Signing, otherwise we'll try to sign this nonexistant package -->
    <SharedSourceDirectories Include="$(SharedSourcesFolder)Hosting.WebHostBuilderFactory\" Condition="'$(SkipArtifactInfoTargets)' != 'true'" />
  </ItemGroup>

  <ItemGroup>
    <IntermediateInstaller Include="win-x86" FileExt=".zip" />
    <IntermediateInstaller Include="win-x86" FileExt=".wixlib" />
    <IntermediateInstaller Include="win-x64" FileExt=".zip" />
    <IntermediateInstaller Include="win-x64" FileExt=".wixlib" />

    <NativeInstaller Include="win-x86" FileExt=".exe" />
    <NativeInstaller Include="win-x86" FileExt=".zip" />
    <NativeInstaller Include="win-x64" FileExt=".exe" />
    <NativeInstaller Include="win-x64" FileExt=".zip" />

    <SharedFrameworkName Include="Microsoft.AspNetCore.All" />
    <SharedFrameworkName Include="Microsoft.AspNetCore.App" />
  </ItemGroup>

  <ItemGroup>
    <!-- These projects use 'legacy' csproj, which is not supported by dotnet-msbuild. -->
    <ProjectToExclude Include="
                      $(RepositoryRoot)src\Servers\HttpSys\samples\TestClient\TestClient.csproj;
                      $(RepositoryRoot)src\Middleware\WebSockets\samples\TestServer\TestServer.csproj;
                      $(RepositoryRoot)src\Identity\samples\NativeWPFClient\NativeWPFClient.csproj;
                      " />

    <!-- Exclude the websockets samples for now because they use classic .csproj, which is not yet supported in our build. -->
    <ProjectToExclude Include="
                      $(RepositoryRoot)src\Middleware\WebSockets\samples\**\*.csproj;
                      $(RepositoryRoot)src\Middleware\NodeServices.Sockets\**\*.csproj;
                      $(RepositoryRoot)src\Razor\Razor.Design\test\testassets\**\*.*proj;
                      $(RepositoryRoot)src\SignalR\clients\cpp\**\*.*proj;
                      $(RepositoryRoot)src\SignalR\clients\ts\**\node_modules\**\*.*proj;
                      " />

    <!-- Exclude all samples. -->
    <ProjectToExclude Include="
                      $(RepositoryRoot)src\**\samples\**\*.csproj;
                      " />

    <!-- Temporary: Avoid F# until VS 2019 build issues are resolved. -->
    <ProjectToExclude Include="$(RepositoryRoot)src\Mvc\test\WebSites\FSharpWebSite\FSharpWebSite.fsproj" />
  </ItemGroup>

  <Choose>
    <!-- Project selection can be overridden on the command line by passing in -projects -->
    <When Condition="'$(Projects)' != ''">
      <ItemGroup>
        <ProjectToBuild Include="$(Projects)" Exclude="@(ProjectToExclude)">
          <RestoreInParallel Condition="'%(Extension)' == '.npmproj'">false</RestoreInParallel>
        </ProjectToBuild>
      </ItemGroup>
    </When>
    <Otherwise>
      <ItemGroup>
        <ProjectToBuild Condition="'$(SkipNpm)' != 'true'"
                        Include="$(RepositoryRoot)src\SignalR\**\*.npmproj"
                        RestoreInParallel="false"
                        Exclude="@(ProjectToExclude)" />

        <ProjectToBuild Include="
                          $(RepositoryRoot)src\DefaultBuilder\**\*.*proj;
                          $(RepositoryRoot)src\Features\JsonPatch\**\*.*proj;
                          $(RepositoryRoot)src\DataProtection\**\*.*proj;
                          $(RepositoryRoot)src\Antiforgery\**\*.*proj;
                          $(RepositoryRoot)src\Hosting\**\*.*proj;
                          $(RepositoryRoot)src\Http\**\*.*proj;
                          $(RepositoryRoot)src\Html\**\*.*proj;
                          $(RepositoryRoot)src\Identity\**\*.*proj;
                          $(RepositoryRoot)src\Servers\**\*.csproj;
                          $(RepositoryRoot)src\Servers\**\*.pkgproj;
                          $(RepositoryRoot)src\Security\**\*.*proj;
                          $(RepositoryRoot)src\Shared\**\*.*proj;
                          $(RepositoryRoot)src\Middleware\**\*.*proj;
                          $(RepositoryRoot)src\Razor\**\*.*proj;
                          $(RepositoryRoot)src\Mvc\**\*.*proj;
                          $(RepositoryRoot)src\Azure\**\*.*proj;
                          $(RepositoryRoot)src\SignalR\**\*.csproj;
                          "
                        Exclude="
                          @(ProjectToExclude);
                          $(RepositoryRoot)**\node_modules\**\*;
                          $(RepositoryRoot)**\bin\**\*;
                          $(RepositoryRoot)**\obj\**\*;">
          <RestoreInParallel Condition="'%(Extension)' == '.npmproj'">false</RestoreInParallel>
        </ProjectToBuild>
      </ItemGroup>
    </Otherwise>
  </Choose>

  <!-- Properties for publishing -->
  <PropertyGroup>
    <!-- myget = non-orchestrated builds -->
    <PublishToMyGet Condition=" $(PublishType.Contains('myget')) ">true</PublishToMyGet>
    <!-- azure = non-orchestrated builds -->
    <PublishToAzureFeed Condition="$(PublishType.Contains('azure'))">true</PublishToAzureFeed>

    <!-- blob = orchestrated builds -->
    <PublishToTransportFeed Condition="$(PublishType.Contains('blob'))">true</PublishToTransportFeed>
  </PropertyGroup>

  <Import Project="runtimes.props" />
  <Import Project="sources.props" />
  <Import Project="external-dependencies.props" />
  <Import Project="artifacts.props" />
  <Import Project="submodules.props" />
</Project>
