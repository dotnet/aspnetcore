#nullable enable
abstract Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.HandleAuthenticateAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
abstract Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.HandleRemoteAuthenticateAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.HandleRequestResult!>!
abstract Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler<TOptions>.HandleSignInAsync(System.Security.Claims.ClaimsPrincipal! user, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
abstract Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler<TOptions>.HandleSignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authentication.AccessDeniedContext
Microsoft.AspNetCore.Authentication.AccessDeniedContext.AccessDeniedContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions! options) -> void
Microsoft.AspNetCore.Authentication.AccessDeniedContext.AccessDeniedPath.get -> Microsoft.AspNetCore.Http.PathString
Microsoft.AspNetCore.Authentication.AccessDeniedContext.AccessDeniedPath.set -> void
Microsoft.AspNetCore.Authentication.AccessDeniedContext.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
Microsoft.AspNetCore.Authentication.AccessDeniedContext.Properties.set -> void
Microsoft.AspNetCore.Authentication.AccessDeniedContext.ReturnUrl.get -> string?
Microsoft.AspNetCore.Authentication.AccessDeniedContext.ReturnUrl.set -> void
Microsoft.AspNetCore.Authentication.AccessDeniedContext.ReturnUrlParameter.get -> string!
Microsoft.AspNetCore.Authentication.AccessDeniedContext.ReturnUrlParameter.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationBuilder
Microsoft.AspNetCore.Authentication.AuthenticationBuilder.AuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
Microsoft.AspNetCore.Authentication.AuthenticationConfigurationProviderExtensions
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.AuthenticateAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.AuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder) -> void
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.AuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder, Microsoft.AspNetCore.Authentication.ISystemClock! clock) -> void
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.BuildRedirectUri(string! targetPath) -> string!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.ChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Clock.get -> Microsoft.AspNetCore.Authentication.ISystemClock!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Context.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.CurrentUri.get -> string!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.ForbidAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.HandleAuthenticateOnceAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.HandleAuthenticateOnceSafeAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.InitializeAsync(Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Options.get -> TOptions!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.OptionsMonitor.get -> Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.OriginalPath.get -> Microsoft.AspNetCore.Http.PathString
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.OriginalPathBase.get -> Microsoft.AspNetCore.Http.PathString
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Request.get -> Microsoft.AspNetCore.Http.HttpRequest!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Response.get -> Microsoft.AspNetCore.Http.HttpResponse!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Scheme.get -> Microsoft.AspNetCore.Authentication.AuthenticationScheme!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.TimeProvider.get -> System.TimeProvider!
Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.UrlEncoder.get -> System.Text.Encodings.Web.UrlEncoder!
Microsoft.AspNetCore.Authentication.AuthenticationMiddleware
Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.AuthenticationMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider! schemes) -> void
Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Schemes.get -> Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider!
Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Schemes.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.AuthenticationSchemeOptions() -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ClaimsIssuer.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ClaimsIssuer.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Events.get -> object?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Events.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.EventsType.get -> System.Type?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.EventsType.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardAuthenticate.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardAuthenticate.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardChallenge.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardChallenge.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardDefault.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardDefault.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardDefaultSelector.get -> System.Func<Microsoft.AspNetCore.Http.HttpContext!, string?>?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardDefaultSelector.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardForbid.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardForbid.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardSignIn.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardSignIn.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardSignOut.get -> string?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.ForwardSignOut.set -> void
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.TimeProvider.get -> System.TimeProvider?
Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.TimeProvider.set -> void
Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>.BaseContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options) -> void
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>.Options.get -> TOptions!
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>.Request.get -> Microsoft.AspNetCore.Http.HttpRequest!
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>.Response.get -> Microsoft.AspNetCore.Http.HttpResponse!
Microsoft.AspNetCore.Authentication.BaseContext<TOptions>.Scheme.get -> Microsoft.AspNetCore.Authentication.AuthenticationScheme!
Microsoft.AspNetCore.Authentication.HandleRequestContext<TOptions>
Microsoft.AspNetCore.Authentication.HandleRequestContext<TOptions>.HandleRequestContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options) -> void
Microsoft.AspNetCore.Authentication.HandleRequestContext<TOptions>.HandleResponse() -> void
Microsoft.AspNetCore.Authentication.HandleRequestContext<TOptions>.Result.get -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
Microsoft.AspNetCore.Authentication.HandleRequestContext<TOptions>.Result.set -> void
Microsoft.AspNetCore.Authentication.HandleRequestContext<TOptions>.SkipHandler() -> void
Microsoft.AspNetCore.Authentication.HandleRequestResult
Microsoft.AspNetCore.Authentication.HandleRequestResult.Handled.get -> bool
Microsoft.AspNetCore.Authentication.HandleRequestResult.HandleRequestResult() -> void
Microsoft.AspNetCore.Authentication.HandleRequestResult.Skipped.get -> bool
Microsoft.AspNetCore.Authentication.IDataSerializer<TModel>
Microsoft.AspNetCore.Authentication.IDataSerializer<TModel>.Deserialize(byte[]! data) -> TModel?
Microsoft.AspNetCore.Authentication.IDataSerializer<TModel>.Serialize(TModel model) -> byte[]!
Microsoft.AspNetCore.Authentication.ISecureDataFormat<TData>
Microsoft.AspNetCore.Authentication.ISecureDataFormat<TData>.Protect(TData data) -> string!
Microsoft.AspNetCore.Authentication.ISecureDataFormat<TData>.Protect(TData data, string? purpose) -> string!
Microsoft.AspNetCore.Authentication.ISecureDataFormat<TData>.Unprotect(string? protectedText) -> TData?
Microsoft.AspNetCore.Authentication.ISecureDataFormat<TData>.Unprotect(string? protectedText, string? purpose) -> TData?
Microsoft.AspNetCore.Authentication.ISystemClock
Microsoft.AspNetCore.Authentication.ISystemClock.UtcNow.get -> System.DateTimeOffset
Microsoft.AspNetCore.Authentication.JsonDocumentAuthExtensions
Microsoft.AspNetCore.Authentication.PolicySchemeHandler
Microsoft.AspNetCore.Authentication.PolicySchemeHandler.PolicySchemeHandler(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.AspNetCore.Authentication.PolicySchemeOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder) -> void
Microsoft.AspNetCore.Authentication.PolicySchemeHandler.PolicySchemeHandler(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.AspNetCore.Authentication.PolicySchemeOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder, Microsoft.AspNetCore.Authentication.ISystemClock! clock) -> void
Microsoft.AspNetCore.Authentication.PolicySchemeOptions
Microsoft.AspNetCore.Authentication.PolicySchemeOptions.PolicySchemeOptions() -> void
Microsoft.AspNetCore.Authentication.PrincipalContext<TOptions>
Microsoft.AspNetCore.Authentication.PrincipalContext<TOptions>.PrincipalContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Authentication.PropertiesContext<TOptions>
Microsoft.AspNetCore.Authentication.PropertiesContext<TOptions>.PropertiesContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Authentication.PropertiesDataFormat
Microsoft.AspNetCore.Authentication.PropertiesDataFormat.PropertiesDataFormat(Microsoft.AspNetCore.DataProtection.IDataProtector! protector) -> void
Microsoft.AspNetCore.Authentication.PropertiesSerializer
Microsoft.AspNetCore.Authentication.PropertiesSerializer.PropertiesSerializer() -> void
Microsoft.AspNetCore.Authentication.RedirectContext<TOptions>
Microsoft.AspNetCore.Authentication.RedirectContext<TOptions>.RedirectContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options, Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties, string! redirectUri) -> void
Microsoft.AspNetCore.Authentication.RedirectContext<TOptions>.RedirectUri.get -> string!
Microsoft.AspNetCore.Authentication.RedirectContext<TOptions>.RedirectUri.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Fail(string! failureMessage) -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Fail(System.Exception! failure) -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Principal.get -> System.Security.Claims.ClaimsPrincipal?
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Principal.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.RemoteAuthenticationContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Success() -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.OnAccessDenied.get -> System.Func<Microsoft.AspNetCore.Authentication.AccessDeniedContext!, System.Threading.Tasks.Task!>!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.OnAccessDenied.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.OnRemoteFailure.get -> System.Func<Microsoft.AspNetCore.Authentication.RemoteFailureContext!, System.Threading.Tasks.Task!>!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.OnRemoteFailure.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.OnTicketReceived.get -> System.Func<Microsoft.AspNetCore.Authentication.TicketReceivedContext!, System.Threading.Tasks.Task!>!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.OnTicketReceived.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.RemoteAuthenticationEvents() -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>
Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.Events.get -> Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.Events.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.RemoteAuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder) -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.RemoteAuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder, Microsoft.AspNetCore.Authentication.ISystemClock! clock) -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.SignInScheme.get -> string?
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.AccessDeniedPath.get -> Microsoft.AspNetCore.Http.PathString
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.AccessDeniedPath.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Backchannel.get -> System.Net.Http.HttpClient!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Backchannel.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.BackchannelHttpHandler.get -> System.Net.Http.HttpMessageHandler?
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.BackchannelHttpHandler.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.BackchannelTimeout.get -> System.TimeSpan
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.BackchannelTimeout.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.CallbackPath.get -> Microsoft.AspNetCore.Http.PathString
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.CallbackPath.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.CorrelationCookie.get -> Microsoft.AspNetCore.Http.CookieBuilder!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.CorrelationCookie.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.DataProtectionProvider.get -> Microsoft.AspNetCore.DataProtection.IDataProtectionProvider?
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.DataProtectionProvider.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Events.get -> Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Events.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.RemoteAuthenticationOptions() -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.RemoteAuthenticationTimeout.get -> System.TimeSpan
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.RemoteAuthenticationTimeout.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.ReturnUrlParameter.get -> string!
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.ReturnUrlParameter.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.SaveTokens.get -> bool
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.SaveTokens.set -> void
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.SignInScheme.get -> string?
Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.SignInScheme.set -> void
Microsoft.AspNetCore.Authentication.RemoteFailureContext
Microsoft.AspNetCore.Authentication.RemoteFailureContext.Failure.get -> System.Exception?
Microsoft.AspNetCore.Authentication.RemoteFailureContext.Failure.set -> void
Microsoft.AspNetCore.Authentication.RemoteFailureContext.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
Microsoft.AspNetCore.Authentication.RemoteFailureContext.Properties.set -> void
Microsoft.AspNetCore.Authentication.RemoteFailureContext.RemoteFailureContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions! options, System.Exception! failure) -> void
Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder
Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder.RequestPathBaseCookieBuilder() -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Fail(string! failureMessage) -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Fail(System.Exception! failure) -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.NoResult() -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Principal.get -> System.Security.Claims.ClaimsPrincipal?
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Principal.set -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties!
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Properties.set -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Result.get -> Microsoft.AspNetCore.Authentication.AuthenticateResult?
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.ResultContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, TOptions! options) -> void
Microsoft.AspNetCore.Authentication.ResultContext<TOptions>.Success() -> void
Microsoft.AspNetCore.Authentication.SecureDataFormat<TData>
Microsoft.AspNetCore.Authentication.SecureDataFormat<TData>.Protect(TData data) -> string!
Microsoft.AspNetCore.Authentication.SecureDataFormat<TData>.Protect(TData data, string? purpose) -> string!
Microsoft.AspNetCore.Authentication.SecureDataFormat<TData>.SecureDataFormat(Microsoft.AspNetCore.Authentication.IDataSerializer<TData>! serializer, Microsoft.AspNetCore.DataProtection.IDataProtector! protector) -> void
Microsoft.AspNetCore.Authentication.SecureDataFormat<TData>.Unprotect(string? protectedText) -> TData?
Microsoft.AspNetCore.Authentication.SecureDataFormat<TData>.Unprotect(string? protectedText, string? purpose) -> TData?
Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler<TOptions>
Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler<TOptions>.SignInAuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder) -> void
Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler<TOptions>.SignInAuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder, Microsoft.AspNetCore.Authentication.ISystemClock! clock) -> void
Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler<TOptions>
Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler<TOptions>.SignOutAuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder) -> void
Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler<TOptions>.SignOutAuthenticationHandler(Microsoft.Extensions.Options.IOptionsMonitor<TOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! logger, System.Text.Encodings.Web.UrlEncoder! encoder, Microsoft.AspNetCore.Authentication.ISystemClock! clock) -> void
Microsoft.AspNetCore.Authentication.SystemClock
Microsoft.AspNetCore.Authentication.SystemClock.SystemClock() -> void
Microsoft.AspNetCore.Authentication.SystemClock.UtcNow.get -> System.DateTimeOffset
Microsoft.AspNetCore.Authentication.TicketDataFormat
Microsoft.AspNetCore.Authentication.TicketDataFormat.TicketDataFormat(Microsoft.AspNetCore.DataProtection.IDataProtector! protector) -> void
Microsoft.AspNetCore.Authentication.TicketReceivedContext
Microsoft.AspNetCore.Authentication.TicketReceivedContext.ReturnUri.get -> string?
Microsoft.AspNetCore.Authentication.TicketReceivedContext.ReturnUri.set -> void
Microsoft.AspNetCore.Authentication.TicketReceivedContext.TicketReceivedContext(Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authentication.AuthenticationScheme! scheme, Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions! options, Microsoft.AspNetCore.Authentication.AuthenticationTicket! ticket) -> void
Microsoft.AspNetCore.Authentication.TicketSerializer
Microsoft.AspNetCore.Authentication.TicketSerializer.TicketSerializer() -> void
Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions
Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions
override Microsoft.AspNetCore.Authentication.PolicySchemeHandler.HandleAuthenticateAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
override Microsoft.AspNetCore.Authentication.PolicySchemeHandler.HandleChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Authentication.PolicySchemeHandler.HandleForbiddenAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Authentication.PolicySchemeHandler.HandleSignInAsync(System.Security.Claims.ClaimsPrincipal! user, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Authentication.PolicySchemeHandler.HandleSignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.CreateEventsAsync() -> System.Threading.Tasks.Task<object!>!
override Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.HandleAuthenticateAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
override Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.HandleForbiddenAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Validate() -> void
override Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Validate(string! scheme) -> void
override Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder.Build(Microsoft.AspNetCore.Http.HttpContext! context, System.DateTimeOffset expiresFrom) -> Microsoft.AspNetCore.Http.CookieOptions!
static Microsoft.AspNetCore.Authentication.AuthenticationConfigurationProviderExtensions.GetSchemeConfiguration(this Microsoft.AspNetCore.Authentication.IAuthenticationConfigurationProvider! provider, string! authenticationScheme) -> Microsoft.Extensions.Configuration.IConfiguration!
static Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder.Decode(string! text) -> byte[]!
static Microsoft.AspNetCore.Authentication.Base64UrlTextEncoder.Encode(byte[]! data) -> string!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(string! failureMessage) -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(string! failureMessage, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(System.Exception! failure) -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.Fail(System.Exception! failure, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.Handle() -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.NoResult() -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.SkipHandler() -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.HandleRequestResult.Success(Microsoft.AspNetCore.Authentication.AuthenticationTicket! ticket) -> Microsoft.AspNetCore.Authentication.HandleRequestResult!
static Microsoft.AspNetCore.Authentication.JsonDocumentAuthExtensions.GetString(this System.Text.Json.JsonElement element, string! key) -> string?
static Microsoft.AspNetCore.Authentication.PropertiesSerializer.Default.get -> Microsoft.AspNetCore.Authentication.PropertiesSerializer!
static Microsoft.AspNetCore.Authentication.TicketSerializer.Default.get -> Microsoft.AspNetCore.Authentication.TicketSerializer!
static Microsoft.AspNetCore.Builder.AuthAppBuilderExtensions.UseAuthentication(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
static Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! defaultScheme) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
static Microsoft.Extensions.DependencyInjection.AuthenticationServiceCollectionExtensions.AddAuthentication(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Authentication.AuthenticationOptions!>! configureOptions) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
virtual Microsoft.AspNetCore.Authentication.AuthenticationBuilder.AddPolicyScheme(string! authenticationScheme, string? displayName, System.Action<Microsoft.AspNetCore.Authentication.PolicySchemeOptions!>! configureOptions) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
virtual Microsoft.AspNetCore.Authentication.AuthenticationBuilder.AddRemoteScheme<TOptions, THandler>(string! authenticationScheme, string? displayName, System.Action<TOptions!>? configureOptions) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
virtual Microsoft.AspNetCore.Authentication.AuthenticationBuilder.AddScheme<TOptions, THandler>(string! authenticationScheme, string? displayName, System.Action<TOptions!>? configureOptions) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
virtual Microsoft.AspNetCore.Authentication.AuthenticationBuilder.AddScheme<TOptions, THandler>(string! authenticationScheme, System.Action<TOptions!>? configureOptions) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!
virtual Microsoft.AspNetCore.Authentication.AuthenticationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.ClaimsIssuer.get -> string!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.CreateEventsAsync() -> System.Threading.Tasks.Task<object!>!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Events.get -> object?
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.Events.set -> void
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.HandleChallengeAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.HandleForbiddenAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.InitializeEventsAsync() -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.InitializeHandlerAsync() -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.AuthenticationHandler<TOptions>.ResolveTarget(string? scheme) -> string?
virtual Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Validate() -> void
virtual Microsoft.AspNetCore.Authentication.AuthenticationSchemeOptions.Validate(string! scheme) -> void
virtual Microsoft.AspNetCore.Authentication.PrincipalContext<TOptions>.Principal.get -> System.Security.Claims.ClaimsPrincipal?
virtual Microsoft.AspNetCore.Authentication.PrincipalContext<TOptions>.Principal.set -> void
virtual Microsoft.AspNetCore.Authentication.PropertiesContext<TOptions>.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties!
virtual Microsoft.AspNetCore.Authentication.PropertiesContext<TOptions>.Properties.set -> void
virtual Microsoft.AspNetCore.Authentication.PropertiesSerializer.Deserialize(byte[]! data) -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
virtual Microsoft.AspNetCore.Authentication.PropertiesSerializer.Read(System.IO.BinaryReader! reader) -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
virtual Microsoft.AspNetCore.Authentication.PropertiesSerializer.Serialize(Microsoft.AspNetCore.Authentication.AuthenticationProperties! model) -> byte[]!
virtual Microsoft.AspNetCore.Authentication.PropertiesSerializer.Write(System.IO.BinaryWriter! writer, Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> void
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationContext<TOptions>.Properties.set -> void
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.AccessDenied(Microsoft.AspNetCore.Authentication.AccessDeniedContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.RemoteFailure(Microsoft.AspNetCore.Authentication.RemoteFailureContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationEvents.TicketReceived(Microsoft.AspNetCore.Authentication.TicketReceivedContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.GenerateCorrelationId(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> void
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.HandleAccessDeniedErrorAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.HandleRequestResult!>!
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.HandleRequestAsync() -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.ShouldHandleRequestAsync() -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Authentication.RemoteAuthenticationHandler<TOptions>.ValidateCorrelationId(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> bool
virtual Microsoft.AspNetCore.Authentication.RequestPathBaseCookieBuilder.AdditionalPath.get -> string?
virtual Microsoft.AspNetCore.Authentication.SignInAuthenticationHandler<TOptions>.SignInAsync(System.Security.Claims.ClaimsPrincipal! user, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.SignOutAuthenticationHandler<TOptions>.SignOutAsync(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.Deserialize(byte[]! data) -> Microsoft.AspNetCore.Authentication.AuthenticationTicket?
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.Read(System.IO.BinaryReader! reader) -> Microsoft.AspNetCore.Authentication.AuthenticationTicket?
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.ReadClaim(System.IO.BinaryReader! reader, System.Security.Claims.ClaimsIdentity! identity) -> System.Security.Claims.Claim!
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.ReadIdentity(System.IO.BinaryReader! reader) -> System.Security.Claims.ClaimsIdentity!
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.Serialize(Microsoft.AspNetCore.Authentication.AuthenticationTicket! ticket) -> byte[]!
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.Write(System.IO.BinaryWriter! writer, Microsoft.AspNetCore.Authentication.AuthenticationTicket! ticket) -> void
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.WriteClaim(System.IO.BinaryWriter! writer, System.Security.Claims.Claim! claim) -> void
virtual Microsoft.AspNetCore.Authentication.TicketSerializer.WriteIdentity(System.IO.BinaryWriter! writer, System.Security.Claims.ClaimsIdentity! identity) -> void
