#nullable enable
Microsoft.AspNetCore.Authorization.AuthorizationMiddleware
Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.AuthorizationMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider! policyProvider) -> void
Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.AuthorizationMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider! policyProvider, System.IServiceProvider! services) -> void
Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.AuthorizationMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider! policyProvider, System.IServiceProvider! services, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Authorization.AuthorizationMiddleware!>! logger) -> void
Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authorization.IAuthorizationMiddlewareResultHandler
Microsoft.AspNetCore.Authorization.IAuthorizationMiddlewareResultHandler.HandleAsync(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy, Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult! authorizeResult) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler
Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.AuthorizationMiddlewareResultHandler() -> void
Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.AspNetCore.Http.HttpContext! context, Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy, Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult! authorizeResult) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator
Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy, Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy, Microsoft.AspNetCore.Authentication.AuthenticateResult! authenticationResult, Microsoft.AspNetCore.Http.HttpContext! context, object? resource) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult!>!
Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult
Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.AuthorizationFailure.get -> Microsoft.AspNetCore.Authorization.AuthorizationFailure?
Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Challenged.get -> bool
Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Forbidden.get -> bool
Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Succeeded.get -> bool
Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator
Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator.PolicyEvaluator(Microsoft.AspNetCore.Authorization.IAuthorizationService! authorization) -> void
Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions
Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions
Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions
static Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Challenge() -> Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult!
static Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Forbid() -> Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult!
static Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Forbid(Microsoft.AspNetCore.Authorization.AuthorizationFailure? authorizationFailure) -> Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult!
static Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Success() -> Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult!
static Microsoft.AspNetCore.Builder.AuthorizationAppBuilderExtensions.UseAuthorization(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.AllowAnonymous<TBuilder>(this TBuilder builder) -> TBuilder
static Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization<TBuilder>(this TBuilder builder) -> TBuilder
static Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization<TBuilder>(this TBuilder builder, Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy) -> TBuilder
static Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization<TBuilder>(this TBuilder builder, params Microsoft.AspNetCore.Authorization.IAuthorizeData![]! authorizeData) -> TBuilder
static Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization<TBuilder>(this TBuilder builder, params string![]! policyNames) -> TBuilder
static Microsoft.AspNetCore.Builder.AuthorizationEndpointConventionBuilderExtensions.RequireAuthorization<TBuilder>(this TBuilder builder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!>! configurePolicy) -> TBuilder
static Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorizationBuilder(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Authorization.AuthorizationBuilder!
static Microsoft.Extensions.DependencyInjection.PolicyServiceCollectionExtensions.AddAuthorizationPolicyEvaluator(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
virtual Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator.AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy, Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!
virtual Microsoft.AspNetCore.Authorization.Policy.PolicyEvaluator.AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy, Microsoft.AspNetCore.Authentication.AuthenticateResult! authenticationResult, Microsoft.AspNetCore.Http.HttpContext! context, object? resource) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult!>!
