#nullable enable
Microsoft.AspNetCore.TestHost.ClientHandler
Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions
Microsoft.AspNetCore.TestHost.HttpResetTestException
Microsoft.AspNetCore.TestHost.HttpResetTestException.ErrorCode.get -> int
Microsoft.AspNetCore.TestHost.HttpResetTestException.HttpResetTestException(int errorCode) -> void
Microsoft.AspNetCore.TestHost.RequestBuilder
Microsoft.AspNetCore.TestHost.RequestBuilder.AddHeader(string! name, string! value) -> Microsoft.AspNetCore.TestHost.RequestBuilder!
Microsoft.AspNetCore.TestHost.RequestBuilder.And(System.Action<System.Net.Http.HttpRequestMessage!>! configure) -> Microsoft.AspNetCore.TestHost.RequestBuilder!
Microsoft.AspNetCore.TestHost.RequestBuilder.GetAsync() -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!
Microsoft.AspNetCore.TestHost.RequestBuilder.PostAsync() -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!
Microsoft.AspNetCore.TestHost.RequestBuilder.RequestBuilder(Microsoft.AspNetCore.TestHost.TestServer! server, string! path) -> void
Microsoft.AspNetCore.TestHost.RequestBuilder.SendAsync(string! method) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!
Microsoft.AspNetCore.TestHost.RequestBuilder.TestServer.get -> Microsoft.AspNetCore.TestHost.TestServer!
Microsoft.AspNetCore.TestHost.TestServer
Microsoft.AspNetCore.TestHost.TestServer.AllowSynchronousIO.get -> bool
Microsoft.AspNetCore.TestHost.TestServer.AllowSynchronousIO.set -> void
Microsoft.AspNetCore.TestHost.TestServer.BaseAddress.get -> System.Uri!
Microsoft.AspNetCore.TestHost.TestServer.BaseAddress.set -> void
Microsoft.AspNetCore.TestHost.TestServer.CreateClient() -> System.Net.Http.HttpClient!
Microsoft.AspNetCore.TestHost.TestServer.CreateHandler() -> System.Net.Http.HttpMessageHandler!
Microsoft.AspNetCore.TestHost.TestServer.CreateHandler(System.Action<Microsoft.AspNetCore.Http.HttpContext!>! additionalContextConfiguration) -> System.Net.Http.HttpMessageHandler!
Microsoft.AspNetCore.TestHost.TestServer.CreateRequest(string! path) -> Microsoft.AspNetCore.TestHost.RequestBuilder!
Microsoft.AspNetCore.TestHost.TestServer.CreateWebSocketClient() -> Microsoft.AspNetCore.TestHost.WebSocketClient!
Microsoft.AspNetCore.TestHost.TestServer.Dispose() -> void
Microsoft.AspNetCore.TestHost.TestServer.Features.get -> Microsoft.AspNetCore.Http.Features.IFeatureCollection!
Microsoft.AspNetCore.TestHost.TestServer.Host.get -> Microsoft.AspNetCore.Hosting.IWebHost!
Microsoft.AspNetCore.TestHost.TestServer.PreserveExecutionContext.get -> bool
Microsoft.AspNetCore.TestHost.TestServer.PreserveExecutionContext.set -> void
Microsoft.AspNetCore.TestHost.TestServer.SendAsync(System.Action<Microsoft.AspNetCore.Http.HttpContext!>! configureContext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Http.HttpContext!>!
Microsoft.AspNetCore.TestHost.TestServer.Services.get -> System.IServiceProvider!
Microsoft.AspNetCore.TestHost.TestServer.TestServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder! builder) -> void
Microsoft.AspNetCore.TestHost.TestServer.TestServer(Microsoft.AspNetCore.Hosting.IWebHostBuilder! builder, Microsoft.AspNetCore.Http.Features.IFeatureCollection! featureCollection) -> void
Microsoft.AspNetCore.TestHost.TestServer.TestServer(System.IServiceProvider! services) -> void
Microsoft.AspNetCore.TestHost.TestServer.TestServer(System.IServiceProvider! services, Microsoft.AspNetCore.Http.Features.IFeatureCollection! featureCollection) -> void
Microsoft.AspNetCore.TestHost.TestServer.TestServer(System.IServiceProvider! services, Microsoft.AspNetCore.Http.Features.IFeatureCollection! featureCollection, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.TestHost.TestServerOptions!>! optionsAccessor) -> void
Microsoft.AspNetCore.TestHost.TestServer.TestServer(System.IServiceProvider! services, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.TestHost.TestServerOptions!>! optionsAccessor) -> void
Microsoft.AspNetCore.TestHost.TestServerOptions
Microsoft.AspNetCore.TestHost.TestServerOptions.AllowSynchronousIO.get -> bool
Microsoft.AspNetCore.TestHost.TestServerOptions.AllowSynchronousIO.set -> void
Microsoft.AspNetCore.TestHost.TestServerOptions.BaseAddress.get -> System.Uri!
Microsoft.AspNetCore.TestHost.TestServerOptions.BaseAddress.set -> void
Microsoft.AspNetCore.TestHost.TestServerOptions.PreserveExecutionContext.get -> bool
Microsoft.AspNetCore.TestHost.TestServerOptions.PreserveExecutionContext.set -> void
Microsoft.AspNetCore.TestHost.TestServerOptions.TestServerOptions() -> void
Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions
Microsoft.AspNetCore.TestHost.WebHostBuilderFactory
Microsoft.AspNetCore.TestHost.WebSocketClient
Microsoft.AspNetCore.TestHost.WebSocketClient.ConfigureRequest.get -> System.Action<Microsoft.AspNetCore.Http.HttpRequest!>?
Microsoft.AspNetCore.TestHost.WebSocketClient.ConfigureRequest.set -> void
Microsoft.AspNetCore.TestHost.WebSocketClient.ConnectAsync(System.Uri! uri, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Net.WebSockets.WebSocket!>!
Microsoft.AspNetCore.TestHost.WebSocketClient.SubProtocols.get -> System.Collections.Generic.IList<string!>!
static Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions.GetTestClient(this Microsoft.Extensions.Hosting.IHost! host) -> System.Net.Http.HttpClient!
static Microsoft.AspNetCore.TestHost.HostBuilderTestServerExtensions.GetTestServer(this Microsoft.Extensions.Hosting.IHost! host) -> Microsoft.AspNetCore.TestHost.TestServer!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.ConfigureTestContainer<TContainer>(this Microsoft.AspNetCore.Hosting.IWebHostBuilder! webHostBuilder, System.Action<TContainer>! servicesConfiguration) -> Microsoft.AspNetCore.Hosting.IWebHostBuilder!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.ConfigureTestServices(this Microsoft.AspNetCore.Hosting.IWebHostBuilder! webHostBuilder, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection!>! servicesConfiguration) -> Microsoft.AspNetCore.Hosting.IWebHostBuilder!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.GetTestClient(this Microsoft.AspNetCore.Hosting.IWebHost! host) -> System.Net.Http.HttpClient!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.GetTestServer(this Microsoft.AspNetCore.Hosting.IWebHost! host) -> Microsoft.AspNetCore.TestHost.TestServer!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseSolutionRelativeContentRoot(this Microsoft.AspNetCore.Hosting.IWebHostBuilder! builder, string! solutionRelativePath, string! applicationBasePath, string! solutionName = "*.sln") -> Microsoft.AspNetCore.Hosting.IWebHostBuilder!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseSolutionRelativeContentRoot(this Microsoft.AspNetCore.Hosting.IWebHostBuilder! builder, string! solutionRelativePath, string! solutionName = "*.sln") -> Microsoft.AspNetCore.Hosting.IWebHostBuilder!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseTestServer(this Microsoft.AspNetCore.Hosting.IWebHostBuilder! builder) -> Microsoft.AspNetCore.Hosting.IWebHostBuilder!
static Microsoft.AspNetCore.TestHost.WebHostBuilderExtensions.UseTestServer(this Microsoft.AspNetCore.Hosting.IWebHostBuilder! builder, System.Action<Microsoft.AspNetCore.TestHost.TestServerOptions!>! configureOptions) -> Microsoft.AspNetCore.Hosting.IWebHostBuilder!
static Microsoft.AspNetCore.TestHost.WebHostBuilderFactory.CreateFromAssemblyEntryPoint(System.Reflection.Assembly! assembly, string![]! args) -> Microsoft.AspNetCore.Hosting.IWebHostBuilder?
static Microsoft.AspNetCore.TestHost.WebHostBuilderFactory.CreateFromTypesAssemblyEntryPoint<T>(string![]! args) -> Microsoft.AspNetCore.Hosting.IWebHostBuilder?
