// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Microsoft.Extensions.Validation.GeneratorTests;
using VerifyXunit;
using Xunit;

namespace Microsoft.Extensions.Validation.GeneratorTests;

[UsesVerify]
public partial class ValidationsGeneratorTests : ValidationsGeneratorTestBase
{
    [Fact]
    public async Task CanDiscoverGeneratedValidatableTypeAttribute()
    {
        var source = """
            using Microsoft.AspNetCore.Builder;
            using Microsoft.Extensions.DependencyInjection;
            using System.ComponentModel.DataAnnotations;
            using Microsoft.Extensions.Validation.Generated;

            var builder = WebApplication.CreateBuilder();
            builder.Services.AddValidation();
            var app = builder.Build();

            [ValidatableType]
            public class Customer
            {
                [Required]
                public string Name { get; set; } = "";

                [EmailAddress]
                public string Email { get; set; } = "";
            }

            app.MapPost("/customers", (Customer customer) => "OK");

            app.Run();
            """;

        // Simulate the Razor SDK generating the attribute
        var generatedAttributeSource = """
            // <auto-generated/>
            namespace Microsoft.CodeAnalysis
            {
                [global::System.AttributeUsage(global::System.AttributeTargets.All, AllowMultiple = true, Inherited = false)]
                internal sealed class EmbeddedAttribute : global::System.Attribute
                {
                }
            }

            namespace Microsoft.Extensions.Validation.Generated;

            [global::Microsoft.CodeAnalysis.EmbeddedAttribute]
            [global::System.AttributeUsage(global::System.AttributeTargets.Class)]
            internal sealed class ValidatableTypeAttribute : global::System.Attribute
            {
            }
            """;

        // Combine the generated attribute with the user's source
        var combinedSource = generatedAttributeSource + "\n" + source;

        await Verify(combinedSource, out var compilation);
    }

    [Fact]
    public async Task CanUseBothFrameworkAndGeneratedValidatableTypeAttributes()
    {
        var source = """
            using Microsoft.AspNetCore.Builder;
            using Microsoft.Extensions.DependencyInjection;
            using System.ComponentModel.DataAnnotations;
            using Microsoft.Extensions.Validation;
            using Microsoft.Extensions.Validation.Generated;

            var builder = WebApplication.CreateBuilder();
            builder.Services.AddValidation();
            var app = builder.Build();

            // Using framework attribute
            [Microsoft.Extensions.Validation.ValidatableType]
            public class Customer
            {
                [Required]
                public string Name { get; set; } = "";

                [EmailAddress]
                public string Email { get; set; } = "";
            }

            // Using generated attribute
            [ValidatableType]
            public class Product
            {
                [Required]
                public string ProductName { get; set; } = "";

                [Range(0, double.MaxValue)]
                public decimal Price { get; set; }
            }

            app.MapPost("/customers", (Customer customer) => "OK");
            app.MapPost("/products", (Product product) => "OK");

            app.Run();
            """;

        // Simulate the Razor SDK generating the attribute
        var generatedAttributeSource = """
            // <auto-generated/>
            namespace Microsoft.CodeAnalysis
            {
                [global::System.AttributeUsage(global::System.AttributeTargets.All, AllowMultiple = true, Inherited = false)]
                internal sealed class EmbeddedAttribute : global::System.Attribute
                {
                }
            }

            namespace Microsoft.Extensions.Validation.Generated;

            [global::Microsoft.CodeAnalysis.EmbeddedAttribute]
            [global::System.AttributeUsage(global::System.AttributeTargets.Class)]
            internal sealed class ValidatableTypeAttribute : global::System.Attribute
            {
            }
            """;

        // Combine the generated attribute with the user's source
        var combinedSource = generatedAttributeSource + "\n" + source;

        await Verify(combinedSource, out var compilation);
    }
}
