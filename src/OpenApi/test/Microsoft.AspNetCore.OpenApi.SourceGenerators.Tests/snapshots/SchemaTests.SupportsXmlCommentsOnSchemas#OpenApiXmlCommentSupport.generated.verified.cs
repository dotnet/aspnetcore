//HintName: OpenApiXmlCommentSupport.generated.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace System.Runtime.CompilerServices
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    file sealed class InterceptsLocationAttribute : System.Attribute
    {
        public InterceptsLocationAttribute(int version, string data)
        {
        }
    }
}

namespace Microsoft.AspNetCore.OpenApi.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Text.Json;
    using System.Text.Json.Nodes;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.OpenApi;
    using Microsoft.AspNetCore.Mvc.Controllers;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.OpenApi.Models;
    using Microsoft.OpenApi.Any;

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file record XmlComment(
        string? Summary,
        string? Description,
        string? Remarks,
        string? Returns,
        string? Value,
        bool Deprecated,
        List<string>? Examples,
        List<XmlParameterComment>? Parameters,
        List<XmlResponseComment>? Responses);

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file record XmlParameterComment(string? Name, string? Description, string? Example, bool Deprecated);

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file record XmlResponseComment(string Code, string? Description, string? Example);

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file static class XmlCommentCache
    {
        private static Dictionary<(Type?, string?), XmlComment>? _cache;
        public static Dictionary<(Type?, string?), XmlComment> Cache
        {
            get
            {
                if (_cache is null)
                {
                    _cache = GenerateCacheEntries();
                }
                return _cache;
            }
        }

        private static Dictionary<(Type?, string?), XmlComment> GenerateCacheEntries()
        {
            var _cache = new Dictionary<(Type?, string?), XmlComment>();

            _cache.Add((typeof(global::Todo), null), new XmlComment("""This is a todo item.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::Project), null), new XmlComment("""The project that contains Todo items.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::ProjectBoard.BoardItem), null), new XmlComment("""An item on the board.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::ProjectRecord), null), new XmlComment("""The project that contains Todo items.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{new XmlParameterComment(@"Name", @"The name of the project.", null, false), new XmlParameterComment(@"Description", @"The description of the project.", null, false), } ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::User), null), new XmlComment(null,null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::ProjectRecord), "Name"), new XmlComment("""The name of the project.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::ProjectRecord), "Description"), new XmlComment("""The description of the project.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TodoWithDescription), "Id"), new XmlComment("""The identifier of the todo.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TodoWithDescription), "Name"), new XmlComment(null,null,null,null,"""The name of the todo.""", false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TodoWithDescription), "Description"), new XmlComment("""A description of the the todo.""", null,null,null,"""Another description of the todo.""", false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "BooleanType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"true", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "IntegerType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"42", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "LongType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"1234567890123456789", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "DoubleType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"3.14", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "FloatType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"3.14", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "DateTimeType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"2022-01-01T00:00:00Z", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "DateOnlyType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"2022-01-01", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "StringType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"Hello, World!", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "GuidType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"2d8f1eac-b5c6-4e29-8c62-4d9d75ef3d3d", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "TimeOnlyType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"12:30:45", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "TimeSpanType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"P3DT4H5M", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "ByteType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"255", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "DecimalType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"3.14159265359", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::TypeWithExamples), "UriType"), new XmlComment(null,null,null,null,null,false, new List<string>{@"https://example.com", }, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::IUser), "Id"), new XmlComment("""The unique identifier for the user.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::IUser), "Name"), new XmlComment("""The user's display name.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::User), "Id"), new XmlComment("""The unique identifier for the user.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));
            _cache.Add((typeof(global::User), "Name"), new XmlComment("""The user's display name.""", null,null,null,null,false, new List<string>{}, new List<XmlParameterComment>{} ,new List<XmlResponseComment>{}));

            return _cache;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file class XmlCommentOperationTransformer : IOpenApiOperationTransformer
    {
        public Task TransformAsync(OpenApiOperation operation, OpenApiOperationTransformerContext context, CancellationToken cancellationToken)
        {
            var methodInfo = context.Description.ActionDescriptor is ControllerActionDescriptor controllerActionDescriptor
                ? controllerActionDescriptor.MethodInfo
                : context.Description.ActionDescriptor.EndpointMetadata.OfType<MethodInfo>().SingleOrDefault();

            if (methodInfo is null)
            {
                return Task.CompletedTask;
            }
            if (XmlCommentCache.Cache.TryGetValue((methodInfo.DeclaringType, methodInfo.Name), out var methodComment))
            {
                if (methodComment.Summary is not null)
                {
                    operation.Summary = methodComment.Summary;
                }
                if (methodComment.Description is not null)
                {
                    operation.Description = methodComment.Description;
                }
                if (methodComment.Remarks is not null)
                {
                    operation.Description = methodComment.Remarks;
                }
                if (methodComment.Parameters is { Count: > 0})
                {
                    foreach (var parameterComment in methodComment.Parameters)
                    {
                        var parameterInfo = methodInfo.GetParameters().SingleOrDefault(info => info.Name == parameterComment.Name);
                        var operationParameter = operation.Parameters?.SingleOrDefault(parameter => parameter.Name == parameterComment.Name);
                        if (operationParameter is not null)
                        {
                            operationParameter.Description = parameterComment.Description;
                            if (parameterComment.Example is { } jsonString)
                            {
                                operationParameter.Example = jsonString.Parse();
                            }
                            operationParameter.Deprecated = parameterComment.Deprecated;
                        }
                        else
                        {
                            var requestBody = operation.RequestBody;
                            if (requestBody is not null)
                            {
                                requestBody.Description = parameterComment.Description;
                                if (parameterComment.Example is { } jsonString)
                                {
                                    foreach (var mediaType in requestBody.Content.Values)
                                    {
                                        mediaType.Example = jsonString.Parse();
                                    }
                                }
                            }
                        }
                    }
                }
                if (methodComment.Responses is { Count: > 0} && operation.Responses is { Count: > 0 })
                {
                    foreach (var response in operation.Responses)
                    {
                        var responseComment = methodComment.Responses.SingleOrDefault(xmlResponse => xmlResponse.Code == response.Key);
                        if (responseComment is not null)
                        {
                            response.Value.Description = responseComment.Description;
                        }

                    }
                }
            }

            return Task.CompletedTask;
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file class XmlCommentSchemaTransformer : IOpenApiSchemaTransformer
    {
        public Task TransformAsync(OpenApiSchema schema, OpenApiSchemaTransformerContext context, CancellationToken cancellationToken)
        {
            if (context.JsonPropertyInfo is { AttributeProvider: PropertyInfo propertyInfo })
            {
                if (XmlCommentCache.Cache.TryGetValue((propertyInfo.DeclaringType, propertyInfo.Name), out var propertyComment))
                {
                    schema.Description = propertyComment.Value ?? propertyComment.Returns ?? propertyComment.Summary;
                    if (propertyComment.Examples?.FirstOrDefault() is { } jsonString)
                    {
                        schema.Example = jsonString.Parse();
                    }
                }
            }
            if (XmlCommentCache.Cache.TryGetValue((context.JsonTypeInfo.Type, null), out var typeComment))
            {
                schema.Description = typeComment.Summary;
                if (typeComment.Examples?.FirstOrDefault() is { } jsonString)
                {
                    schema.Example = jsonString.Parse();
                }
            }
            return Task.CompletedTask;
        }
    }

    file static class JsonNodeExtensions
    {
        public static JsonNode? Parse(this string? json)
        {
            if (json is null)
            {
                return null;
            }

            try
            {
                return JsonNode.Parse(json);
            }
            catch (JsonException)
            {
                try
                {
                    // If parsing fails, try wrapping in quotes to make it a valid JSON string
                    return JsonNode.Parse($"\"{json.Replace("\"", "\\\"")}\"");
                }
                catch (JsonException)
                {
                    return null;
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.AspNetCore.OpenApi.SourceGenerators, Version=42.42.42.42, Culture=neutral, PublicKeyToken=adb9793829ddae60", "42.42.42.42")]
    file static class GeneratedServiceCollectionExtensions
    {
        [global::System.Runtime.CompilerServices.InterceptsLocationAttribute(1, "UZZADqQajYC9HbHNRWW5LaMAAABQcm9ncmFtLmNz")]
        public static IServiceCollection AddOpenApi(this IServiceCollection services)
        {
            return services.AddOpenApi("v1", options =>
            {
                options.AddSchemaTransformer(new XmlCommentSchemaTransformer());
                options.AddOperationTransformer(new XmlCommentOperationTransformer());
            });
        }

    }
}