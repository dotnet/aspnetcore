<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AntiforgeryTokenValidator_AuthenticatedUserWithoutUsername" xml:space="preserve">
    <value>The provided identity of type '{0}' is marked {1} = {2} but does not have a value for {3}. By default, the antiforgery system requires that all authenticated identities have a unique {3}. If it is not possible to provide a unique {3} for this identity, consider extending {4} by overriding the {5} or a custom type that can provide some form of unique identifier for the current user.</value>
    <comment>0 = typeof(identity), 1 = nameof(IsAuthenticated), 2 = bool.TrueString, 3 = nameof(Name), 4 = nameof(IAdditionalDataProvider), 5 = nameof(DefaultAdditionalDataProvider)</comment>
  </data>
  <data name="AntiforgeryToken_AdditionalDataCheckFailed" xml:space="preserve">
    <value>The provided antiforgery token failed a custom data check.</value>
  </data>
  <data name="AntiforgeryToken_ClaimUidMismatch" xml:space="preserve">
    <value>The provided antiforgery token was meant for a different claims-based user than the current user.</value>
  </data>
  <data name="AntiforgeryToken_ClaimUidMismatch_UnauthenticatedUser" xml:space="preserve">
    <value>The provided antiforgery token was meant for an authenticated user, but the current user is not authenticated. Did you put UseAntiforgery() after UseAuthentication()?</value>
  </data>
  <data name="AntiforgeryToken_DeserializationFailed" xml:space="preserve">
    <value>The antiforgery token could not be decrypted.</value>
  </data>
  <data name="AntiforgeryToken_SecurityTokenMismatch" xml:space="preserve">
    <value>The antiforgery cookie token and request token do not match.</value>
  </data>
  <data name="AntiforgeryToken_TokensSwapped" xml:space="preserve">
    <value>Validation of the provided antiforgery token failed. The cookie token and the request token were swapped.</value>
  </data>
  <data name="AntiforgeryToken_UnableToReadRequest" xml:space="preserve">
    <value>Unable to read the antiforgery request token from the posted form.</value>
  </data>
  <data name="AntiforgeryToken_UsernameMismatch" xml:space="preserve">
    <value>The provided antiforgery token was meant for user "{0}", but the current user is "{1}".</value>
  </data>
  <data name="Antiforgery_CookieToken_IsInvalid" xml:space="preserve">
    <value>The antiforgery cookie token is invalid.</value>
  </data>
  <data name="Antiforgery_CookieToken_MustBeProvided" xml:space="preserve">
    <value>The required antiforgery cookie "{0}" is not present.</value>
  </data>
  <data name="Antiforgery_CookieToken_MustBeProvided_Generic" xml:space="preserve">
    <value>The required antiforgery cookie token must be provided.</value>
  </data>
  <data name="Antiforgery_FormToken_MustBeProvided" xml:space="preserve">
    <value>The required antiforgery form field "{0}" is not present.</value>
  </data>
  <data name="Antiforgery_HeaderToken_MustBeProvided" xml:space="preserve">
    <value>The required antiforgery header value "{0}" is not present.</value>
  </data>
  <data name="Antiforgery_RequestToken_MustBeProvided" xml:space="preserve">
    <value>The required antiforgery request token was not provided in either form field "{0}" or header value "{1}".</value>
  </data>
  <data name="Antiforgery_RequestToken_MustBeProvided_Generic" xml:space="preserve">
    <value>The required antiforgery request token must be provided.</value>
  </data>
  <data name="Antiforgery_RequiresSSL" xml:space="preserve">
    <value>The antiforgery system has the configuration value {optionName} = {value}, but the current request is not an SSL request.</value>
  </data>
  <data name="ArgumentCannotBeNullOrEmpty" xml:space="preserve">
    <value>Value cannot be null or empty.</value>
  </data>
</root>