<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>$(DefaultNetCoreTargetFramework)</TargetFramework>
    <Description>Server side rendering for ASP.NET Core Components.</Description>
    <IsAspNetCoreApp>true</IsAspNetCoreApp>
    <GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <NoWarn>$(NoWarn);CS0436</NoWarn>
    <IsPackable>false</IsPackable>
    <EmbeddedFilesManifestFileName>Microsoft.Extensions.FileProviders.Embedded.Manifest.xml</EmbeddedFilesManifestFileName>
    <Nullable>enable</Nullable>
    <DefineConstants>$(DefineConstants);COMPONENTS</DefineConstants>
  </PropertyGroup>

  <!-- This workaround is required when referencing FileProviders.Embedded as a project -->
  <PropertyGroup>
    <_FileProviderTaskAssembly>$(ArtifactsDir)bin\Microsoft.Extensions.FileProviders.Embedded.Manifest.Task\$(Configuration)\netstandard2.0\Microsoft.Extensions.FileProviders.Embedded.Manifest.Task.dll</_FileProviderTaskAssembly>
  </PropertyGroup>

  <UsingTask AssemblyFile="$(_FileProviderTaskAssembly)" TaskName="Microsoft.Extensions.FileProviders.Embedded.Manifest.Task.GenerateEmbeddedResourcesManifest" />

  <ItemGroup>
    <EmbeddedResource Update="FormMapping\FormDataResources.resx" ExcludeFromManifest="true" />
    <EmbeddedResource Update="Resources.resx" ExcludeFromManifest="true" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="$(SharedSourceRoot)Components\ComponentMarker.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(SharedSourceRoot)Components\WebAssemblyComponentSerializationSettings.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(SharedSourceRoot)Components\ServerComponentSerializationSettings.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(SharedSourceRoot)Components\ServerComponent.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(SharedSourceRoot)Components\ResourceCollectionResolver.cs" LinkBase="Assets" />
    <Compile Include="$(RepoRoot)src\Shared\Components\ComponentParameter.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(RepoRoot)src\Shared\Components\PrerenderComponentApplicationStore.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(RepoRoot)src\Shared\Components\ProtectedPrerenderComponentApplicationStore.cs" LinkBase="DependencyInjection" />
    <Compile Include="$(RepoRoot)src\Shared\ClosedGenericMatcher\ClosedGenericMatcher.cs" LinkBase="FormMapping" />
    <Compile Include="$(ComponentsSharedSourceRoot)src\CacheHeaderSettings.cs" Link="Shared\CacheHeaderSettings.cs" />
    <Compile Include="$(ComponentsSharedSourceRoot)src\ResourceCollectionProvider.cs" Link="Shared\ResourceCollectionProvider.cs" />
    <Compile Include="$(ComponentsSharedSourceRoot)src\DefaultAntiforgeryStateProvider.cs" LinkBase="Forms" />
    <Compile Include="$(SharedSourceRoot)LinkerFlags.cs" LinkBase="Shared" />

    <Compile Include="$(SharedSourceRoot)PropertyHelper\**\*.cs" />

  </ItemGroup>

  <ItemGroup>
    <Reference Include="Microsoft.AspNetCore.Antiforgery" />
    <Reference Include="Microsoft.AspNetCore.Components.Authorization" />
    <Reference Include="Microsoft.AspNetCore.Components.Web" />
    <Reference Include="Microsoft.AspNetCore.Diagnostics.Abstractions" />
    <Reference Include="Microsoft.AspNetCore.DataProtection.Extensions" />
    <Reference Include="Microsoft.AspNetCore.Hosting.Abstractions" />
    <Reference Include="Microsoft.AspNetCore.Http" />
    <Reference Include="Microsoft.AspNetCore.Html.Abstractions" />
    <Reference Include="Microsoft.AspNetCore.Http.Abstractions" />
    <Reference Include="Microsoft.AspNetCore.Routing" />
    <Reference Include="Microsoft.AspNetCore.StaticFiles" />
    <Reference Include="Microsoft.AspNetCore.StaticAssets" />
    <Reference Include="Microsoft.Extensions.FileProviders.Embedded" />
  </ItemGroup>

  <PropertyGroup>
    <BlazorWebJSFilename>blazor.web.js</BlazorWebJSFilename>
    <!-- Microsoft.AspNetCore.Components.Web.JS.npmproj always capitalizes the directory name. -->
    <BlazorWebJSFile Condition=" '$(Configuration)' == 'Debug' ">..\..\Web.JS\dist\Debug\$(BlazorWebJSFilename)</BlazorWebJSFile>
    <BlazorWebJSFile Condition=" '$(Configuration)' != 'Debug' ">..\..\Web.JS\dist\Release\$(BlazorWebJSFilename)</BlazorWebJSFile>
  </PropertyGroup>

  <!-- blazor.web.js should exist after eng/Npm.Workspace.nodeproj builds. Fall back if not. -->
  <Target Name="_CheckBlazorWebJSPath" AfterTargets="ResolveProjectReferences" Condition=" !EXISTS('$(BlazorWebJSFile)') ">
    <Warning Text="'$(BlazorWebJSFile)' does not exist. Falling back to checked-in copy." />
    <PropertyGroup>
      <BlazorWebJSFile>..\..\Web.JS\dist\Release\$(BlazorWebJSFilename)</BlazorWebJSFile>
    </PropertyGroup>
  </Target>

  <Target Name="_AddEmbeddedBlazorWebJS" AfterTargets="_CheckBlazorWebJSPath">
    <ItemGroup>
      <EmbeddedResource Include="$(BlazorWebJSFile)" LogicalName="_framework/$(BlazorWebJSFilename)" />
      <EmbeddedResource Include="$(BlazorWebJSFile).map" LogicalName="_framework/$(BlazorWebJSFilename).map" Condition="Exists('$(BlazorWebJSFile).map')" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.AspNetCore.Components.Endpoints.Microbenchmarks" />
    <InternalsVisibleTo Include="Microsoft.AspNetCore.Components.Endpoints.Tests" />
    <InternalsVisibleTo Include="Microsoft.AspNetCore.Mvc.TagHelpers.Test" />
    <InternalsVisibleTo Include="DynamicProxyGenAssembly2" Key="$(MoqPublicKey)" />
  </ItemGroup>

</Project>
