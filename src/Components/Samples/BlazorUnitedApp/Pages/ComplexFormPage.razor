@page "/complex-form"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using BlazorUnitedApp.Validation

<PageTitle>Validated Order Form</PageTitle>

<EditForm Model="@order" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />

    <div class="container mt-4">
        <h4>Order Details</h4>
        <div class="mb-3">
            <label for="orderName" class="form-label">Order Name</label>
            <InputText id="orderName" @bind-Value="order.OrderName" class="form-control" />
            <ValidationMessage For="@(() => order.OrderName)" />
        </div>

        <hr />

        <h4>Customer Details</h4>
        <div class="card mb-3">
            <div class="card-body">
                <div class="mb-3">
                    <label for="customerFullName" class="form-label">Full Name</label>
                    <InputText id="customerFullName" @bind-Value="order.CustomerDetails.FullName" class="form-control" />
                    <ValidationMessage For="@(() => order.CustomerDetails.FullName)" />
                </div>
                <div class="mb-3">
                    <label for="customerEmail" class="form-label">Email</label>
                    <InputText id="customerEmail" @bind-Value="order.CustomerDetails.Email" class="form-control" />
                    <ValidationMessage For="@(() => order.CustomerDetails.Email)" />
                </div>

                <h5>Shipping Address</h5>
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="mb-3 col-sm-8">
                                <label for="shippingStreet" class="form-label">Street</label>
                                <InputText id="shippingStreet" @bind-Value="order.CustomerDetails.ShippingAddress.Street" class="form-control" />
                                <ValidationMessage For="@(() => order.CustomerDetails.ShippingAddress.Street)" />
                            </div>
                            <div class="mb-3 col-sm">
                                <label for="shippingZipCode" class="form-label">Zip Code</label>
                                <InputText id="shippingZipCode" @bind-Value="order.CustomerDetails.ShippingAddress.ZipCode" class="form-control" />
                                <ValidationMessage For="@(() => order.CustomerDetails.ShippingAddress.ZipCode)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <h4>Order Items</h4>
        @if (order.OrderItems.Any())
        {
            for (int i = 0; i < order.OrderItems.Count; i++)
            {
                var itemIndex = i;
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <span>Item @(itemIndex + 1)</span>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveOrderItem(itemIndex)">Remove</button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="mb-3 col-sm-8">
                                <label for="@($"productName_{itemIndex}")" class="form-label">Product Name</label>
                                <InputText id="@($"productName_{itemIndex}")" @bind-Value="order.OrderItems[itemIndex].ProductName" class="form-control" />
                                <ValidationMessage For="@(() => order.OrderItems[itemIndex].ProductName)" />
                            </div>
                            <div class="mb-3 col-sm">
                                <label for="@($"quantity_{itemIndex}")" class="form-label">Quantity</label>
                                <InputNumber id="@($"quantity_{itemIndex}")" @bind-Value="order.OrderItems[itemIndex].Quantity" class="form-control" />
                                <ValidationMessage For="@(() => order.OrderItems[itemIndex].Quantity)" />
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No order items. Add one below.</p>
        }

        <button type="button" class="btn btn-success mb-3" @onclick="AddOrderItem">Add Order Item</button>

        <hr />

        <div class="mb-3">
            <button type="submit" class="btn btn-primary">Submit Order</button>
        </div>

        <ValidationSummary />
    </div>
</EditForm>

@if (submitted)
{
    <div class="mt-4 alert alert-success" role="alert">
        <h4>Form Submitted Successfully!</h4>
        <p>Order Name: @order.OrderName</p>
        <p>Customer: @order.CustomerDetails.FullName (@order.CustomerDetails.Email)</p>
        <h5>Order Items:</h5>
        <ul>
            @foreach (var item in order.OrderItems)
            {
                <li>@item.Quantity x @item.ProductName</li>
            }
        </ul>
    </div>
}

@if (submitFailed)
{
    <div class="mt-4 alert alert-danger" role="alert">
        <h4>Form Submission Failed!</h4>
        <p>Please correct the validation errors and try again.</p>
    </div>
}


@code {
    private OrderModel order = new OrderModel();
    private bool submitted = false;
    private bool submitFailed = false;

    private void HandleValidSubmit()
    {
        Console.WriteLine("Form submitted successfully!");
        submitted = true;
        submitFailed = false;
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form submission failed due to validation errors.");
        submitted = false;
        submitFailed = true;
    }

    private void AddOrderItem()
    {
        order.OrderItems.Add(new OrderItemModel());
        submitted = false;
        submitFailed = false;
    }

    private void RemoveOrderItem(int index)
    {
        if (index >= 0 && index < order.OrderItems.Count)
        {
            order.OrderItems.RemoveAt(index);
        }
        submitted = false;
        submitFailed = false;
    }
}
