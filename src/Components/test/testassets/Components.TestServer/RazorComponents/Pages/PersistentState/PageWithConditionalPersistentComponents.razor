@page "/persistent-state/page-with-conditional-components"
@using TestContentPackage.PersistentComponents

<h3>Persistent component state with conditional rendering</h3>

<h3>
    This page tests persistent component state restoration for:
    1. A component without @@key that always renders (tests component recreation during navigation)
    2. A component that gets conditionally rendered based on query string (tests add/remove scenarios)
    Both should restore state correctly regardless of when they are destroyed and recreated.
</h3>

<p id="render-mode">Render mode: @_renderMode?.GetType()?.Name</p>
<p id="streaming-id">Streaming id:@StreamingId</p>
<p id="show-conditional">Show conditional: @ShowConditional</p>

@if (_renderMode != null)
{
    @* Component without @key that always renders - tests navigation scenarios *@
    <div id="always-rendered-component">
        <h4>Always Rendered Component (no @@key)</h4>
        @if (!string.IsNullOrEmpty(StreamingId))
        {
            <StreamingComponentWithDeclarativePersistentState @rendermode="@_renderMode" StreamingId="@StreamingId" ServerState="@ServerState" />
        }
        else
        {
            <NonStreamingComponentWithDeclarativePersistentState @rendermode="@_renderMode" ServerState="@ServerState" />
        }
    </div>

    @* Conditionally rendered component - tests add/remove scenarios *@
    @if (ShowConditional)
    {
        <div id="conditional-component">
            <h4>Conditionally Rendered Component</h4>
            @if (!string.IsNullOrEmpty(StreamingId))
            {
                <StreamingComponentWithDeclarativePersistentState @key="@("conditional")" @rendermode="@_renderMode" StreamingId="@($"{StreamingId}-conditional")" ServerState="@($"{ServerState}-conditional")" />
            }
            else
            {
                <NonStreamingComponentWithDeclarativePersistentState @key="@("conditional")" @rendermode="@_renderMode" ServerState="@($"{ServerState}-conditional")" />
            }
        </div>
    }
}

@if (!string.IsNullOrEmpty(StreamingId))
{
    <a id="end-streaming" href="@($"persistent-state/end-streaming?streaming-id={StreamingId}")" target="_blank">End streaming</a>
}

<a id="toggle-conditional" href="@GetToggleConditionalUrl()">@(ShowConditional ? "Hide" : "Show") conditional component</a>
<br />
<a id="page-no-components-link" href=@($"persistent-state/page-no-components?render-mode={RenderMode}&streaming-id={StreamingId}")>Go to page with no components</a>

@code {

    private IComponentRenderMode _renderMode;

    [SupplyParameterFromQuery(Name = "render-mode")] public string RenderMode { get; set; }

    [SupplyParameterFromQuery(Name = "streaming-id")] public string StreamingId { get; set; }

    [SupplyParameterFromQuery(Name = "server-state")] public string ServerState { get; set; }

    [SupplyParameterFromQuery(Name = "show-conditional")] public bool ShowConditional { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(RenderMode))
        {
            switch (RenderMode)
            {
                case "server":
                    _renderMode = new InteractiveServerRenderMode(true);
                    break;
                case "wasm":
                    _renderMode = new InteractiveWebAssemblyRenderMode(true);
                    break;
                case "auto":
                    _renderMode = new InteractiveAutoRenderMode(true);
                    break;
                default:
                    throw new ArgumentException($"Invalid render mode: {RenderMode}");
            }
        }
    }

    private string GetToggleConditionalUrl()
    {
        var uri = new UriBuilder(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        query["show-conditional"] = (!ShowConditional).ToString().ToLowerInvariant();
        
        uri.Query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("", query)
            .TrimStart('?');
        
        return uri.ToString();
    }

    [Inject] public NavigationManager Navigation { get; set; }
}
