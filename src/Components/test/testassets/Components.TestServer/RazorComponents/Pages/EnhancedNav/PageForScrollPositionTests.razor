@page "/nav/testing-scroll"
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@rendermode RenderMode.InteractiveServer

<PageTitle>Page for testing scroll position</PageTitle>

<h1 id="test-info-scroll">Scroll tests landing page</h1>

<p>If you scroll down a long way, you'll find more content. We add it asynchronously via streaming rendering.</p>

<div style="height: 2000px; border: 2px dashed red;">spacer top</div>

@if (showContent)
{
    <NavLink id="do-navigation-with-fragment" href="@(hashPageFragmentPath)">
        Navigation to another page with fragment (scroll-to-hash#some-content)
    </NavLink>
    <NavLink id="do-navigation" href="@(hashPagePath)">
        Navigation to another page (scroll-to-hash)
    </NavLink>
    <button id="do-programmatic-navigation-with-fragment" @onclick="@(() => NavigationManager.NavigateTo(hashPageFragmentPath))">
        Programmatic navigation to another page with fragment (scroll-to-hash#some-content)
    </button>
    <button id="do-programmatic-navigation" @onclick="@(() => NavigationManager.NavigateTo(hashPagePath))">
        Programmatic navigation to another page (scroll-to-hash)
    </button>
}

<div style="height: 2000px; border: 2px dashed red;">spacer bottom</div>

@if (showContent)
{
    <h2 id="some-content">Some content</h2>
    <p>This is the content.</p>
}

@code {
    bool showContent;
    string uriOnPageLoad;
    string hashPagePath = "nav/scroll-to-hash";
    string hashPageFragmentPath = "nav/scroll-to-hash#some-content";

    protected override async Task OnInitializedAsync()
    {
        uriOnPageLoad = NavigationManager.Uri;
        await Task.Delay(1000);
        showContent = true;
    }
}
