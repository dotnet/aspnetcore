@page "/redirect/circular"
@using System.Collections.Concurrent
@inject NavigationManager Nav
@inject UnobservedTaskExceptionObserver Observer

<h1>Hello, world!</h1>

@if (_shouldStopRedirecting)
{
    <p id="unobserved-exceptions-count">@_unobservedExceptions.Count</p>

    @if (_unobservedExceptions.Any())
    {
        <h2>Unobserved Exceptions (for debugging):</h2>
        <ul>
            @foreach (var exceptionDetail in _unobservedExceptions)
            {
                <li>
                    <strong>Observed at:</strong> @exceptionDetail.ObservedAt.ToString("yyyy-MM-dd HH:mm:ss.fff") UTC<br/>
                    <strong>Thread ID:</strong> @exceptionDetail.ObservedThreadId<br/>
                    <strong>From Finalizer Thread:</strong> @exceptionDetail.IsFromFinalizerThread<br/>
                    <strong>Exception:</strong> @exceptionDetail.Exception.ToString()<br/>
                    <details>
                        <summary>Detailed Exception Information</summary>
                        <pre>@exceptionDetail.DetailedExceptionInfo</pre>
                    </details>
                    <details>
                        <summary>Call Stack When Observed</summary>
                        <pre>@exceptionDetail.ObservedCallStack</pre>
                    </details>
                </li>
            }
        </ul>
    }
}

@code {
    private bool _shouldStopRedirecting;
    private IReadOnlyCollection<UnobservedExceptionDetails> _unobservedExceptions = Array.Empty<UnobservedExceptionDetails>();

    protected override async Task OnInitializedAsync()
    {
        int visits = Observer.GetCircularRedirectCount();
        if (visits == 0)
        {
            // make sure we start with clean logs
            Observer.Clear();
        }

        // Force GC collection to trigger finalizers - this is what causes the issue
        GC.Collect();
        GC.WaitForPendingFinalizers();
        GC.Collect();
        await Task.Yield();

        if (Observer.GetAndIncrementCircularRedirectCount() < 3)
        {
            Nav.NavigateTo("redirect/circular");
        }
        else
        {
            _shouldStopRedirecting = true;
            _unobservedExceptions = Observer.GetExceptionDetails();
        }
    }
}
