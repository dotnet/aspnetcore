@using System.IO
@using Microsoft.AspNetCore.Components.Web.Image
@using Microsoft.JSInterop
@inject IJSRuntime JS

@implements IAsyncDisposable

<h3>Image Component Tests</h3>

<div>
    <h4>Test Controls</h4>
    <button id="load-png" @onclick="LoadPngWithCache">Load PNG</button>
    <button id="reload-png" @onclick="ReloadPng">Reload PNG</button>
    <button id="load-jpg-stream" @onclick="LoadJpgFromStream">Load JPG (Stream)</button>
    <button id="load-small-chunks" @onclick="LoadImageSmallChunks">Load Large Image (Small Chunks)</button>
    <button id="change-source" @onclick="ChangeDynamicImageSource">Change Dynamic Source</button>
    <!-- New controls -->
    <button id="clear-cache" @onclick="ClearCache">Clear Cache</button>
    <button id="mount-cached" @onclick="MountCached">Mount Cached Image</button>
    <button id="load-pair-sequence" @onclick="LoadPairSequence">Load Two Images (Same Key)</button>
    <button id="load-error" @onclick="LoadErrorImage">Load Error</button>

    <div id="test-status">
        Status: <span id="current-status">@_currentStatus</span>
    </div>
</div>

@if (_pngBasic)
{
    <h4>PNG basic</h4>
    <Image @ref="@_pngBasicRef"
        id="png-basic"
        Source="@_basicImageSource"
        CacheStrategy="CacheStrategy.None" />
}

@if (_jpgStream)
{
    <h4>JPG Stream</h4>
    <Image @ref="@_jpgStreamRef"
        id="jpg-stream"
        Source="@_jpgStreamSource"
        CacheStrategy="CacheStrategy.None" />
}

@if (_smallChunks)
{
    <h4>Small chunks Image</h4>
    <Image @ref="@_smallChunksRef"
        id="chunked-image"
        Source="@_smallChunksSource"
        ChunkSize="@_chunkSize"
        CacheStrategy="CacheStrategy.None" />
}

@if (_dynamicSource)
{
    <h4>Dynamic Source Image</h4>
    <Image @ref="@_dynamicSourceRef"
        id="dynamic-source"
        Source="@_dynamicImageSource"
        CacheStrategy="CacheStrategy.None" />
}

@if (_cachedMount)
{
    <h4>Cached Remount</h4>
    <Image @ref="@_cachedRef"
           id="cached-image"
           Source="@_cachedSource"
           CacheStrategy="CacheStrategy.Memory" />
}

@if (_pair1Visible)
{
    <h4>Pair Image 1</h4>
    <Image @ref="@_pair1Ref"
           id="pair-image-1"
           Source="@_pairSource"
           CacheStrategy="CacheStrategy.Memory" />
}
@if (_pair2Visible)
{
    <h4>Pair Image 2</h4>
    <Image @ref="@_pair2Ref"
           id="pair-image-2"
           Source="@_pairSource"
           CacheStrategy="CacheStrategy.Memory" />
}

@if (_errorImage)
{
    <h4>Error Image</h4>
    <Image @ref="_errorRef"
            id="error-image"
            Source="@_errorSource"
            CacheStrategy="CacheStrategy.None" />
}

@code {
    private Image _pngBasicRef;
    private Image _jpgStreamRef;
    private Image _smallChunksRef;
    private Image _dynamicSourceRef;
    private Image _cachedRef;
    private Image _pair1Ref;
    private Image _pair2Ref;
    private Image _errorRef;

    private ImageSource _basicImageSource = new ImageSource(new byte[0], "", "");
    private ImageSource _jpgStreamSource = new ImageSource(new byte[0], "", "");
    private ImageSource _smallChunksSource = new ImageSource(new byte[0], "", "");
    private ImageSource _dynamicImageSource = new ImageSource(new byte[0], "", "");
    private ImageSource _cachedSource = new ImageSource(new byte[0], "", "");
    private ImageSource _pairSource = new ImageSource(new byte[0], "", "");
    private ImageSource _errorSource = new ImageSource(new byte[0], "", "");

    private bool _pngBasic = false;
    private bool _jpgStream = false;
    private bool _smallChunks = false;
    private bool _dynamicSource = false;
    private bool _cachedMount = false;
    private bool _pair1Visible = false;
    private bool _pair2Visible = false;
    private bool _errorImage = false;

    private string _currentStatus = "Ready";
    private int _chunkSize = 128; // Small chunks for testing
    private bool _isCurrentlyShowingPng = true; // Track which image is currently shown in dynamic test

    // Test image data - 1x1 gray PNG and JPG byte arrays
    private static readonly byte[] TestPngData = Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAA1JREFUGFdjqK6u/g8ABVcCcYoGhmwAAAAASUVORK5CYII=");

    private static readonly byte[] TestJpgData = Convert.FromBase64String("/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/wAALCAABAAEBAREA/8QAFAABAAAAAAAAAAAAAAAAAAAAAP/EABQQAQAAAAAAAAAAAAAAAAAAAAD/2gAIAQEAAD8AN//Z");

    protected override void OnInitialized()
    {
        _currentStatus = "Component initialized";
    }

    private async Task LoadPngWithCache()
    {
        _currentStatus = "Loading PNG with cache...";
        _basicImageSource = new ImageSource(TestPngData, "image/png", "test-png-cached");
        _pngBasic = true;
        await Task.Delay(10);
        _currentStatus = "PNG basic loaded";
    }

    private async Task LoadJpgFromStream()
    {
        _currentStatus = "Loading JPG from stream...";
        var stream = new MemoryStream(TestJpgData);
        _jpgStreamSource = new ImageSource(stream, "image/jpeg", "test-jpg-stream");
        await Task.Delay(10);
        _jpgStream = true;
        _currentStatus = "JPG from stream loaded";

    }

    private async Task LoadImageSmallChunks()
    {
        _currentStatus = "Loading large image with small chunks...";
        _smallChunksSource = new ImageSource(TestJpgData, "image/jpg", "large-chunked-image");
        await Task.Delay(10);
        _smallChunks = true;
        _currentStatus = "Small chunks image loaded";
    }

    private async Task ChangeDynamicImageSource()
    {
        if (!_dynamicSource)
        {
            // First time - show the component with PNG
            _currentStatus = "Loading dynamic source (PNG)...";
            _dynamicImageSource = new ImageSource(TestPngData, "image/png", "dynamic-png");
            _dynamicSource = true;
            _isCurrentlyShowingPng = true;
            await Task.Delay(10);
            _currentStatus = "Dynamic source initialized with PNG";
        }
        else
        {
            // Toggle between PNG and JPG
            if (_isCurrentlyShowingPng)
            {
                _currentStatus = "Changing to JPG...";
                _dynamicImageSource = new ImageSource(TestJpgData, "image/jpeg", "dynamic-jpg");
                _isCurrentlyShowingPng = false;
                await Task.Delay(10);
                _currentStatus = "Dynamic source changed to JPG";
            }
            else
            {
                _currentStatus = "Changing to PNG...";
                _dynamicImageSource = new ImageSource(TestPngData, "image/png", "dynamic-png");
                _isCurrentlyShowingPng = true;
                await Task.Delay(10);
                _currentStatus = "Dynamic source changed to PNG";
            }
        }
    }

    // New helpers for extended E2E scenarios
    private async Task ClearCache()
    {
        try
        {
            var cleared = await JS.InvokeAsync<bool>("Blazor._internal.BinaryImageComponent.clearCache");
            _currentStatus = cleared ? "Cache cleared" : "Cache clear failed";
        }
        catch
        {
            _currentStatus = "Cache clear failed";
        }
    }

    private async Task MountCached()
    {
        _currentStatus = "Mounting cached image...";
        _cachedSource = new ImageSource(TestPngData, "image/png", "cache-persist");
        _cachedMount = true;
        await Task.Delay(10);
        _currentStatus = "Cached mount loaded";
    }

    private async Task LoadPairSequence()
    {
        _currentStatus = "Loading pair sequence...";
        _pairSource = new ImageSource(TestJpgData, "image/jpeg", "pair-cache");
        _pair1Visible = true;
        await Task.Delay(50);
        _pair2Visible = true;
        await Task.Delay(10);
        _currentStatus = "Pair second loaded";
    }

    private async Task ReloadPng()
    {
        _currentStatus = "Reloading PNG...";
        if (_pngBasic)
        {
            _pngBasic = false; // unmount to force a new component instance
            await Task.Delay(10);
        }
        _basicImageSource = new ImageSource(TestPngData, "image/png", "test-png-cached");
        _pngBasic = true;
        await Task.Delay(10);
        _currentStatus = "PNG reloaded";
    }

    private async Task LoadErrorImage()
    {
        _currentStatus = "Loading error image...";
        // Create a stream then seek to end so component throws when validating position
        var ms = new MemoryStream(new byte[] { 1, 2, 3, 4 });
        ms.Seek(ms.Length, SeekOrigin.Begin);
        _errorSource = new ImageSource(ms, "image/png", "error-key");
        _errorImage = true;
        await Task.Delay(10);
        _currentStatus = "Error image loaded";
    }

    public async ValueTask DisposeAsync()
    {
        _currentStatus = "Disposing component...";

        if (_dynamicSourceRef != null)
            await _dynamicSourceRef.DisposeAsync();
        if (_smallChunksRef != null)
            await _smallChunksRef.DisposeAsync();
        if (_jpgStreamRef != null)
            await _jpgStreamRef.DisposeAsync();
        if (_pngBasicRef != null)
            await _pngBasicRef.DisposeAsync();
        if (_cachedRef != null)
            await _cachedRef.DisposeAsync();
        if (_pair1Ref != null)
            await _pair1Ref.DisposeAsync();
        if (_pair2Ref != null)
            await _pair2Ref.DisposeAsync();
    }
}
