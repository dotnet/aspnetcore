<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>$(DefaultNetCoreTargetFramework)</TargetFramework>
    <PackageId>$(TargetingPackName)</PackageId>
    <VersionPrefix>$(TargetingPackVersionPrefix)</VersionPrefix>

    <!-- This is a reference package and does not include any dependencies. -->
    <!-- We also disable warnings about package downgrades, because we intentionally reference lower versions of certain packages -->
    <NoWarn>$(NoWarn);NU5128;NU1605</NoWarn>

    <PackageDescription>Provides a default set of APIs for building an ASP.NET Core application. Contains reference assemblies, documentation, and other design-time assets.

This package is an internal implementation of the .NET Core SDK and is not meant to be used as a normal PackageReference.</PackageDescription>
    <PackageTags>aspnetcore;targeting-pack</PackageTags>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

    <PackageType>DotnetPlatform</PackageType>
    <RefAssemblyPackagePath>ref/$(TargetFramework)/</RefAssemblyPackagePath>

    <!-- There are no symbols for reference assemblies. -->
    <IncludeSymbols>false</IncludeSymbols>

    <!-- The project representing the shared framework doesn't produce a .NET assembly or symbols. -->
    <DebugType>none</DebugType>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>
    <GenerateDependencyFile>false</GenerateDependencyFile>

    <!-- This project should not be referenced via the `<Reference>` implementation. -->
    <IsProjectReferenceProvider>false</IsProjectReferenceProvider>

    <!--
      We are ignoring MSB3243 warnings since implementation and reference assemblies are versioned differently.
      We need both to compose the targeting pack with reference assemblies and xml docs.
    -->
    <MSBuildWarningsAsMessages>MSB3243</MSBuildWarningsAsMessages>
    <!-- We are ignoring NU5131 and NU5128 warnings since the dependency group should be kept empty. -->
    <NoWarn>$(NoWarn);NU5131;NU5128</NoWarn>

    <!-- Platform manifest data -->
    <FrameworkListFileName>FrameworkList.xml</FrameworkListFileName>
    <FrameworkListOutputPath>$(BaseIntermediateOutputPath)$(FrameworkListFileName)</FrameworkListOutputPath>

    <!-- Runtime transport path i.e. location of runtime ref/ assemblies that are not in Microsoft.NETCore.App.Ref. -->
    <RuntimeTransportReferenceDirectory>$(PkgMicrosoft_Internal_Runtime_AspNetCore_Transport)\ref\$(TargetFramework)\</RuntimeTransportReferenceDirectory>

    <!-- Package overrides and platform manifest metadata. -->
    <PackageOverridesFileName>PackageOverrides.txt</PackageOverridesFileName>
    <!-- PackageOverrides.txt is written in GeneratePackageOverrides target unless servicing. -->
    <ReferencePackageOverridesPath Condition="'$(IsServicingBuild)' != 'true'">$(BaseIntermediateOutputPath)$(PackageOverridesFileName)</ReferencePackageOverridesPath>
    <ReferencePackageOverridesPath Condition="'$(IsServicingBuild)' == 'true'">$(RepoRoot)eng\$(PackageOverridesFileName)</ReferencePackageOverridesPath>
    <!-- PlatformManifest.txt is written in App.Runtime's GenerateSharedFxDepsFile target but not used here when servicing. -->
    <ReferencePlatformManifestPath Condition="'$(IsServicingBuild)' != 'true'">$(PlatformManifestOutputPath)</ReferencePlatformManifestPath>
    <ReferencePlatformManifestPath Condition="'$(IsServicingBuild)' == 'true'">$(RepoRoot)eng\PlatformManifest.txt</ReferencePlatformManifestPath>

    <!--
      Package is needed when publishing for Helix tests. Set GeneratePackageOnBuild here, though sometimes
      unnecessary, to avoid distinct references to this project.
    -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <!-- Note: do not add _TransitiveExternalAspNetCoreAppReference to this list. This is intentionally not listed as a direct package reference. -->
    <Reference Include="@(AspNetCoreAppReference);@(AspNetCoreAppReferenceAndPackage);@(ExternalAspNetCoreAppReference)" />

    <!-- Ensure prerequisite analyzers are built. -->
    <ProjectReference Include="..\..\AspNetCoreAnalyzers\src\CodeFixes\Microsoft.AspNetCore.App.CodeFixes.csproj"
      Private="false"
      ReferenceOutputAssembly="false" />

    <ProjectReference Include="$(RepoRoot)src\Components\Analyzers\src\Microsoft.AspNetCore.Components.Analyzers.csproj"
      Private="false"
      ReferenceOutputAssembly="false" />

    <ProjectReference Include="$(RepoRoot)src\Http\Http.Extensions\gen\Microsoft.AspNetCore.Http.RequestDelegateGenerator.csproj"
      Private="false"
      ReferenceOutputAssembly="false" />

    <!-- Enforce build order. Targeting pack needs to bundle analyzers and information about the runtime. -->
    <ProjectReference Include="..\..\App.Runtime\src\Microsoft.AspNetCore.App.Runtime.csproj"
      Private="false"
      ReferenceOutputAssembly="false"
      SkipGetTargetFrameworkProperties="true" />
  </ItemGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetingPackSubPath>packs\Microsoft.AspNetCore.App.Ref\$(PackageVersion)\</TargetingPackSubPath>
    <LayoutTargetDir>$(TargetingPackLayoutRoot)$(TargetingPackSubPath)</LayoutTargetDir>

    <ArchiveOutputFileName>aspnetcore-targeting-pack-$(PackageVersion)-$(TargetRuntimeIdentifier)</ArchiveOutputFileName>
    <ArchiveOutputPath>$(InstallersOutputPath)$(ArchiveOutputFileName)$(ArchiveExtension)</ArchiveOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      _ResolveInitialTargetingPackContent;
      GeneratePackageOverrides;
      GenerateFrameworkListFile;
      _ResolveTargetingPackContent;
      _BatchCopyToLayoutTargetDir;
      _CreateTargetingPackArchive;
    </BuildDependsOn>
    <ResolveTargetingPackContentDependsOn>
      _ResolveInitialTargetingPackContent;
      _ResolveTargetingPackContent;
    </ResolveTargetingPackContentDependsOn>
    <!-- If Build won't run in the GenerateNuspec context, need to update _PackageFiles. -->
    <GenerateNuspecDependsOn Condition=" '$(NoBuild)' == 'true' AND '$(GeneratePackageOnBuild)' != 'true' ">
      $(GenerateNuspecDependsOn);
      $(ResolveTargetingPackContentDependsOn)
    </GenerateNuspecDependsOn>
  </PropertyGroup>

  <!-- Override the default MSBuild targets so that nothing is returned from the project since it represents a collection of assemblies. -->
  <Target Name="GetTargetPath" />
  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />

  <!-- This project doesn't compile anything. -->
  <Target Name="CoreCompile" />

  <!-- Completely disable default targets for copying to output. -->
  <Target Name="CopyFilesToOutputDirectory" />

  <!-- This target finds the reference assemblies. -->
  <Target Name="_ResolveInitialTargetingPackContent"
          Returns="@(AspNetCoreReferenceAssemblyPath)"
          DependsOnTargets="ResolveReferences;FindReferenceAssembliesForReferences">
    <ItemGroup>
      <!-- Exclude a dependency that we don't want to expose. -->
      <_DisallowedReferenceAssemblies Include="System.Net.Quic.dll" />
      <_AvailableRuntimeRefAssemblies Include="$(RuntimeTransportReferenceDirectory)*.dll"
          Exclude="@(_DisallowedReferenceAssemblies->'$(RuntimeTransportReferenceDirectory)%(Filename)%(Extension)')" />
    </ItemGroup>

    <JoinItems Left="@(ReferencePathWithRefAssemblies)" Right="@(_AvailableRuntimeRefAssemblies)" LeftKey="Filename" RightKey="Filename" ItemSpecToUse="Left">
      <Output TaskParameter="JoinResult" ItemName="_ReferencedRuntimeRefAssemblies" />
    </JoinItems>

    <ItemGroup>
      <!--
        Grab full dependency closure but exclude Microsoft.NETCore.App.Ref assets (avoid duplicates) and
        Microsoft.Internal.Runtime.AspNetCore.Transport assets (almost all added just below).

        Filename exclusions are due to implementation assemblies creeping into the closure. Reference assemblies
        for all but System.Security.Cryptography.Pkcs are available in the transport package.
      -->
      <AspNetCoreReferenceAssemblyPath
          Include="@(ReferencePathWithRefAssemblies)"
          Exclude="
            @(ReferencePathWithRefAssemblies->WithMetadataValue('NuGetPackageId', 'Microsoft.NETCore.App.Ref'));
            @(ReferencePathWithRefAssemblies->WithMetadataValue('NuGetPackageId', 'Microsoft.Internal.Runtime.AspNetCore.Transport'));
            @(ReferencePathWithRefAssemblies->WithMetadataValue('Filename', 'System.Diagnostics.EventLog'));
            @(ReferencePathWithRefAssemblies->WithMetadataValue('Filename', 'System.Security.Cryptography.Pkcs'));
            @(ReferencePathWithRefAssemblies->WithMetadataValue('Filename', 'System.Security.Cryptography.Xml'));
            @(ReferencePathWithRefAssemblies->WithMetadataValue('Filename', 'System.Threading.RateLimiting'))"/>

      <AspNetCoreReferenceAssemblyPath
          Include="@(_ReferencedRuntimeRefAssemblies->'$(RuntimeTransportReferenceDirectory)%(FileName)%(Extension)')" />

      <AspNetCoreReferenceDocXml Include="@(_ResolvedProjectReferencePaths->'%(RootDir)%(Directory)%(FileName).xml')"
          Condition="Exists('%(RootDir)%(Directory)%(FileName).xml')" />
      <AspNetCoreReferenceDocXml Include="@(_ReferencedRuntimeRefAssemblies->'$(RuntimeTransportReferenceDirectory)%(FileName).xml')" />
      <!-- Grab remaining .xml files from packages -->
      <AspNetCoreReferenceDocXml
          Include="@(AspNetCoreReferenceAssemblyPath->WithMetadataValue('ExternallyResolved', 'true')->'%(RootDir)%(Directory)%(Filename).xml')"
          Condition="Exists('%(RootDir)%(Directory)%(Filename).xml')" />

      <_InitialRefPackContent Include="$(PkgMicrosoft_Internal_Runtime_AspNetCore_Transport)\$(AnalyzersPackagePath)**\*.*" PackagePath="$(AnalyzersPackagePath)" />
      <_InitialRefPackContent Include="$(ArtifactsDir)bin\Microsoft.AspNetCore.App.Analyzers\$(Configuration)\netstandard2.0\Microsoft.AspNetCore.App.Analyzers.dll" PackagePath="$(AnalyzersPackagePath)dotnet/cs/" />
      <_InitialRefPackContent Include="$(ArtifactsDir)bin\Microsoft.AspNetCore.Components.Analyzers\$(Configuration)\netstandard2.0\Microsoft.AspNetCore.Components.Analyzers.dll" PackagePath="$(AnalyzersPackagePath)dotnet/cs/" />
      <_InitialRefPackContent Include="$(ArtifactsDir)bin\Microsoft.AspNetCore.App.CodeFixes\$(Configuration)\netstandard2.0\Microsoft.AspNetCore.App.CodeFixes.dll" PackagePath="$(AnalyzersPackagePath)dotnet/cs/" />
      <_InitialRefPackContent Include="$(ArtifactsDir)bin\Microsoft.AspNetCore.Http.RequestDelegateGenerator\$(Configuration)\netstandard2.0\Microsoft.AspNetCore.Http.RequestDelegateGenerator.dll" PackagePath="$(AnalyzersPackagePath)dotnet/cs/" />

      <_InitialRefPackContent Include="@(AspNetCoreReferenceAssemblyPath)" PackagePath="$(RefAssemblyPackagePath)" />
      <_InitialRefPackContent Include="@(AspNetCoreReferenceDocXml)" PackagePath="$(RefAssemblyPackagePath)" />
      <_InitialRefPackContent Include="$(ReferencePlatformManifestPath)" PackagePath="$(ManifestsPackagePath)" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveTargetingPackContent">
    <ItemGroup>
      <RefPackContent Include="@(_InitialRefPackContent)" />
      <RefPackContent Include="$(ReferencePackageOverridesPath)" PackagePath="$(ManifestsPackagePath)" />
      <RefPackContent Include="$(FrameworkListOutputPath)" PackagePath="$(ManifestsPackagePath)" />
      <_PackageFiles Include="@(RefPackContent)" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveTargetingPackContent"
      DependsOnTargets="$(ResolveTargetingPackContentDependsOn)"
      Returns="@(AspNetCoreReferenceAssemblyPath)" />

  <Target Name="GeneratePackageOverrides" Condition=" '$(IsServicingBuild)' != 'true' ">
    <ItemGroup>
      <!-- Use package version for non-Runtime references. -->
      <_AspNetCoreAppPackageOverrides Include="@(AspNetCoreReferenceAssemblyPath->'%(NuGetPackageId)|%(NuGetPackageVersion)')"
          Condition="!Exists('$(RuntimeTransportReferenceDirectory)%(AspNetCoreReferenceAssemblyPath.NuGetPackageId).dll') AND
            '%(AspNetCoreReferenceAssemblyPath.NuGetPackageId)' != 'Microsoft.NETCore.App' AND
            '%(AspNetCoreReferenceAssemblyPath.NuGetPackageId)' != 'Microsoft.Internal.Runtime.AspNetCore.Transport' AND
            '%(AspNetCoreReferenceAssemblyPath.NuGetSourceType)' == 'Package' " />

      <!-- Use NETCore.App.Runtime version for Runtime references. -->
      <_AspNetCoreAppPackageOverrides Include="@(_ReferencedRuntimeRefAssemblies->'%(FileName)|$(MicrosoftNETCoreAppRuntimeVersion)')" />

      <_AspNetCoreAppPackageOverrides Include="@(AspNetCoreReferenceAssemblyPath->'%(FileName)|$(ReferencePackSharedFxVersion)')"
          Condition=" '%(AspNetCoreReferenceAssemblyPath.ReferenceSourceTarget)' == 'ProjectReference' " />
    </ItemGroup>

    <WriteLinesToFile
        Lines="@(_AspNetCoreAppPackageOverrides)"
        File="$(ReferencePackageOverridesPath)"
        Overwrite="true" />
  </Target>

  <!--
    Cannot use RemoveDir task because _BatchCopyToLayoutTargetDir may only copy a subset of the files to the
    layout directory. Instead, remove any files that shouldn't exist.
  -->
  <Target Name="_CleanLayout" BeforeTargets="_BatchCopyToLayoutTargetDir">
    <ItemGroup>
      <_ExtraLayoutFiles Include="$(LayoutTargetDir)**\*.*"
          Exclude="@(RefPackContent->'$(LayoutTargetDir)%(PackagePath)%(RecursiveDir)%(FileName)%(Extension)')" />
    </ItemGroup>
    <Delete Files="@(_ExtraLayoutFiles)" />
  </Target>

  <Target Name="_BatchCopyToLayoutTargetDir"
          Inputs="@(RefPackContent)"
          Outputs="@(RefPackContent->'$(LayoutTargetDir)%(PackagePath)%(RecursiveDir)%(FileName)%(Extension)')">
    <Copy SourceFiles="@(RefPackContent)"
          DestinationFiles="@(RefPackContent->'$(LayoutTargetDir)%(PackagePath)%(RecursiveDir)%(FileName)%(Extension)')"
          UseHardlinksIfPossible="true" />
    <Message Importance="High" Text="$(MSBuildProjectName) -> $(LayoutTargetDir)" />
  </Target>

  <Target Name="_CreateTargetingPackArchive"
          Inputs="@(RefPackContent)"
          Outputs="$(ArchiveOutputPath)">
    <ZipDirectory
      SourceDirectory="$(TargetingPackLayoutRoot)"
      DestinationFile="$(ArchiveOutputPath)"
      Overwrite="true"
      Condition="'$(ArchiveExtension)' == '.zip'" />
    <Exec
      Command="tar -czf $(ArchiveOutputPath) ."
      WorkingDirectory="$(TargetingPackLayoutRoot)"
      Condition="'$(ArchiveExtension)' == '.tar.gz'" />
    <Message Importance="High" Text="$(MSBuildProjectName) -> $(ArchiveOutputPath)" />
  </Target>

  <Target Name="GenerateFrameworkListFile">
    <RepoTasks.CreateFrameworkListFile
      Files="@(_InitialRefPackContent)"
      TargetFile="$(FrameworkListOutputPath)"
      RootAttributes="@(FrameworkListRootAttributes)" />
  </Target>
</Project>
