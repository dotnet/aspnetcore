<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TemplateRoute_CannotHaveCatchAllInMultiSegment" xml:space="preserve">
    <value>A path segment that contains more than one section, such as a literal section or a parameter, cannot contain a catch-all parameter.</value>
  </data>
  <data name="TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly" xml:space="preserve">
    <value>The route parameter '{0}' has both an inline default value and an explicit default value specified. A route parameter cannot contain an inline default value when a default value is specified explicitly. Consider removing one of them.</value>
  </data>
  <data name="TemplateRoute_CannotHaveConsecutiveParameters" xml:space="preserve">
    <value>A path segment cannot contain two consecutive parameters. They must be separated by a '/' or by a literal string.</value>
  </data>
  <data name="TemplateRoute_CannotHaveConsecutiveSeparators" xml:space="preserve">
    <value>The route template separator character '/' cannot appear consecutively. It must be separated by either a parameter or a literal value.</value>
  </data>
  <data name="TemplateRoute_CatchAllCannotBeOptional" xml:space="preserve">
    <value>A catch-all parameter cannot be marked optional.</value>
  </data>
  <data name="TemplateRoute_OptionalCannotHaveDefaultValue" xml:space="preserve">
    <value>An optional parameter cannot have default value.</value>
  </data>
  <data name="TemplateRoute_CatchAllMustBeLast" xml:space="preserve">
    <value>A catch-all parameter can only appear as the last segment of the route template.</value>
  </data>
  <data name="TemplateRoute_InvalidLiteral" xml:space="preserve">
    <value>The literal section '{0}' is invalid. Literal sections cannot contain the '?' character.</value>
  </data>
  <data name="TemplateRoute_InvalidParameterName" xml:space="preserve">
    <value>The route parameter name '{0}' is invalid. Route parameter names must be non-empty and cannot contain these characters: '{{', '}}', '/'. The '?' character marks a parameter as optional, and can occur only at the end of the parameter. The '*' character marks a parameter as catch-all, and can occur only at the start of the parameter.</value>
  </data>
  <data name="TemplateRoute_InvalidRouteTemplate" xml:space="preserve">
    <value>The route template cannot start with a '~' character unless followed by a '/'.</value>
  </data>
  <data name="TemplateRoute_MismatchedParameter" xml:space="preserve">
    <value>There is an incomplete parameter in the route template. Check that each '{' character has a matching '}' character.</value>
  </data>
  <data name="TemplateRoute_RepeatedParameter" xml:space="preserve">
    <value>The route parameter name '{0}' appears more than one time in the route template.</value>
  </data>
  <data name="TemplateRoute_UnescapedBrace" xml:space="preserve">
    <value>In a route parameter, '{' and '}' must be escaped with '{{' and '}}'.</value>
  </data>
  <data name="TemplateRoute_OptionalParameterCanbBePrecededByPeriod" xml:space="preserve">
    <value>In the segment '{0}', the optional parameter '{1}' is preceded by an invalid segment '{2}'. Only a period (.) can precede an optional parameter.</value>
  </data>
  <data name="TemplateRoute_OptionalParameterHasTobeTheLast" xml:space="preserve">
    <value>An optional parameter must be at the end of the segment. In the segment '{0}', optional parameter '{1}' is followed by '{2}'.</value>
  </data>
  <data name="TemplateRoute_Exception" xml:space="preserve">
    <value>An error occurred while creating the route with name '{0}' and template '{1}'.</value>
  </data>
  <data name="AttributeRoute_TokenReplacement_EmptyTokenNotAllowed" xml:space="preserve">
    <value>An empty replacement token ('[]') is not allowed.</value>
  </data>
  <data name="AttributeRoute_TokenReplacement_ImbalancedSquareBrackets" xml:space="preserve">
    <value>Token delimiters ('[', ']') are imbalanced.</value>
  </data>
  <data name="AttributeRoute_TokenReplacement_UnclosedToken" xml:space="preserve">
    <value>A replacement token is not closed.</value>
  </data>
  <data name="AttributeRoute_TokenReplacement_UnescapedBraceInToken" xml:space="preserve">
    <value>An unescaped '[' token is not allowed inside of a replacement token. Use '[[' to escape.</value>
  </data>
  <data name="Analyzer_HeaderDictionaryIndexer_Message" xml:space="preserve">
    <value>The header '{0}' can be accessed using the {1} property</value>
  </data>
  <data name="Analyzer_HeaderDictionaryIndexer_Title" xml:space="preserve">
    <value>Suggest using IHeaderDictionary properties</value>
  </data>
  <data name="Analyzer_RequestDelegateReturnValue_Message" xml:space="preserve">
    <value>The method used to create a RequestDelegate returns Task&lt;{0}&gt;. RequestDelegate discards this value. If this isn't intended then change the return type to non-generic Task or, if the delegate is a route handler, cast it to Delegate so the return value is written to the response.</value>
  </data>
  <data name="Analyzer_RequestDelegateReturnValue_Title" xml:space="preserve">
    <value>Do not return a value from RequestDelegate</value>
  </data>
  <data name="Analyzer_RouteIssue_Message" xml:space="preserve">
    <value>Route issue: {0}</value>
  </data>
  <data name="Analyzer_RouteIssue_Title" xml:space="preserve">
    <value>Invalid route pattern</value>
  </data>
  <data name="Analyzer_UnusedParameter_Message" xml:space="preserve">
    <value>Unused route parameter '{0}'</value>
  </data>
  <data name="Analyzer_UnusedParameter_Title" xml:space="preserve">
    <value>Unused route parameter</value>
  </data>
  <data name="Analyzer_HeaderDictionaryAdd_Message" xml:space="preserve">
    <value>Use IHeaderDictionary.Append or the indexer to append or set headers. IDictionary.Add will throw an ArgumentException when attempting to add a duplicate key.</value>
  </data>
  <data name="Analyzer_HeaderDictionaryAdd_Title" xml:space="preserve">
    <value>Suggest using IHeaderDictionary.Append or the indexer</value>
  </data>
  <data name="Analyzer_MultipleFromBody_Message" xml:space="preserve">
    <value>Route handler has multiple parameters with the [FromBody] attribute or a parameter with an [AsParameters] attribute where the parameter type contains multiple members with [FromBody] attributes. Only one parameter can have a [FromBody] attribute.</value>
  </data>
  <data name="Analyzer_MultipleFromBody_Title" xml:space="preserve">
    <value>Route handler has multiple parameters with the [FromBody] attribute</value>
  </data>
  <data name="Analyzer_DoNotUseModelBindingAttributesOnRouteHandlerParameters_Title" xml:space="preserve">
    <value>Do not use model binding attributes with route handlers</value>
  </data>
  <data name="Analyzer_DoNotUseModelBindingAttributesOnRouteHandlerParameters_Message" xml:space="preserve">
    <value>{0} should not be specified for a {1} Delegate parameter</value>
  </data>
  <data name="Analyzer_DoNotReturnActionResultsFromRouteHandlers_Title" xml:space="preserve">
    <value>Do not use action results with route handlers</value>
  </data>
  <data name="Analyzer_DoNotReturnActionResultsFromRouteHandlers_Message" xml:space="preserve">
    <value>IActionResult instances should not be returned from a {0} Delegate parameter. Consider returning an equivalent result from Microsoft.AspNetCore.Http.Results.</value>
  </data>
  <data name="Analyzer_DetectMisplacedLambdaAttribute_Title" xml:space="preserve">
    <value>Do not place attribute on method called by route handler lambda</value>
  </data>
  <data name="Analyzer_DetectMisplacedLambdaAttribute_Message" xml:space="preserve">
    <value>'{0}' should be placed directly on the route handler lambda to be effective</value>
  </data>
  <data name="Analyzer_DoNotUseNonLiteralSequenceNumbers_Title" xml:space="preserve">
    <value>Do not use non-literal sequence numbers</value>
  </data>
  <data name="Analyzer_DoNotUseNonLiteralSequenceNumbers_Message" xml:space="preserve">
    <value>'{0}' should not be used as a sequence number. Instead, use an integer literal representing source code order.</value>
  </data>
  <data name="Analyzer_DetectMismatchedParameterOptionality_Title" xml:space="preserve">
    <value>Route parameter and argument optionality is mismatched</value>
  </data>
  <data name="Analyzer_DetectMismatchedParameterOptionality_Message" xml:space="preserve">
    <value>'{0}' argument should be annotated as optional or nullable to match route parameter</value>
  </data>
  <data name="Analyzer_DoNotUseConfigureWebHostWithConfigureHostBuilder_Title" xml:space="preserve">
    <value>Do not use ConfigureWebHost with WebApplicationBuilder.Host</value>
  </data>
  <data name="Analyzer_DoNotUseConfigureWebHostWithConfigureHostBuilder_Message" xml:space="preserve">
    <value>ConfigureWebHost cannot be used with WebApplicationBuilder.Host</value>
  </data>
  <data name="Analyzer_DoNotUseConfigureWithConfigureWebHostBuilder_Title" xml:space="preserve">
    <value>Do not use Configure with WebApplicationBuilder.WebHost</value>
  </data>
  <data name="Analyzer_DoNotUseConfigureWithConfigureWebHostBuilder_Message" xml:space="preserve">
    <value>Configure cannot be used with WebApplicationBuilder.WebHost</value>
  </data>
  <data name="Analyzer_DoNotUseUseStartupWithConfigureWebHostBuilder_Title" xml:space="preserve">
    <value>Do not use UseStartup with WebApplicationBuilder.WebHost</value>
  </data>
  <data name="Analyzer_DoNotUseUseStartupWithConfigureWebHostBuilder_Message" xml:space="preserve">
    <value>UseStartup cannot be used with WebApplicationBuilder.WebHost</value>
  </data>
  <data name="Analyzer_DoNotUseHostConfigureLogging_Title" xml:space="preserve">
    <value>Suggest using builder.Logging over Host.ConfigureLogging or WebHost.ConfigureLogging</value>
  </data>
  <data name="Analyzer_DoNotUseHostConfigureLogging_Message" xml:space="preserve">
    <value>Suggest using builder.Logging instead of {0}</value>
  </data>
  <data name="Analyzer_DoNotUseHostConfigureServices_Title" xml:space="preserve">
    <value>Suggest using builder.Services over Host.ConfigureServices or WebHost.ConfigureServices</value>
  </data>
  <data name="Analyzer_DoNotUseHostConfigureServices_Message" xml:space="preserve">
    <value>Suggest using builder.Services instead of {0}</value>
  </data>
  <data name="Analyzer_DisallowConfigureAppConfigureHostBuilder_Title" xml:space="preserve">
    <value>Suggest switching from using Configure methods to WebApplicationBuilder.Configuration</value>
  </data>
  <data name="Analyzer_DisallowConfigureAppConfigureHostBuilder_Message" xml:space="preserve">
    <value>Suggest using WebApplicationBuilder.Configuration instead of {0}</value>
  </data>
  <data name="Analyzer_UseTopLevelRouteRegistrationsInsteadOfUseEndpoints_Title" xml:space="preserve">
    <value>Suggest using top level route registrations</value>
  </data>
  <data name="Analyzer_UseTopLevelRouteRegistrationsInsteadOfUseEndpoints_Message" xml:space="preserve">
    <value>Suggest using top level route registrations instead of {0}</value>
  </data>
  <data name="Analyzer_RouteParameterComplexTypeIsNotParsable_Title" xml:space="preserve">
    <value>Complex types referenced by route parameters must be parsable</value>
  </data>
  <data name="Analyzer_RouteParameterComplexTypeIsNotParsable_Message" xml:space="preserve">
    <value>Parameter '{0}' of type {1} should define a bool TryParse(string, IFormatProvider, out {1}) method, or implement IParsable&lt;{1}&gt;</value>
  </data>
  <data name="Analyzer_BindAsyncSignatureMustReturnValueTaskOfT_Title" xml:space="preserve">
    <value>When implementing BindAsync(...) method, the return type must be ValueTask&lt;T&gt;</value>
  </data>
  <data name="Analyzer_BindAsyncSignatureMustReturnValueTaskOfT_Message" xml:space="preserve">
    <value>Parameter '{0}' of type {1} has a BindAsync(...) method, but the return type is not ValueTask&lt;{1}&gt;. Consider implementing IBindableFromHttpContext&lt;{1}&gt; to enforce implementation.</value>
  </data>
  <data name="Analyzer_AmbiguousRouteHandlerRoute_Title" xml:space="preserve">
    <value>Route conflict detected between route handlers</value>
  </data>
  <data name="Analyzer_AmbiguousRouteHandlerRoute_Message" xml:space="preserve">
    <value>Route '{0}' conflicts with another handler route. An HTTP request that matches multiple routes results in an ambiguous match error. Fix the conflict by changing the route's pattern, HTTP method, or route constraints.</value>
  </data>
  <data name="Analyzer_AmbiguousActionRoute_Title" xml:space="preserve">
    <value>Route conflict detected between controller actions</value>
  </data>
  <data name="Analyzer_AmbiguousActionRoute_Message" xml:space="preserve">
    <value>Route '{0}' conflicts with another action route. An HTTP request that matches multiple routes results in an ambiguous match error. Fix the conflict by changing the route's pattern, HTTP method, or route constraints.</value>
  </data>
  <data name="Analyzer_UseAddAuthorizationBuilder_Message" xml:space="preserve">
    <value>Use AddAuthorizationBuilder to register authorization services and construct policies</value>
  </data>
  <data name="Analyzer_UseAddAuthorizationBuilder_Title" xml:space="preserve">
    <value>Use AddAuthorizationBuilder</value>
  </data>
  <data name="Analyzer_OverriddenAuthorizeAttribute_Message" xml:space="preserve">
    <value>This [Authorize] attribute is overridden by an [AllowAnonymous] attribute from farther away on '{0}'. See https://aka.ms/aspnetcore-warnings/ASP0026 for more details.</value>
  </data>
  <data name="Analyzer_OverriddenAuthorizeAttribute_Title" xml:space="preserve">
    <value>[Authorize] overridden by [AllowAnonymous] from farther away</value>
  </data>
</root>