// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Microsoft.AspNetCore.SourceGenerators;

[Generator]
public class PublicProgramSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var internalGeneratedProgramClass = context.CompilationProvider.Select((compilation, cancellationToken) =>
        {
            var program = compilation.GetTypeByMetadataName("Program");
            // If the program class is already public, we don't need to generate anything.
            if (program is null || program.DeclaredAccessibility == Accessibility.Public)
            {
                return null;
            }
            if (program.DeclaringSyntaxReferences.Length > 1)
            {
                return null;
            }
            // If the `Program` class is already declared in user code, we don't need to generate anything.
            if (program.DeclaringSyntaxReferences.SingleOrDefault()?.GetSyntax(cancellationToken) is ClassDeclarationSyntax)
            {
                return null;
            }
            return program;
        });

        context.RegisterSourceOutput(internalGeneratedProgramClass, (context, symbol) =>
        {
            if (symbol is null)
            {
                return;
            }

            var output = """
// <auto-generated />
public partial class Program { }
""";
            context.AddSource("PublicTopLevelProgram.Generated.cs", output);
        });
    }
}
