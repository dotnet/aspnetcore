#nullable enable
~Microsoft.AspNetCore.Builder.WebSocketOptions.AllowedOrigins.get -> System.Collections.Generic.IList<string>
~Microsoft.AspNetCore.WebSockets.WebSocketMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext context) -> System.Threading.Tasks.Task
~static Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(this Microsoft.AspNetCore.Builder.IApplicationBuilder app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder
~static Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.WebSocketOptions options) -> Microsoft.AspNetCore.Builder.IApplicationBuilder
~static Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions.AddWebSockets(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.AspNetCore.Builder.WebSocketOptions> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions
Microsoft.AspNetCore.Builder.WebSocketOptions
Microsoft.AspNetCore.Builder.WebSocketOptions.AllowedOrigins.get -> System.Collections.Generic.IList<string!>!
Microsoft.AspNetCore.Builder.WebSocketOptions.KeepAliveInterval.get -> System.TimeSpan
Microsoft.AspNetCore.Builder.WebSocketOptions.KeepAliveInterval.set -> void
Microsoft.AspNetCore.Builder.WebSocketOptions.KeepAliveTimeout.get -> System.TimeSpan
Microsoft.AspNetCore.Builder.WebSocketOptions.KeepAliveTimeout.set -> void
Microsoft.AspNetCore.Builder.WebSocketOptions.ReceiveBufferSize.get -> int
Microsoft.AspNetCore.Builder.WebSocketOptions.ReceiveBufferSize.set -> void
Microsoft.AspNetCore.Builder.WebSocketOptions.WebSocketOptions() -> void
Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext
Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.ExtendedWebSocketAcceptContext() -> void
Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.KeepAliveInterval.get -> System.TimeSpan?
Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.KeepAliveInterval.set -> void
Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.ReceiveBufferSize.get -> int?
Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.ReceiveBufferSize.set -> void
Microsoft.AspNetCore.WebSockets.WebSocketMiddleware
Microsoft.AspNetCore.WebSockets.WebSocketMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.WebSockets.WebSocketMiddleware.WebSocketMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.WebSocketOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions
override Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.SubProtocol.get -> string?
override Microsoft.AspNetCore.WebSockets.ExtendedWebSocketAcceptContext.SubProtocol.set -> void
static Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.WebSocketMiddlewareExtensions.UseWebSockets(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app, Microsoft.AspNetCore.Builder.WebSocketOptions! options) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.WebSockets.WebSocketsDependencyInjectionExtensions.AddWebSockets(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Builder.WebSocketOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
