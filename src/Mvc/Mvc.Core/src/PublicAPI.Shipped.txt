#nullable enable
~Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) -> System.Threading.Tasks.Task
~Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder(System.Collections.Generic.IDictionary<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> propertyBinders, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
~Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.ComplexTypeModelBinder(System.Collections.Generic.IDictionary<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder> propertyBinders, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, bool allowValidatingTopLevelNodes) -> void
~Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder
~virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.BindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) -> System.Threading.Tasks.Task
~virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CanBindProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata propertyMetadata) -> bool
~virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.CreateModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext) -> object
~virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder.SetProperty(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext bindingContext, string modelName, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata propertyMetadata, Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult result) -> void
abstract Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.IsValidForRequest(Microsoft.AspNetCore.Routing.RouteContext! routeContext, Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! action) -> bool
abstract Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart.Name.get -> string!
abstract Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly! assembly) -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>!
abstract Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Count.get -> int
abstract Microsoft.AspNetCore.Mvc.Diagnostics.EventData.this[int index].get -> System.Collections.Generic.KeyValuePair<string!, object!>
abstract Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
abstract Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Threading.Tasks.Task!
abstract Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
abstract Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.Text.Encoding! selectedEncoding) -> System.Threading.Tasks.Task!
abstract Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider.ActionDescriptors.get -> Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection!
abstract Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider.GetChangeToken() -> Microsoft.Extensions.Primitives.IChangeToken!
abstract Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions<TOptions>.DefaultValues.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>!
abstract Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector.SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext! context, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection! mediaTypes) -> Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter?
abstract Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory.CreateProblemDetails(Microsoft.AspNetCore.Http.HttpContext! httpContext, int? statusCode = null, string? title = null, string? type = null, string? detail = null, string? instance = null) -> Microsoft.AspNetCore.Mvc.ProblemDetails!
abstract Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory.CreateValidationProblemDetails(Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelStateDictionary, int? statusCode = null, string? title = null, string? type = null, string? detail = null, string? instance = null) -> Microsoft.AspNetCore.Mvc.ValidationProblemDetails!
abstract Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.ContainsPrefix(string! prefix) -> bool
abstract Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
abstract Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.GetValidationVisitor(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider! validatorProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache! validatorCache, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! metadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary? validationState) -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor!
abstract Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary! values) -> System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Routing.RouteValueDictionary!>
abstract Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext! actionContext) -> string?
abstract Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext! routeContext) -> string?
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterAction" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnActionExecuted" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnActionExecuting" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnActionExecution" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterActionResult" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnAuthorization" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterControllerActionMethod" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnException" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnResourceExecuted" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnResourceExecuting" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnResourceExecution" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnResultExecuted" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnResultExecuting" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.EventName = "Microsoft.AspNetCore.Mvc.AfterOnResultExecution" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeAction" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnActionExecuted" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnActionExecuting" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnActionExecution" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeActionResult" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnAuthorization" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeControllerActionMethod" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnException" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnResourceExecuted" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnResourceExecuting" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnResourceExecution" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnResultExecuted" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnResultExecuting" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.EventName = "Microsoft.AspNetCore.Mvc.BeforeOnResultExecution" -> string!
const Microsoft.AspNetCore.Mvc.Diagnostics.EventData.EventNamespace = "Microsoft.AspNetCore.Mvc." -> string!
const Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.BufferSize = 65536 -> int
Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder
Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder.Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder!>! convention) -> void
Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder.Finally(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder!>! finalConvention) -> void
Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions
Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions
Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.AcceptedAtActionResult(string? actionName, string? controllerName, object? routeValues, object? value) -> void
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.ActionName.get -> string?
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.ActionName.set -> void
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.ControllerName.get -> string?
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.ControllerName.set -> void
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.AcceptedAtRouteResult(object? routeValues, object? value) -> void
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.AcceptedAtRouteResult(string? routeName, object? routeValues, object? value) -> void
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.RouteName.get -> string?
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.RouteName.set -> void
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.AcceptedResult
Microsoft.AspNetCore.Mvc.AcceptedResult.AcceptedResult() -> void
Microsoft.AspNetCore.Mvc.AcceptedResult.AcceptedResult(string? location, object? value) -> void
Microsoft.AspNetCore.Mvc.AcceptedResult.AcceptedResult(System.Uri! locationUri, object? value) -> void
Microsoft.AspNetCore.Mvc.AcceptedResult.Location.get -> string?
Microsoft.AspNetCore.Mvc.AcceptedResult.Location.set -> void
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.AcceptVerbsAttribute(params string![]! methods) -> void
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.AcceptVerbsAttribute(string! method) -> void
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.HttpMethods.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.Route.get -> string?
Microsoft.AspNetCore.Mvc.AcceptVerbsAttribute.Route.set -> void
Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute
Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext! context) -> bool
Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.ActionMethodSelectorAttribute() -> void
Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.ActionConstraints.ActionMethodSelectorAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint
Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.HttpMethodActionConstraint(System.Collections.Generic.IEnumerable<string!>! httpMethods) -> void
Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.HttpMethods.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.Order.get -> int
Microsoft.AspNetCore.Mvc.ActionContextAttribute
Microsoft.AspNetCore.Mvc.ActionContextAttribute.ActionContextAttribute() -> void
Microsoft.AspNetCore.Mvc.ActionNameAttribute
Microsoft.AspNetCore.Mvc.ActionNameAttribute.ActionNameAttribute(string! name) -> void
Microsoft.AspNetCore.Mvc.ActionNameAttribute.Name.get -> string!
Microsoft.AspNetCore.Mvc.ActionResult
Microsoft.AspNetCore.Mvc.ActionResult.ActionResult() -> void
Microsoft.AspNetCore.Mvc.ActionResult<TValue>
Microsoft.AspNetCore.Mvc.ActionResult<TValue>.ActionResult(Microsoft.AspNetCore.Mvc.ActionResult! result) -> void
Microsoft.AspNetCore.Mvc.ActionResult<TValue>.ActionResult(TValue value) -> void
Microsoft.AspNetCore.Mvc.ActionResult<TValue>.Result.get -> Microsoft.AspNetCore.Mvc.ActionResult?
Microsoft.AspNetCore.Mvc.ActionResult<TValue>.Value.get -> TValue?
Microsoft.AspNetCore.Mvc.AntiforgeryValidationFailedResult
Microsoft.AspNetCore.Mvc.AntiforgeryValidationFailedResult.AntiforgeryValidationFailedResult() -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.ApiBehaviorOptions() -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.ClientErrorMapping.get -> System.Collections.Generic.IDictionary<int, Microsoft.AspNetCore.Mvc.ClientErrorData!>!
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.DisableImplicitFromServicesParameters.get -> bool
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.DisableImplicitFromServicesParameters.set -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.InvalidModelStateResponseFactory.get -> System.Func<Microsoft.AspNetCore.Mvc.ActionContext!, Microsoft.AspNetCore.Mvc.IActionResult!>!
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.InvalidModelStateResponseFactory.set -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressConsumesConstraintForFormFileParameters.get -> bool
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressConsumesConstraintForFormFileParameters.set -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressInferBindingSourcesForParameters.get -> bool
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressInferBindingSourcesForParameters.set -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressMapClientErrors.get -> bool
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressMapClientErrors.set -> void
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressModelStateInvalidFilter.get -> bool
Microsoft.AspNetCore.Mvc.ApiBehaviorOptions.SuppressModelStateInvalidFilter.set -> void
Microsoft.AspNetCore.Mvc.ApiControllerAttribute
Microsoft.AspNetCore.Mvc.ApiControllerAttribute.ApiControllerAttribute() -> void
Microsoft.AspNetCore.Mvc.ApiConventionMethodAttribute
Microsoft.AspNetCore.Mvc.ApiConventionMethodAttribute.ApiConventionMethodAttribute(System.Type! conventionType, string! methodName) -> void
Microsoft.AspNetCore.Mvc.ApiConventionMethodAttribute.ConventionType.get -> System.Type!
Microsoft.AspNetCore.Mvc.ApiConventionTypeAttribute
Microsoft.AspNetCore.Mvc.ApiConventionTypeAttribute.ApiConventionTypeAttribute(System.Type! conventionType) -> void
Microsoft.AspNetCore.Mvc.ApiConventionTypeAttribute.ConventionType.get -> System.Type!
Microsoft.AspNetCore.Mvc.ApiDescriptionActionData
Microsoft.AspNetCore.Mvc.ApiDescriptionActionData.ApiDescriptionActionData() -> void
Microsoft.AspNetCore.Mvc.ApiDescriptionActionData.GroupName.get -> string?
Microsoft.AspNetCore.Mvc.ApiDescriptionActionData.GroupName.set -> void
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchAttribute
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchAttribute.ApiConventionNameMatchAttribute(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior matchBehavior) -> void
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchAttribute.MatchBehavior.get -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior.Any = 0 -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior.Exact = 1 -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior.Prefix = 2 -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior.Suffix = 3 -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionNameMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionResult
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionResult.ApiConventionResult(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider!>! responseMetadataProviders) -> void
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionResult.ResponseMetadataProviders.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider!>!
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchAttribute
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchAttribute.ApiConventionTypeMatchAttribute(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior matchBehavior) -> void
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchAttribute.MatchBehavior.get -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior.Any = 0 -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior.AssignableFrom = 1 -> Microsoft.AspNetCore.Mvc.ApiExplorer.ApiConventionTypeMatchBehavior
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDefaultResponseMetadataProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupNameProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionGroupNameProvider.GroupName.get -> string?
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionVisibilityProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiDescriptionVisibilityProvider.IgnoreApi.get -> bool
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestFormatMetadataProvider.GetSupportedContentTypes(string! contentType, System.Type! objectType) -> System.Collections.Generic.IReadOnlyList<string!>?
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestMetadataProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiRequestMetadataProvider.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection! contentTypes) -> void
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection! contentTypes) -> void
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.StatusCode.get -> int
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseMetadataProvider.Type.get -> System.Type?
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider
Microsoft.AspNetCore.Mvc.ApiExplorer.IApiResponseTypeMetadataProvider.GetSupportedContentTypes(string! contentType, System.Type! objectType) -> System.Collections.Generic.IReadOnlyList<string!>?
Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute
Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.ApiExplorerSettingsAttribute() -> void
Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.GroupName.get -> string?
Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.GroupName.set -> void
Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.IgnoreApi.get -> bool
Microsoft.AspNetCore.Mvc.ApiExplorerSettingsAttribute.IgnoreApi.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ActionMethod.get -> System.Reflection.MethodInfo!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ActionModel(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ActionModel(System.Reflection.MethodInfo! actionMethod, System.Collections.Generic.IReadOnlyList<object!>! attributes) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ActionName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ActionName.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ApiExplorer.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.ApiExplorer.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Controller.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Controller.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.DisplayName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Filters.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Parameters.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.RouteParameterTransformer.get -> Microsoft.AspNetCore.Routing.IOutboundParameterTransformer?
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.RouteParameterTransformer.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.RouteValues.get -> System.Collections.Generic.IDictionary<string!, string?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel.Selectors.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.ApiConventionApplicationModelConvention(Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute! defaultErrorResponseType) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.DefaultErrorResponseType.get -> Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.ApiExplorerModel() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.ApiExplorerModel(Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.GroupName.get -> string?
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.GroupName.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.IsVisible.get -> bool?
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel.IsVisible.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention.ApiVisibilityConvention() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.ApiExplorer.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.ApiExplorer.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.ApplicationModel() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.Controllers.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.Filters.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext.ApplicationModelProviderContext(System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo!>! controllerTypes) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext.ControllerTypes.get -> System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext.Result.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Attribute.get -> Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider?
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.AttributeRouteModel() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.AttributeRouteModel(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.AttributeRouteModel(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider! templateProvider) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.IsAbsoluteTemplate.get -> bool
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Name.get -> string?
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Name.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Order.get -> int?
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Order.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.SuppressLinkGeneration.get -> bool
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.SuppressLinkGeneration.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.SuppressPathMatching.get -> bool
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.SuppressPathMatching.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Template.get -> string?
Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.Template.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention.ClientErrorResultFilterConvention() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention.ConsumesConstraintForFormFileParameterConvention() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Actions.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ApiExplorer.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ApiExplorer.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Application.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel?
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Application.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ControllerModel(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ControllerModel(System.Reflection.TypeInfo! controllerType, System.Collections.Generic.IReadOnlyList<object!>! attributes) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ControllerName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ControllerName.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ControllerProperties.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.ControllerType.get -> System.Reflection.TypeInfo!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.DisplayName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Filters.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.RouteValues.get -> System.Collections.Generic.IDictionary<string!, string?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel.Selectors.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel
Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel.ApiExplorer.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ApiExplorerModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.IApiExplorerModel.ApiExplorer.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel! application) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider
Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider.OnProvidersExecuted(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider.OnProvidersExecuting(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModelProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelProvider.Order.get -> int
Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel
Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel.BindingInfo.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo?
Microsoft.AspNetCore.Mvc.ApplicationModels.IBindingModel.BindingInfo.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel
Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.MemberInfo.get -> System.Reflection.MemberInfo!
Microsoft.AspNetCore.Mvc.ApplicationModels.ICommonModel.Name.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel! controller) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IFilterModel
Microsoft.AspNetCore.Mvc.ApplicationModels.IFilterModel.Filters.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention.InferParameterBindingInfoConvention(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! modelMetadataProvider) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention.InferParameterBindingInfoConvention(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! modelMetadataProvider, Microsoft.Extensions.DependencyInjection.IServiceProviderIsService! serviceProviderIsService) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention.InvalidModelStateFilterConvention() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase! parameter) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel! parameter) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel
Microsoft.AspNetCore.Mvc.ApplicationModels.IPropertyModel.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.Action.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.Action.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.DisplayName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.ParameterInfo.get -> System.Reflection.ParameterInfo!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.ParameterModel(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.ParameterModel(System.Reflection.ParameterInfo! parameterInfo, System.Collections.Generic.IReadOnlyList<object!>! attributes) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.ParameterName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.ParameterName.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModel.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.BindingInfo.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo?
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.BindingInfo.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.Name.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.Name.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.ParameterModelBase(Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.ParameterModelBase(System.Type! parameterType, System.Collections.Generic.IReadOnlyList<object!>! attributes) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.ParameterType.get -> System.Type!
Microsoft.AspNetCore.Mvc.ApplicationModels.ParameterModelBase.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.Controller.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel!
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.Controller.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.Properties.get -> System.Collections.Generic.IDictionary<object!, object?>!
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.PropertyInfo.get -> System.Reflection.PropertyInfo!
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.PropertyModel(Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.PropertyModel(System.Reflection.PropertyInfo! propertyInfo, System.Collections.Generic.IReadOnlyList<object!>! attributes) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.PropertyName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationModels.PropertyModel.PropertyName.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention
Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention.RouteTokenTransformerConvention(Microsoft.AspNetCore.Routing.IOutboundParameterTransformer! parameterTransformer) -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.ActionConstraints.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ActionConstraints.IActionConstraintMetadata!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.AttributeRouteModel.get -> Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel?
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.AttributeRouteModel.set -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.EndpointMetadata.get -> System.Collections.Generic.IList<object!>!
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.SelectorModel() -> void
Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel.SelectorModel(Microsoft.AspNetCore.Mvc.ApplicationModels.SelectorModel! other) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart.ApplicationPart() -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute.ApplicationPartAttribute(string! assemblyName) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute.AssemblyName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory.ApplicationPartFactory() -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.ApplicationPartManager() -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.ApplicationParts.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>!
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.FeatureProviders.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider!>!
Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature<TFeature>(TFeature feature) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart
Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.Assembly.get -> System.Reflection.Assembly!
Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.AssemblyPart(System.Reflection.Assembly! assembly) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.Types.get -> System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo!>!
Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory
Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.DefaultApplicationPartFactory() -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider
Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider<TFeature>
Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationFeatureProvider<TFeature>.PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>! parts, TFeature feature) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationPartTypeProvider
Microsoft.AspNetCore.Mvc.ApplicationParts.IApplicationPartTypeProvider.Types.get -> System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo!>!
Microsoft.AspNetCore.Mvc.ApplicationParts.ICompilationReferencesProvider
Microsoft.AspNetCore.Mvc.ApplicationParts.ICompilationReferencesProvider.GetReferencePaths() -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory
Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory.NullApplicationPartFactory() -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute
Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute.GetFactoryType() -> System.Type!
Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute.ProvideApplicationPartFactoryAttribute(string! factoryTypeName) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.ProvideApplicationPartFactoryAttribute.ProvideApplicationPartFactoryAttribute(System.Type! factoryType) -> void
Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute
Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.AssemblyFileName.get -> string!
Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.RelatedAssemblyAttribute(string! assemblyFileName) -> void
Microsoft.AspNetCore.Mvc.AreaAttribute
Microsoft.AspNetCore.Mvc.AreaAttribute.AreaAttribute(string! areaName) -> void
Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter
Microsoft.AspNetCore.Mvc.Authorization.AllowAnonymousFilter.AllowAnonymousFilter() -> void
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.AuthorizeData.get -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData!>?
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.AuthorizeFilter() -> void
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.AuthorizeFilter(Microsoft.AspNetCore.Authorization.AuthorizationPolicy! policy) -> void
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.AuthorizeFilter(Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider! policyProvider, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData!>! authorizeData) -> void
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.AuthorizeFilter(string! policy) -> void
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.AuthorizeFilter(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Authorization.IAuthorizeData!>! authorizeData) -> void
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.Policy.get -> Microsoft.AspNetCore.Authorization.AuthorizationPolicy?
Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.PolicyProvider.get -> Microsoft.AspNetCore.Authorization.IAuthorizationPolicyProvider?
Microsoft.AspNetCore.Mvc.BadRequestObjectResult
Microsoft.AspNetCore.Mvc.BadRequestObjectResult.BadRequestObjectResult(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> void
Microsoft.AspNetCore.Mvc.BadRequestObjectResult.BadRequestObjectResult(object? error) -> void
Microsoft.AspNetCore.Mvc.BadRequestResult
Microsoft.AspNetCore.Mvc.BadRequestResult.BadRequestResult() -> void
Microsoft.AspNetCore.Mvc.BindAttribute
Microsoft.AspNetCore.Mvc.BindAttribute.BindAttribute(params string![]! include) -> void
Microsoft.AspNetCore.Mvc.BindAttribute.Include.get -> string![]!
Microsoft.AspNetCore.Mvc.BindAttribute.Prefix.get -> string?
Microsoft.AspNetCore.Mvc.BindAttribute.Prefix.set -> void
Microsoft.AspNetCore.Mvc.BindAttribute.PropertyFilter.get -> System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!, bool>!
Microsoft.AspNetCore.Mvc.BindPropertiesAttribute
Microsoft.AspNetCore.Mvc.BindPropertiesAttribute.BindPropertiesAttribute() -> void
Microsoft.AspNetCore.Mvc.BindPropertiesAttribute.SupportsGet.get -> bool
Microsoft.AspNetCore.Mvc.BindPropertiesAttribute.SupportsGet.set -> void
Microsoft.AspNetCore.Mvc.BindPropertyAttribute
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.BinderType.get -> System.Type?
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.BinderType.set -> void
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.BindPropertyAttribute() -> void
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.SupportsGet.get -> bool
Microsoft.AspNetCore.Mvc.BindPropertyAttribute.SupportsGet.set -> void
Microsoft.AspNetCore.Mvc.CacheProfile
Microsoft.AspNetCore.Mvc.CacheProfile.CacheProfile() -> void
Microsoft.AspNetCore.Mvc.CacheProfile.Duration.get -> int?
Microsoft.AspNetCore.Mvc.CacheProfile.Duration.set -> void
Microsoft.AspNetCore.Mvc.CacheProfile.Location.get -> Microsoft.AspNetCore.Mvc.ResponseCacheLocation?
Microsoft.AspNetCore.Mvc.CacheProfile.Location.set -> void
Microsoft.AspNetCore.Mvc.CacheProfile.NoStore.get -> bool?
Microsoft.AspNetCore.Mvc.CacheProfile.NoStore.set -> void
Microsoft.AspNetCore.Mvc.CacheProfile.VaryByHeader.get -> string?
Microsoft.AspNetCore.Mvc.CacheProfile.VaryByHeader.set -> void
Microsoft.AspNetCore.Mvc.CacheProfile.VaryByQueryKeys.get -> string![]?
Microsoft.AspNetCore.Mvc.CacheProfile.VaryByQueryKeys.set -> void
Microsoft.AspNetCore.Mvc.ChallengeResult
Microsoft.AspNetCore.Mvc.ChallengeResult.AuthenticationSchemes.get -> System.Collections.Generic.IList<string!>!
Microsoft.AspNetCore.Mvc.ChallengeResult.AuthenticationSchemes.set -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.ChallengeResult() -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.ChallengeResult(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.ChallengeResult(string! authenticationScheme) -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.ChallengeResult(string! authenticationScheme, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.ChallengeResult(System.Collections.Generic.IList<string!>! authenticationSchemes) -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.ChallengeResult(System.Collections.Generic.IList<string!>! authenticationSchemes, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.ChallengeResult.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
Microsoft.AspNetCore.Mvc.ChallengeResult.Properties.set -> void
Microsoft.AspNetCore.Mvc.ClientErrorData
Microsoft.AspNetCore.Mvc.ClientErrorData.ClientErrorData() -> void
Microsoft.AspNetCore.Mvc.ClientErrorData.Link.get -> string?
Microsoft.AspNetCore.Mvc.ClientErrorData.Link.set -> void
Microsoft.AspNetCore.Mvc.ClientErrorData.Title.get -> string?
Microsoft.AspNetCore.Mvc.ClientErrorData.Title.set -> void
Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.CompatibilityVersion.Latest = 2147483647 -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.CompatibilityVersion.Version_2_0 = 0 -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.CompatibilityVersion.Version_2_1 = 1 -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.CompatibilityVersion.Version_2_2 = 2 -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.CompatibilityVersion.Version_3_0 = 3 -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.ConflictObjectResult
Microsoft.AspNetCore.Mvc.ConflictObjectResult.ConflictObjectResult(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> void
Microsoft.AspNetCore.Mvc.ConflictObjectResult.ConflictObjectResult(object? error) -> void
Microsoft.AspNetCore.Mvc.ConflictResult
Microsoft.AspNetCore.Mvc.ConflictResult.ConflictResult() -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute
Microsoft.AspNetCore.Mvc.ConsumesAttribute.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext! context) -> bool
Microsoft.AspNetCore.Mvc.ConsumesAttribute.ConsumesAttribute(string! contentType, params string![]! otherContentTypes) -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute.ConsumesAttribute(System.Type! requestType, string! contentType, params string![]! otherContentTypes) -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute.ContentTypes.get -> Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection!
Microsoft.AspNetCore.Mvc.ConsumesAttribute.ContentTypes.set -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute.IsOptional.get -> bool
Microsoft.AspNetCore.Mvc.ConsumesAttribute.IsOptional.set -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext! context) -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext! context) -> void
Microsoft.AspNetCore.Mvc.ConsumesAttribute.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection! contentTypes) -> void
Microsoft.AspNetCore.Mvc.ContentResult
Microsoft.AspNetCore.Mvc.ContentResult.Content.get -> string?
Microsoft.AspNetCore.Mvc.ContentResult.Content.set -> void
Microsoft.AspNetCore.Mvc.ContentResult.ContentResult() -> void
Microsoft.AspNetCore.Mvc.ContentResult.ContentType.get -> string?
Microsoft.AspNetCore.Mvc.ContentResult.ContentType.set -> void
Microsoft.AspNetCore.Mvc.ContentResult.StatusCode.get -> int?
Microsoft.AspNetCore.Mvc.ContentResult.StatusCode.set -> void
Microsoft.AspNetCore.Mvc.ControllerAttribute
Microsoft.AspNetCore.Mvc.ControllerAttribute.ControllerAttribute() -> void
Microsoft.AspNetCore.Mvc.ControllerBase
Microsoft.AspNetCore.Mvc.ControllerBase.ControllerBase() -> void
Microsoft.AspNetCore.Mvc.ControllerBase.ControllerContext.get -> Microsoft.AspNetCore.Mvc.ControllerContext!
Microsoft.AspNetCore.Mvc.ControllerBase.ControllerContext.set -> void
Microsoft.AspNetCore.Mvc.ControllerBase.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.Mvc.ControllerBase.MetadataProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider!
Microsoft.AspNetCore.Mvc.ControllerBase.MetadataProvider.set -> void
Microsoft.AspNetCore.Mvc.ControllerBase.ModelBinderFactory.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory!
Microsoft.AspNetCore.Mvc.ControllerBase.ModelBinderFactory.set -> void
Microsoft.AspNetCore.Mvc.ControllerBase.ModelState.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary!
Microsoft.AspNetCore.Mvc.ControllerBase.ObjectValidator.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator!
Microsoft.AspNetCore.Mvc.ControllerBase.ObjectValidator.set -> void
Microsoft.AspNetCore.Mvc.ControllerBase.ProblemDetailsFactory.get -> Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory!
Microsoft.AspNetCore.Mvc.ControllerBase.ProblemDetailsFactory.set -> void
Microsoft.AspNetCore.Mvc.ControllerBase.Request.get -> Microsoft.AspNetCore.Http.HttpRequest!
Microsoft.AspNetCore.Mvc.ControllerBase.Response.get -> Microsoft.AspNetCore.Http.HttpResponse!
Microsoft.AspNetCore.Mvc.ControllerBase.RouteData.get -> Microsoft.AspNetCore.Routing.RouteData!
Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(object! model, System.Type! modelType, string! prefix, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!, bool>! propertyFilter) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model, string! prefix, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider, params System.Linq.Expressions.Expression<System.Func<TModel!, object?>!>![]! includeExpressions) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model, string! prefix, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!, bool>! propertyFilter) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model, string! prefix, params System.Linq.Expressions.Expression<System.Func<TModel!, object?>!>![]! includeExpressions) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model, string! prefix, System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!, bool>! propertyFilter) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Mvc.ControllerBase.Url.get -> Microsoft.AspNetCore.Mvc.IUrlHelper!
Microsoft.AspNetCore.Mvc.ControllerBase.Url.set -> void
Microsoft.AspNetCore.Mvc.ControllerBase.User.get -> System.Security.Claims.ClaimsPrincipal!
Microsoft.AspNetCore.Mvc.ControllerContext
Microsoft.AspNetCore.Mvc.ControllerContext.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor!
Microsoft.AspNetCore.Mvc.ControllerContext.ActionDescriptor.set -> void
Microsoft.AspNetCore.Mvc.ControllerContext.ControllerContext() -> void
Microsoft.AspNetCore.Mvc.ControllerContext.ControllerContext(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
Microsoft.AspNetCore.Mvc.ControllerContextAttribute
Microsoft.AspNetCore.Mvc.ControllerContextAttribute.ControllerContextAttribute() -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ControllerActionDescriptor() -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ControllerName.get -> string!
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ControllerName.set -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ControllerTypeInfo.get -> System.Reflection.TypeInfo!
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ControllerTypeInfo.set -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.MethodInfo.get -> System.Reflection.MethodInfo!
Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.MethodInfo.set -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider
Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.ControllerActivatorProvider(Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator! controllerActivator) -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Func<Microsoft.AspNetCore.Mvc.ControllerContext!, object!>!
Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Func<Microsoft.AspNetCore.Mvc.ControllerContext!, object!, System.Threading.Tasks.ValueTask>?
Microsoft.AspNetCore.Mvc.Controllers.ControllerActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Action<Microsoft.AspNetCore.Mvc.ControllerContext!, object!>?
Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor
Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor.ControllerBoundPropertyDescriptor() -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor.PropertyInfo.get -> System.Reflection.PropertyInfo!
Microsoft.AspNetCore.Mvc.Controllers.ControllerBoundPropertyDescriptor.PropertyInfo.set -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature
Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature.ControllerFeature() -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature.Controllers.get -> System.Collections.Generic.IList<System.Reflection.TypeInfo!>!
Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider
Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.ControllerFeatureProvider() -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>! parts, Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature! feature) -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor
Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor.ControllerParameterDescriptor() -> void
Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor.ParameterInfo.get -> System.Reflection.ParameterInfo!
Microsoft.AspNetCore.Mvc.Controllers.ControllerParameterDescriptor.ParameterInfo.set -> void
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator.Create(Microsoft.AspNetCore.Mvc.ControllerContext! context) -> object!
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator.Release(Microsoft.AspNetCore.Mvc.ControllerContext! context, object! controller) -> void
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivator.ReleaseAsync(Microsoft.AspNetCore.Mvc.ControllerContext! context, object! controller) -> System.Threading.Tasks.ValueTask
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider.CreateActivator(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Func<Microsoft.AspNetCore.Mvc.ControllerContext!, object!>!
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider.CreateAsyncReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Func<Microsoft.AspNetCore.Mvc.ControllerContext!, object!, System.Threading.Tasks.ValueTask>?
Microsoft.AspNetCore.Mvc.Controllers.IControllerActivatorProvider.CreateReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Action<Microsoft.AspNetCore.Mvc.ControllerContext!, object!>?
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory.CreateController(Microsoft.AspNetCore.Mvc.ControllerContext! context) -> object!
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory.ReleaseController(Microsoft.AspNetCore.Mvc.ControllerContext! context, object! controller) -> void
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactory.ReleaseControllerAsync(Microsoft.AspNetCore.Mvc.ControllerContext! context, object! controller) -> System.Threading.Tasks.ValueTask
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider.CreateAsyncControllerReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Func<Microsoft.AspNetCore.Mvc.ControllerContext!, object!, System.Threading.Tasks.ValueTask>?
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider.CreateControllerFactory(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Func<Microsoft.AspNetCore.Mvc.ControllerContext!, object!>!
Microsoft.AspNetCore.Mvc.Controllers.IControllerFactoryProvider.CreateControllerReleaser(Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor! descriptor) -> System.Action<Microsoft.AspNetCore.Mvc.ControllerContext!, object!>?
Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator
Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator.Create(Microsoft.AspNetCore.Mvc.ControllerContext! actionContext) -> object!
Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator.ServiceBasedControllerActivator() -> void
Microsoft.AspNetCore.Mvc.Core.Infrastructure.IAntiforgeryValidationFailedResult
Microsoft.AspNetCore.Mvc.CreatedAtActionResult
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.ActionName.get -> string?
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.ActionName.set -> void
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.ControllerName.get -> string?
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.ControllerName.set -> void
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.CreatedAtActionResult(string? actionName, string? controllerName, object? routeValues, object? value) -> void
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.CreatedAtActionResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.CreatedAtRouteResult(object? routeValues, object? value) -> void
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.CreatedAtRouteResult(string? routeName, object? routeValues, object? value) -> void
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.RouteName.get -> string?
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.RouteName.set -> void
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.CreatedResult
Microsoft.AspNetCore.Mvc.CreatedResult.CreatedResult() -> void
Microsoft.AspNetCore.Mvc.CreatedResult.CreatedResult(string? location, object? value) -> void
Microsoft.AspNetCore.Mvc.CreatedResult.CreatedResult(System.Uri? location, object? value) -> void
Microsoft.AspNetCore.Mvc.CreatedResult.Location.get -> string?
Microsoft.AspNetCore.Mvc.CreatedResult.Location.set -> void
Microsoft.AspNetCore.Mvc.DefaultApiConventions
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.AfterActionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Routing.RouteData! routeData) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionEventData.RouteData.get -> Microsoft.AspNetCore.Routing.RouteData!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.ActionExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.AfterActionFilterOnActionExecutedEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext! actionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutedEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.ActionExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.AfterActionFilterOnActionExecutingEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! actionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutingEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.ActionExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.AfterActionFilterOnActionExecutionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext! actionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionFilterOnActionExecutionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.AfterActionResultEventData(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.IActionResult! result) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterActionResultEventData.Result.get -> Microsoft.AspNetCore.Mvc.IActionResult!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.AfterAuthorizationFilterOnAuthorizationEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext! authorizationContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.AuthorizationContext.get -> Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterAuthorizationFilterOnAuthorizationEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.AfterControllerActionMethodEventData(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, System.Collections.Generic.IReadOnlyDictionary<string!, object!>! arguments, object! controller, Microsoft.AspNetCore.Mvc.IActionResult! result) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.Arguments.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.Controller.get -> object!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterControllerActionMethodEventData.Result.get -> Microsoft.AspNetCore.Mvc.IActionResult!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.AfterExceptionFilterOnExceptionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext! exceptionContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.ExceptionContext.get -> Microsoft.AspNetCore.Mvc.Filters.ExceptionContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterExceptionFilterOnExceptionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.AfterResourceFilterOnResourceExecutedEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext! resourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutedEventData.ResourceExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.AfterResourceFilterOnResourceExecutingEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext! resourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutingEventData.ResourceExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.AfterResourceFilterOnResourceExecutionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext! resourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResourceFilterOnResourceExecutionEventData.ResourceExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.AfterResultFilterOnResultExecutedEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! resultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutedEventData.ResultExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.AfterResultFilterOnResultExecutingEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! resultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutingEventData.ResultExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.AfterResultFilterOnResultExecutionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! resultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.AfterResultFilterOnResultExecutionEventData.ResultExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.BeforeActionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Routing.RouteData! routeData) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionEventData.RouteData.get -> Microsoft.AspNetCore.Routing.RouteData!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.ActionExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.BeforeActionFilterOnActionExecutedEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext! actionExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutedEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.ActionExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.BeforeActionFilterOnActionExecutingEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! actionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutingEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.ActionExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.BeforeActionFilterOnActionExecutionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! actionExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionFilterOnActionExecutionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.BeforeActionResultEventData(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.IActionResult! result) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeActionResultEventData.Result.get -> Microsoft.AspNetCore.Mvc.IActionResult!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.AuthorizationContext.get -> Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.BeforeAuthorizationFilterOnAuthorizationEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext! authorizationContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeAuthorizationFilterOnAuthorizationEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.ActionArguments.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object!>!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.BeforeControllerActionMethodEventData(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, System.Collections.Generic.IReadOnlyDictionary<string!, object!>! actionArguments, object! controller) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeControllerActionMethodEventData.Controller.get -> object!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.BeforeExceptionFilterOnException(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ExceptionContext! exceptionContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.ExceptionContext.get -> Microsoft.AspNetCore.Mvc.Filters.ExceptionContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeExceptionFilterOnException.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.BeforeResourceFilterOnResourceExecutedEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext! resourceExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutedEventData.ResourceExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.BeforeResourceFilterOnResourceExecutingEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext! resourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutingEventData.ResourceExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.BeforeResourceFilterOnResourceExecutionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext! resourceExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResourceFilterOnResourceExecutionEventData.ResourceExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.BeforeResultFilterOnResultExecutedEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! resultExecutedContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutedEventData.ResultExecutedContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.BeforeResultFilterOnResultExecutingEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! resultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutingEventData.ResultExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.ActionDescriptor.get -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.BeforeResultFilterOnResultExecutionEventData(Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor! actionDescriptor, Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! resultExecutingContext, Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata! filter) -> void
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.Filter.get -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Diagnostics.BeforeResultFilterOnResultExecutionEventData.ResultExecutingContext.get -> Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext!
Microsoft.AspNetCore.Mvc.Diagnostics.EventData
Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator
Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.Current.get -> System.Collections.Generic.KeyValuePair<string!, object!>
Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.Dispose() -> void
Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.Enumerator() -> void
Microsoft.AspNetCore.Mvc.Diagnostics.EventData.Enumerator.MoveNext() -> bool
Microsoft.AspNetCore.Mvc.Diagnostics.EventData.EventData() -> void
Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute
Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.DisableRequestSizeLimitAttribute() -> void
Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.DisableRequestSizeLimitAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.EmptyResult
Microsoft.AspNetCore.Mvc.EmptyResult.EmptyResult() -> void
Microsoft.AspNetCore.Mvc.FileContentResult
Microsoft.AspNetCore.Mvc.FileContentResult.FileContentResult(byte[]! fileContents, Microsoft.Net.Http.Headers.MediaTypeHeaderValue! contentType) -> void
Microsoft.AspNetCore.Mvc.FileContentResult.FileContentResult(byte[]! fileContents, string! contentType) -> void
Microsoft.AspNetCore.Mvc.FileContentResult.FileContents.get -> byte[]!
Microsoft.AspNetCore.Mvc.FileContentResult.FileContents.set -> void
Microsoft.AspNetCore.Mvc.FileResult
Microsoft.AspNetCore.Mvc.FileResult.ContentType.get -> string!
Microsoft.AspNetCore.Mvc.FileResult.EnableRangeProcessing.get -> bool
Microsoft.AspNetCore.Mvc.FileResult.EnableRangeProcessing.set -> void
Microsoft.AspNetCore.Mvc.FileResult.EntityTag.get -> Microsoft.Net.Http.Headers.EntityTagHeaderValue?
Microsoft.AspNetCore.Mvc.FileResult.EntityTag.set -> void
Microsoft.AspNetCore.Mvc.FileResult.FileDownloadName.get -> string!
Microsoft.AspNetCore.Mvc.FileResult.FileDownloadName.set -> void
Microsoft.AspNetCore.Mvc.FileResult.FileResult(string! contentType) -> void
Microsoft.AspNetCore.Mvc.FileResult.LastModified.get -> System.DateTimeOffset?
Microsoft.AspNetCore.Mvc.FileResult.LastModified.set -> void
Microsoft.AspNetCore.Mvc.FileStreamResult
Microsoft.AspNetCore.Mvc.FileStreamResult.FileStream.get -> System.IO.Stream!
Microsoft.AspNetCore.Mvc.FileStreamResult.FileStream.set -> void
Microsoft.AspNetCore.Mvc.FileStreamResult.FileStreamResult(System.IO.Stream! fileStream, Microsoft.Net.Http.Headers.MediaTypeHeaderValue! contentType) -> void
Microsoft.AspNetCore.Mvc.FileStreamResult.FileStreamResult(System.IO.Stream! fileStream, string! contentType) -> void
Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute
Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.ActionFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute
Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.ExceptionFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.Filters.FilterCollection
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type! filterType) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add(System.Type! filterType, int order) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add<TFilterType>() -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.Add<TFilterType>(int order) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type! filterType) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService(System.Type! filterType, int order) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService<TFilterType>() -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.AddService<TFilterType>(int order) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.Filters.FilterCollection.FilterCollection() -> void
Microsoft.AspNetCore.Mvc.Filters.FilterScope
Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute
Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.ResultFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.ForbidResult
Microsoft.AspNetCore.Mvc.ForbidResult.AuthenticationSchemes.get -> System.Collections.Generic.IList<string!>!
Microsoft.AspNetCore.Mvc.ForbidResult.AuthenticationSchemes.set -> void
Microsoft.AspNetCore.Mvc.ForbidResult.ForbidResult() -> void
Microsoft.AspNetCore.Mvc.ForbidResult.ForbidResult(Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.ForbidResult.ForbidResult(string! authenticationScheme) -> void
Microsoft.AspNetCore.Mvc.ForbidResult.ForbidResult(string! authenticationScheme, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.ForbidResult.ForbidResult(System.Collections.Generic.IList<string!>! authenticationSchemes) -> void
Microsoft.AspNetCore.Mvc.ForbidResult.ForbidResult(System.Collections.Generic.IList<string!>! authenticationSchemes, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.ForbidResult.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
Microsoft.AspNetCore.Mvc.ForbidResult.Properties.set -> void
Microsoft.AspNetCore.Mvc.FormatFilterAttribute
Microsoft.AspNetCore.Mvc.FormatFilterAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.FormatFilterAttribute.FormatFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.FormatFilterAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.FormatFilter
Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.FormatFilter(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext! context) -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext! context) -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! context) -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! context) -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings
Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.ClearMediaTypeMappingForFormat(string! format) -> bool
Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.FormatterMappings() -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.GetMediaTypeMappingForFormat(string! format) -> string?
Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.SetMediaTypeMappingForFormat(string! format, Microsoft.Net.Http.Headers.MediaTypeHeaderValue! contentType) -> void
Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings.SetMediaTypeMappingForFormat(string! format, string! contentType) -> void
Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext! context) -> bool
Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.HttpNoContentOutputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.TreatNullValueAsNoContent.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.TreatNullValueAsNoContent.set -> void
Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.Formatters.InputFormatter
Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.InputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.SupportedMediaTypes.get -> Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection!
Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException (forwarded, contained in Microsoft.AspNetCore.Mvc.Abstractions)
Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException.InputFormatterException() -> void (forwarded, contained in Microsoft.AspNetCore.Mvc.Abstractions)
Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException.InputFormatterException(string! message) -> void (forwarded, contained in Microsoft.AspNetCore.Mvc.Abstractions)
Microsoft.AspNetCore.Mvc.Formatters.InputFormatterException.InputFormatterException(string! message, System.Exception! innerException) -> void (forwarded, contained in Microsoft.AspNetCore.Mvc.Abstractions)
Microsoft.AspNetCore.Mvc.Formatters.MediaType
Microsoft.AspNetCore.Mvc.Formatters.MediaType.Charset.get -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaType.Encoding.get -> System.Text.Encoding?
Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetParameter(Microsoft.Extensions.Primitives.StringSegment parameterName) -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetParameter(string! parameterName) -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaType.HasWildcard.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.MediaType.IsSubsetOf(Microsoft.AspNetCore.Mvc.Formatters.MediaType set) -> bool
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MatchesAllSubTypes.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MatchesAllSubTypesWithoutSuffix.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MatchesAllTypes.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MediaType() -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MediaType(Microsoft.Extensions.Primitives.StringSegment mediaType) -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MediaType(string! mediaType) -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaType.MediaType(string! mediaType, int offset, int? length) -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaType.SubType.get -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaType.SubTypeSuffix.get -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaType.SubTypeWithoutSuffix.get -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaType.Type.get -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.Add(Microsoft.Net.Http.Headers.MediaTypeHeaderValue! item) -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.Insert(int index, Microsoft.Net.Http.Headers.MediaTypeHeaderValue! item) -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.MediaTypeCollection() -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection.Remove(Microsoft.Net.Http.Headers.MediaTypeHeaderValue! item) -> bool
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.MediaType.get -> Microsoft.Extensions.Primitives.StringSegment
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.MediaTypeSegmentWithQuality() -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.MediaTypeSegmentWithQuality(Microsoft.Extensions.Primitives.StringSegment mediaType, double quality) -> void
Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.Quality.get -> double
Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.OutputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.SupportedMediaTypes.get -> Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection!
Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext! context) -> bool
Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter.StreamOutputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter.StringOutputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter
Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.SerializerOptions.get -> System.Text.Json.JsonSerializerOptions!
Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.SystemTextJsonInputFormatter(Microsoft.AspNetCore.Mvc.JsonOptions! options, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter!>! logger) -> void
Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.SerializerOptions.get -> System.Text.Json.JsonSerializerOptions!
Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.SystemTextJsonOutputFormatter(System.Text.Json.JsonSerializerOptions! jsonSerializerOptions) -> void
Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter
Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> System.Text.Encoding?
Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.SupportedEncodings.get -> System.Collections.Generic.IList<System.Text.Encoding!>!
Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.TextInputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SupportedEncodings.get -> System.Collections.Generic.IList<System.Text.Encoding!>!
Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.TextOutputFormatter() -> void
Microsoft.AspNetCore.Mvc.FromBodyAttribute
Microsoft.AspNetCore.Mvc.FromBodyAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.FromBodyAttribute.EmptyBodyBehavior.get -> Microsoft.AspNetCore.Mvc.ModelBinding.EmptyBodyBehavior
Microsoft.AspNetCore.Mvc.FromBodyAttribute.EmptyBodyBehavior.set -> void
Microsoft.AspNetCore.Mvc.FromBodyAttribute.FromBodyAttribute() -> void
Microsoft.AspNetCore.Mvc.FromFormAttribute
Microsoft.AspNetCore.Mvc.FromFormAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.FromFormAttribute.FromFormAttribute() -> void
Microsoft.AspNetCore.Mvc.FromFormAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.FromFormAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.FromHeaderAttribute
Microsoft.AspNetCore.Mvc.FromHeaderAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.FromHeaderAttribute.FromHeaderAttribute() -> void
Microsoft.AspNetCore.Mvc.FromHeaderAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.FromHeaderAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.FromQueryAttribute
Microsoft.AspNetCore.Mvc.FromQueryAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.FromQueryAttribute.FromQueryAttribute() -> void
Microsoft.AspNetCore.Mvc.FromQueryAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.FromQueryAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.FromRouteAttribute
Microsoft.AspNetCore.Mvc.FromRouteAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.FromRouteAttribute.FromRouteAttribute() -> void
Microsoft.AspNetCore.Mvc.FromRouteAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.FromRouteAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.FromServicesAttribute
Microsoft.AspNetCore.Mvc.FromServicesAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.FromServicesAttribute.FromServicesAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpDeleteAttribute
Microsoft.AspNetCore.Mvc.HttpDeleteAttribute.HttpDeleteAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpDeleteAttribute.HttpDeleteAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.HttpGetAttribute
Microsoft.AspNetCore.Mvc.HttpGetAttribute.HttpGetAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpGetAttribute.HttpGetAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.HttpHeadAttribute
Microsoft.AspNetCore.Mvc.HttpHeadAttribute.HttpHeadAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpHeadAttribute.HttpHeadAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.HttpOptionsAttribute
Microsoft.AspNetCore.Mvc.HttpOptionsAttribute.HttpOptionsAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpOptionsAttribute.HttpOptionsAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.HttpPatchAttribute
Microsoft.AspNetCore.Mvc.HttpPatchAttribute.HttpPatchAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpPatchAttribute.HttpPatchAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.HttpPostAttribute
Microsoft.AspNetCore.Mvc.HttpPostAttribute.HttpPostAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpPostAttribute.HttpPostAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.HttpPutAttribute
Microsoft.AspNetCore.Mvc.HttpPutAttribute.HttpPutAttribute() -> void
Microsoft.AspNetCore.Mvc.HttpPutAttribute.HttpPutAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.IDesignTimeMvcBuilderConfiguration
Microsoft.AspNetCore.Mvc.IDesignTimeMvcBuilderConfiguration.ConfigureMvc(Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor
Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext?
Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor.ActionContext.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ActionContextAccessor.ActionContextAccessor() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection
Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection.ActionDescriptorCollection(System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!>! items, int version) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection.Items.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!>!
Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection.Version.get -> int
Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider
Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollectionProvider.ActionDescriptorCollectionProvider() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultObjectValueAttribute
Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultObjectValueAttribute.ActionResultObjectValueAttribute() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultStatusCodeAttribute
Microsoft.AspNetCore.Mvc.Infrastructure.ActionResultStatusCodeAttribute.ActionResultStatusCodeAttribute() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.AmbiguousActionException
Microsoft.AspNetCore.Mvc.Infrastructure.AmbiguousActionException.AmbiguousActionException(string? message) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.AmbiguousActionException.AmbiguousActionException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>.CompatibilitySwitch(string! name) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>.CompatibilitySwitch(string! name, TValue initialValue) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>.IsValueSet.get -> bool
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>.Name.get -> string!
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>.Value.get -> TValue
Microsoft.AspNetCore.Mvc.Infrastructure.CompatibilitySwitch<TValue>.Value.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions<TOptions>
Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions<TOptions>.ConfigureCompatibilityOptions(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions!>! compatibilityOptions) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions<TOptions>.Version.get -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor.ContentResultExecutor(Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor!>! logger, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory! httpResponseStreamWriterFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector.DefaultOutputFormatterSelector(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions!>! options, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultProblemDetailsFactory
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultProblemDetailsFactory.DefaultProblemDetailsFactory(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions!>! options, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Http.ProblemDetailsOptions!>? problemDetailsOptions = null) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultStatusCodeAttribute
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultStatusCodeAttribute.DefaultStatusCodeAttribute(int statusCode) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.DefaultStatusCodeAttribute.StatusCode.get -> int
Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor.FileContentResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase
Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.FileResultExecutorBase(Microsoft.Extensions.Logging.ILogger! logger) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor.FileStreamResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor
Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext?
Microsoft.AspNetCore.Mvc.Infrastructure.IActionContextAccessor.ActionContext.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorChangeProvider
Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorChangeProvider.GetChangeToken() -> Microsoft.Extensions.Primitives.IChangeToken!
Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider
Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider.ActionDescriptors.get -> Microsoft.AspNetCore.Mvc.Infrastructure.ActionDescriptorCollection!
Microsoft.AspNetCore.Mvc.Infrastructure.IActionInvokerFactory
Microsoft.AspNetCore.Mvc.Infrastructure.IActionInvokerFactory.CreateInvoker(Microsoft.AspNetCore.Mvc.ActionContext! actionContext) -> Microsoft.AspNetCore.Mvc.Abstractions.IActionInvoker?
Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor<TResult>
Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor<TResult>.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, TResult result) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper
Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper.Convert(object? value, System.Type! returnType) -> Microsoft.AspNetCore.Mvc.IActionResult!
Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper.GetResultDataType(System.Type! returnType) -> System.Type!
Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector
Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector.SelectBestCandidate(Microsoft.AspNetCore.Routing.RouteContext! context, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!>! candidates) -> Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor?
Microsoft.AspNetCore.Mvc.Infrastructure.IActionSelector.SelectCandidates(Microsoft.AspNetCore.Routing.RouteContext! context) -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.Abstractions.ActionDescriptor!>?
Microsoft.AspNetCore.Mvc.Infrastructure.IApiBehaviorMetadata
Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorActionResult
Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorFactory
Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorFactory.GetClientError(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.Infrastructure.IClientErrorActionResult! clientError) -> Microsoft.AspNetCore.Mvc.IActionResult?
Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch
Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.IsValueSet.get -> bool
Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.Name.get -> string!
Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.Value.get -> object!
Microsoft.AspNetCore.Mvc.Infrastructure.ICompatibilitySwitch.Value.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.IConvertToActionResult
Microsoft.AspNetCore.Mvc.Infrastructure.IConvertToActionResult.Convert() -> Microsoft.AspNetCore.Mvc.IActionResult!
Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory
Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory.CreateReader(System.IO.Stream! stream, System.Text.Encoding! encoding) -> System.IO.TextReader!
Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory
Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory.CreateWriter(System.IO.Stream! stream, System.Text.Encoding! encoding) -> System.IO.TextWriter!
Microsoft.AspNetCore.Mvc.Infrastructure.IParameterInfoParameterDescriptor
Microsoft.AspNetCore.Mvc.Infrastructure.IParameterInfoParameterDescriptor.ParameterInfo.get -> System.Reflection.ParameterInfo!
Microsoft.AspNetCore.Mvc.Infrastructure.IPropertyInfoParameterDescriptor
Microsoft.AspNetCore.Mvc.Infrastructure.IPropertyInfoParameterDescriptor.PropertyInfo.get -> System.Reflection.PropertyInfo!
Microsoft.AspNetCore.Mvc.Infrastructure.IStatusCodeActionResult
Microsoft.AspNetCore.Mvc.Infrastructure.IStatusCodeActionResult.StatusCode.get -> int?
Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor.LocalRedirectResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory! urlHelperFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter
Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.ModelStateInvalidFilter(Microsoft.AspNetCore.Mvc.ApiBehaviorOptions! apiBehaviorOptions, Microsoft.Extensions.Logging.ILogger! logger) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext! context) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! context) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter.Order.get -> int
Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions
Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions.CompatibilityVersion.get -> Microsoft.AspNetCore.Mvc.CompatibilityVersion
Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions.CompatibilityVersion.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.MvcCompatibilityOptions.MvcCompatibilityOptions() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.FormatterSelector.get -> Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector!
Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ObjectResultExecutor(Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector! formatterSelector, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpResponseStreamWriterFactory! writerFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions!>! mvcOptions) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.WriterFactory.get -> System.Func<System.IO.Stream!, System.Text.Encoding!, System.IO.TextWriter!>!
Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector
Microsoft.AspNetCore.Mvc.Infrastructure.OutputFormatterSelector.OutputFormatterSelector() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.Exists.get -> bool
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.Exists.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.FileMetadata() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.LastModified.get -> System.DateTimeOffset
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.LastModified.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.Length.get -> long
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata.Length.set -> void
Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.PhysicalFileResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory
Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory.ProblemDetailsFactory() -> void
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor.RedirectResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory! urlHelperFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor.RedirectToActionResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory! urlHelperFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor.RedirectToPageResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory! urlHelperFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor.RedirectToRouteResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory! urlHelperFactory) -> void
Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor
Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor.VirtualFileResultExecutor(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Hosting.IWebHostEnvironment! hostingEnvironment) -> void
Microsoft.AspNetCore.Mvc.IRequestFormLimitsPolicy
Microsoft.AspNetCore.Mvc.IRequestSizePolicy
Microsoft.AspNetCore.Mvc.JsonOptions
Microsoft.AspNetCore.Mvc.JsonOptions.AllowInputFormatterExceptionMessages.get -> bool
Microsoft.AspNetCore.Mvc.JsonOptions.AllowInputFormatterExceptionMessages.set -> void
Microsoft.AspNetCore.Mvc.JsonOptions.JsonOptions() -> void
Microsoft.AspNetCore.Mvc.JsonOptions.JsonSerializerOptions.get -> System.Text.Json.JsonSerializerOptions!
Microsoft.AspNetCore.Mvc.JsonResult
Microsoft.AspNetCore.Mvc.JsonResult.ContentType.get -> string?
Microsoft.AspNetCore.Mvc.JsonResult.ContentType.set -> void
Microsoft.AspNetCore.Mvc.JsonResult.JsonResult(object? value) -> void
Microsoft.AspNetCore.Mvc.JsonResult.JsonResult(object? value, object? serializerSettings) -> void
Microsoft.AspNetCore.Mvc.JsonResult.SerializerSettings.get -> object?
Microsoft.AspNetCore.Mvc.JsonResult.SerializerSettings.set -> void
Microsoft.AspNetCore.Mvc.JsonResult.StatusCode.get -> int?
Microsoft.AspNetCore.Mvc.JsonResult.StatusCode.set -> void
Microsoft.AspNetCore.Mvc.JsonResult.Value.get -> object?
Microsoft.AspNetCore.Mvc.JsonResult.Value.set -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult
Microsoft.AspNetCore.Mvc.LocalRedirectResult.LocalRedirectResult(string! localUrl) -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult.LocalRedirectResult(string! localUrl, bool permanent) -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult.LocalRedirectResult(string! localUrl, bool permanent, bool preserveMethod) -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult.Permanent.get -> bool
Microsoft.AspNetCore.Mvc.LocalRedirectResult.Permanent.set -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult.PreserveMethod.get -> bool
Microsoft.AspNetCore.Mvc.LocalRedirectResult.PreserveMethod.set -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult.Url.get -> string!
Microsoft.AspNetCore.Mvc.LocalRedirectResult.Url.set -> void
Microsoft.AspNetCore.Mvc.LocalRedirectResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.LocalRedirectResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.ConfigurationType.get -> System.Type!
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.MiddlewareFilterAttribute(System.Type! configurationType) -> void
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute<T>
Microsoft.AspNetCore.Mvc.MiddlewareFilterAttribute<T>.MiddlewareFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.ModelBinderAttribute
Microsoft.AspNetCore.Mvc.ModelBinderAttribute.BinderType.get -> System.Type?
Microsoft.AspNetCore.Mvc.ModelBinderAttribute.BinderType.set -> void
Microsoft.AspNetCore.Mvc.ModelBinderAttribute.ModelBinderAttribute() -> void
Microsoft.AspNetCore.Mvc.ModelBinderAttribute.ModelBinderAttribute(System.Type! binderType) -> void
Microsoft.AspNetCore.Mvc.ModelBinderAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinderAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.ModelBinderAttribute<TBinder>
Microsoft.AspNetCore.Mvc.ModelBinderAttribute<TBinder>.ModelBinderAttribute() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.ArrayModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! elementBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.ArrayModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! elementBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool allowValidatingTopLevelNodes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.ArrayModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! elementBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool allowValidatingTopLevelNodes, Microsoft.AspNetCore.Mvc.MvcOptions! mvcOptions) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider.ArrayModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder.BinderTypeModelBinder(System.Type! binderType) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider.BinderTypeModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BodyModelBinder(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory! readerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BodyModelBinder(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory! readerFactory, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinder.BodyModelBinder(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory! readerFactory, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory, Microsoft.AspNetCore.Mvc.MvcOptions? options) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.BodyModelBinderProvider(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory! readerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.BodyModelBinderProvider(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory! readerFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.BodyModelBinderProvider(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Infrastructure.IHttpRequestStreamReaderFactory! readerFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.MvcOptions? options) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinder.ByteArrayModelBinder(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider.ByteArrayModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinder.CancellationTokenModelBinder() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider.CancellationTokenModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.AddErrorIfBindingRequired(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CollectionModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! elementBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CollectionModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! elementBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool allowValidatingTopLevelNodes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CollectionModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! elementBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool allowValidatingTopLevelNodes, Microsoft.AspNetCore.Mvc.MvcOptions! mvcOptions) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CreateInstance(System.Type! targetType) -> object!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.ElementBinder.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider.CollectionModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider.ComplexObjectModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexTypeModelBinderProvider.ComplexTypeModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinder.DateTimeModelBinder(System.Globalization.DateTimeStyles supportedStyles, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider.DateTimeModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DecimalModelBinder.DecimalModelBinder(System.Globalization.NumberStyles supportedStyles, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.DictionaryModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! keyBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! valueBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.DictionaryModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! keyBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! valueBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool allowValidatingTopLevelNodes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.DictionaryModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! keyBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! valueBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool allowValidatingTopLevelNodes, Microsoft.AspNetCore.Mvc.MvcOptions! mvcOptions) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider.DictionaryModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DoubleModelBinder.DoubleModelBinder(System.Globalization.NumberStyles supportedStyles, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinder.EnumTypeModelBinder(bool suppressBindingUndefinedValueToEnumType, System.Type! modelType, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider.EnumTypeModelBinderProvider(Microsoft.AspNetCore.Mvc.MvcOptions! options) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider.FloatingPointTypeModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatModelBinder.FloatModelBinder(System.Globalization.NumberStyles supportedStyles, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinder.FormCollectionModelBinder(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider.FormCollectionModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinder.FormFileModelBinder(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider.FormFileModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.HeaderModelBinder(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinder.HeaderModelBinder(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! innerModelBinder) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider.HeaderModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder<TKey, TValue>
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder<TKey, TValue>.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinder<TKey, TValue>.KeyValuePairModelBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! keyBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! valueBinder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider.KeyValuePairModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinder.ServicesModelBinder() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider.ServicesModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder.SimpleTypeModelBinder(System.Type! type, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider.SimpleTypeModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider.GetBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder?
Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider.TryParseModelBinderProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior.Never = 1 -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior.Optional = 0 -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior.Required = 2 -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute.Behavior.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior
Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehaviorAttribute.BindingBehaviorAttribute(Microsoft.AspNetCore.Mvc.ModelBinding.BindingBehavior behavior) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource!
Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.BindingSourceValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.BindNeverAttribute
Microsoft.AspNetCore.Mvc.ModelBinding.BindNeverAttribute.BindNeverAttribute() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.BindRequiredAttribute
Microsoft.AspNetCore.Mvc.ModelBinding.BindRequiredAttribute.BindRequiredAttribute() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.CompositeValueProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.CompositeValueProvider(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider!>! valueProviders) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.Filter() -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource) -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext
Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.DefaultModelBindingContext() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.OriginalValueProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider!
Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.OriginalValueProvider.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider<TModel>
Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider<TModel>.DefaultPropertyFilterProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.EmptyModelMetadataProvider.EmptyModelMetadataProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider.ContainsPrefix(string! prefix) -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider.FormFileValueProvider(Microsoft.AspNetCore.Http.IFormFileCollection! files) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProviderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.FormFileValueProviderFactory.FormFileValueProviderFactory() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.Culture.get -> System.Globalization.CultureInfo?
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.FormValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, Microsoft.AspNetCore.Http.IFormCollection! values, System.Globalization.CultureInfo? culture) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.PrefixContainer.get -> Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer!
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory.FormValueProviderFactory() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.IBindingSourceValueProvider.Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource) -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder
Microsoft.AspNetCore.Mvc.ModelBinding.ICollectionModelBinder.CanCreateInstance(System.Type! targetType) -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.IEnumerableValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.IEnumerableValueProvider.GetKeysFromPrefix(string! prefix) -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Mvc.ModelBinding.IKeyRewriterValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.IKeyRewriterValueProvider.Filter() -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory.CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder!
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProvider.JQueryFormValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, System.Collections.Generic.IDictionary<string!, Microsoft.Extensions.Primitives.StringValues>! values, System.Globalization.CultureInfo? culture) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProviderFactory.JQueryFormValueProviderFactory() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProvider.JQueryQueryStringValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, System.Collections.Generic.IDictionary<string!, Microsoft.Extensions.Primitives.StringValues>! values, System.Globalization.CultureInfo? culture) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryQueryStringValueProviderFactory.JQueryQueryStringValueProviderFactory() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.Culture.get -> System.Globalization.CultureInfo?
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.Filter() -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.GetKeysFromPrefix(string! prefix) -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.JQueryValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, System.Collections.Generic.IDictionary<string!, Microsoft.Extensions.Primitives.StringValues>! values, System.Globalization.CultureInfo? culture) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.PrefixContainer.get -> Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BinderModelName.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BinderModelName.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BinderType.get -> System.Type?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BinderType.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BindingMetadata() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BindingSource.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BoundConstructor.get -> System.Reflection.ConstructorInfo?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.BoundConstructor.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.IsBindingAllowed.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.IsBindingAllowed.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.IsBindingRequired.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.IsBindingRequired.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.IsReadOnly.get -> bool?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.IsReadOnly.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.ModelBindingMessageProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.ModelBindingMessageProvider.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.PropertyFilterProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata.PropertyFilterProvider.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.BindingMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.BindingMetadataProviderContext(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes! attributes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.Key.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.ParameterAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.PropertyAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext.TypeAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.BindingSourceMetadataProvider(System.Type! type, Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource? bindingSource) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingSourceMetadataProvider.Type.get -> System.Type!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.BindingMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.BindingMetadata.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.BoundConstructorInvoker.get -> System.Func<object?[]!, object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.BoundConstructorInvoker.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.BoundConstructorParameters.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata![]?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.BoundConstructorParameters.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.ContainerMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.ContainerMetadata.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.DefaultMetadataDetails(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes! attributes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.DisplayMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.DisplayMetadata.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.Key.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.ModelAttributes.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.Properties.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata![]?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.Properties.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.PropertyGetter.get -> System.Func<object!, object?>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.PropertyGetter.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.PropertySetter.get -> System.Action<object!, object?>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.PropertySetter.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.ValidationMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails.ValidationMetadata.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.DefaultModelBindingMessageProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.DefaultModelBindingMessageProvider(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider! originalProvider) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetAttemptedValueIsInvalidAccessor(System.Func<string!, string!, string!>! attemptedValueIsInvalidAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetMissingBindRequiredValueAccessor(System.Func<string!, string!>! missingBindRequiredValueAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetMissingKeyOrValueAccessor(System.Func<string!>! missingKeyOrValueAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetMissingRequestBodyRequiredValueAccessor(System.Func<string!>! missingRequestBodyRequiredValueAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetNonPropertyAttemptedValueIsInvalidAccessor(System.Func<string!, string!>! nonPropertyAttemptedValueIsInvalidAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetNonPropertyUnknownValueIsInvalidAccessor(System.Func<string!>! nonPropertyUnknownValueIsInvalidAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetNonPropertyValueMustBeANumberAccessor(System.Func<string!>! nonPropertyValueMustBeANumberAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetUnknownValueIsInvalidAccessor(System.Func<string!, string!>! unknownValueIsInvalidAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetValueIsInvalidAccessor(System.Func<string!, string!>! valueIsInvalidAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetValueMustBeANumberAccessor(System.Func<string!, string!>! valueMustBeANumberAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.SetValueMustNotBeNullAccessor(System.Func<string!, string!>! valueMustNotBeNullAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.Attributes.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BindingMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.DefaultModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! provider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider! detailsProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails! details) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.DefaultModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! provider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider! detailsProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails! details, Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider! modelBindingMessageProvider) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.DisplayMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ValidationMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.DefaultModelMetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider! detailsProvider) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.DefaultModelMetadataProvider(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider! detailsProvider, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions!>! optionsAccessor) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.DetailsProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.ModelBindingMessageProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.AdditionalValues.get -> System.Collections.Generic.IDictionary<object!, object!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.ConvertEmptyStringToNull.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.ConvertEmptyStringToNull.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DataTypeName.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DataTypeName.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.Description.get -> System.Func<string?>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.Description.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayFormatString.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayFormatString.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayFormatStringProvider.get -> System.Func<string?>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayFormatStringProvider.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayMetadata() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayName.get -> System.Func<string?>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.DisplayName.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EditFormatString.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EditFormatString.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EditFormatStringProvider.get -> System.Func<string?>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EditFormatStringProvider.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EnumGroupedDisplayNamesAndValues.get -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName, string!>>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EnumGroupedDisplayNamesAndValues.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EnumNamesAndValues.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.EnumNamesAndValues.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.HasNonDefaultEditFormat.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.HasNonDefaultEditFormat.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.HideSurroundingHtml.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.HideSurroundingHtml.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.HtmlEncode.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.HtmlEncode.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.IsEnum.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.IsEnum.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.IsFlagsEnum.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.IsFlagsEnum.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.NullDisplayText.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.NullDisplayText.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.NullDisplayTextProvider.get -> System.Func<string?>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.NullDisplayTextProvider.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.Order.get -> int
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.Order.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.Placeholder.get -> System.Func<string?>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.Placeholder.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.ShowForDisplay.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.ShowForDisplay.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.ShowForEdit.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.ShowForEdit.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.SimpleDisplayProperty.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.SimpleDisplayProperty.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.TemplateHint.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata.TemplateHint.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.DisplayMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.DisplayMetadataProviderContext(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes! attributes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.Key.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.PropertyAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext.TypeAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ExcludeBindingMetadataProvider.ExcludeBindingMetadataProvider(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IBindingMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IBindingMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ICompositeMetadataDetailsProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IDisplayMetadataProvider.CreateDisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IValidationMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IValidationMetadataProvider.CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider.CreateDisplayMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DisplayMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider.CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider.SystemTextJsonValidationMetadataProvider() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.SystemTextJsonValidationMetadataProvider.SystemTextJsonValidationMetadataProvider(System.Text.Json.JsonNamingPolicy! namingPolicy) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.HasValidators.get -> bool?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.HasValidators.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.IsRequired.get -> bool?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.IsRequired.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.PropertyValidationFilter.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.PropertyValidationFilter.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.ValidateChildren.get -> bool?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.ValidateChildren.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.ValidationMetadata() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.ValidationModelName.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.ValidationModelName.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata.ValidatorMetadata.get -> System.Collections.Generic.IList<object!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.Key.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.ParameterAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.PropertyAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.TypeAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.ValidationMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext.ValidationMetadataProviderContext(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key, Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes! attributes) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes
Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.Attributes.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.ParameterAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.PropertyAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.TypeAttributes.get -> System.Collections.Generic.IReadOnlyList<object!>?
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory.CreateBinder(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext! context) -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder!
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory.ModelBinderFactory(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! metadataProvider, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions!>! options, System.IServiceProvider! serviceProvider) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.BindingInfo.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo?
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.BindingInfo.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.CacheToken.get -> object?
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.CacheToken.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.Metadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.Metadata.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactoryContext.ModelBinderFactoryContext() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions
Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions
Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames
Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator
Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.ObjectModelValidator(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! modelMetadataProvider, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!>! validatorProviders) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder
Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.ParameterBinder(Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! modelMetadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderFactory! modelBinderFactory, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator! validator, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Mvc.MvcOptions!>! mvcOptions, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer
Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer.ContainsPrefix(string! prefix) -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer.GetKeysFromPrefix(string! prefix) -> System.Collections.Generic.IDictionary<string!, string!>!
Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer.PrefixContainer(System.Collections.Generic.ICollection<string!>! values) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.Culture.get -> System.Globalization.CultureInfo?
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.PrefixContainer.get -> Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer!
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.QueryStringValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, Microsoft.AspNetCore.Http.IQueryCollection! values, System.Globalization.CultureInfo? culture) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProviderFactory.QueryStringValueProviderFactory() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.Culture.get -> System.Globalization.CultureInfo!
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.PrefixContainer.get -> Microsoft.AspNetCore.Mvc.ModelBinding.PrefixContainer!
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.RouteValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, Microsoft.AspNetCore.Routing.RouteValueDictionary! values) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.RouteValueProvider(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource, Microsoft.AspNetCore.Routing.RouteValueDictionary! values, System.Globalization.CultureInfo! culture) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory.CreateValueProviderAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryContext! context) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProviderFactory.RouteValueProviderFactory() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.CreateValidationMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ValidationMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.FullTypeName.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.SuppressChildValidationMetadataProvider(string! fullTypeName) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.SuppressChildValidationMetadataProvider(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.SuppressChildValidationMetadataProvider.Type.get -> System.Type?
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeException
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeException.UnsupportedContentTypeException(string? message) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.Order.get -> int
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.Order.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter.UnsupportedContentTypeFilter() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache.ClientValidatorCache() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorCache.GetValidators(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider! validatorProvider) -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidator!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider.CompositeClientModelValidatorProvider(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider!>! providers) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider.CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ClientValidatorProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeClientModelValidatorProvider.ValidatorProviders.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IClientModelValidatorProvider!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider.CompositeModelValidatorProvider(System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!>! providers) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider.CreateValidators(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.CompositeModelValidatorProvider.ValidatorProviders.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IMetadataBasedModelValidatorProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IMetadataBasedModelValidatorProvider.HasValidators(System.Type! modelType, System.Collections.Generic.IList<object!>! validatorMetadata) -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary? validationState, string! prefix, object? model) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute.ShouldValidateEntry(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry entry, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationEntry parentEntry) -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidateNeverAttribute.ValidateNeverAttribute() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Cache.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Container.get -> object?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Container.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Context.get -> Microsoft.AspNetCore.Mvc.ActionContext!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Key.get -> string?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Key.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.MaxValidationDepth.get -> int?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.MaxValidationDepth.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Metadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Metadata.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.MetadataProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Model.get -> object?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Model.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ModelState.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.StateManager
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.StateManager.Dispose() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.StateManager.StateManager() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.StateManager.StateManager(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor! visitor, object? newModel) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Strategy.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Strategy.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, string! key, object! model) -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateComplexTypesIfChildValidationFails.get -> bool
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateComplexTypesIfChildValidationFails.set -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidationState.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary?
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidationVisitor(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider! validatorProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache! validatorCache, Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! metadataProvider, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary? validationState) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidatorProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache.GetValidators(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider! validatorProvider) -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidator!>!
Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidatorCache.ValidatorCache() -> void
Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions
Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute
Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute.MetadataType.get -> System.Type!
Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute.ModelMetadataTypeAttribute(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute<T>
Microsoft.AspNetCore.Mvc.ModelMetadataTypeAttribute<T>.ModelMetadataTypeAttribute() -> void
Microsoft.AspNetCore.Mvc.MvcOptions
Microsoft.AspNetCore.Mvc.MvcOptions.AllowEmptyInputInBodyModelBinding.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.AllowEmptyInputInBodyModelBinding.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.CacheProfiles.get -> System.Collections.Generic.IDictionary<string!, Microsoft.AspNetCore.Mvc.CacheProfile!>!
Microsoft.AspNetCore.Mvc.MvcOptions.Conventions.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>!
Microsoft.AspNetCore.Mvc.MvcOptions.EnableActionInvokers.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.EnableActionInvokers.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.EnableEndpointRouting.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.EnableEndpointRouting.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.Filters.get -> Microsoft.AspNetCore.Mvc.Filters.FilterCollection!
Microsoft.AspNetCore.Mvc.MvcOptions.FormatterMappings.get -> Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings!
Microsoft.AspNetCore.Mvc.MvcOptions.InputFormatters.get -> Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IInputFormatter!>!
Microsoft.AspNetCore.Mvc.MvcOptions.MaxIAsyncEnumerableBufferLimit.get -> int
Microsoft.AspNetCore.Mvc.MvcOptions.MaxIAsyncEnumerableBufferLimit.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.MaxModelBindingCollectionSize.get -> int
Microsoft.AspNetCore.Mvc.MvcOptions.MaxModelBindingCollectionSize.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.MaxModelBindingRecursionDepth.get -> int
Microsoft.AspNetCore.Mvc.MvcOptions.MaxModelBindingRecursionDepth.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.MaxModelValidationErrors.get -> int
Microsoft.AspNetCore.Mvc.MvcOptions.MaxModelValidationErrors.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.MaxValidationDepth.get -> int?
Microsoft.AspNetCore.Mvc.MvcOptions.MaxValidationDepth.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.ModelBinderProviders.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider!>!
Microsoft.AspNetCore.Mvc.MvcOptions.ModelBindingMessageProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider!
Microsoft.AspNetCore.Mvc.MvcOptions.ModelMetadataDetailsProviders.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider!>!
Microsoft.AspNetCore.Mvc.MvcOptions.ModelValidatorProviders.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!>!
Microsoft.AspNetCore.Mvc.MvcOptions.MvcOptions() -> void
Microsoft.AspNetCore.Mvc.MvcOptions.OutputFormatters.get -> Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter!>!
Microsoft.AspNetCore.Mvc.MvcOptions.RequireHttpsPermanent.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.RequireHttpsPermanent.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.RespectBrowserAcceptHeader.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.RespectBrowserAcceptHeader.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.ReturnHttpNotAcceptable.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.ReturnHttpNotAcceptable.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.SslPort.get -> int?
Microsoft.AspNetCore.Mvc.MvcOptions.SslPort.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressAsyncSuffixInActionNames.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressAsyncSuffixInActionNames.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressInputFormatterBuffering.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressInputFormatterBuffering.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressOutputFormatterBuffering.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.SuppressOutputFormatterBuffering.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.ValidateComplexTypesIfChildValidationFails.get -> bool
Microsoft.AspNetCore.Mvc.MvcOptions.ValidateComplexTypesIfChildValidationFails.set -> void
Microsoft.AspNetCore.Mvc.MvcOptions.ValueProviderFactories.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory!>!
Microsoft.AspNetCore.Mvc.NoContentResult
Microsoft.AspNetCore.Mvc.NoContentResult.NoContentResult() -> void
Microsoft.AspNetCore.Mvc.NonActionAttribute
Microsoft.AspNetCore.Mvc.NonActionAttribute.NonActionAttribute() -> void
Microsoft.AspNetCore.Mvc.NonControllerAttribute
Microsoft.AspNetCore.Mvc.NonControllerAttribute.NonControllerAttribute() -> void
Microsoft.AspNetCore.Mvc.NonViewComponentAttribute
Microsoft.AspNetCore.Mvc.NonViewComponentAttribute.NonViewComponentAttribute() -> void
Microsoft.AspNetCore.Mvc.NotFoundObjectResult
Microsoft.AspNetCore.Mvc.NotFoundObjectResult.NotFoundObjectResult(object? value) -> void
Microsoft.AspNetCore.Mvc.NotFoundResult
Microsoft.AspNetCore.Mvc.NotFoundResult.NotFoundResult() -> void
Microsoft.AspNetCore.Mvc.ObjectResult
Microsoft.AspNetCore.Mvc.ObjectResult.ContentTypes.get -> Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection!
Microsoft.AspNetCore.Mvc.ObjectResult.ContentTypes.set -> void
Microsoft.AspNetCore.Mvc.ObjectResult.DeclaredType.get -> System.Type?
Microsoft.AspNetCore.Mvc.ObjectResult.DeclaredType.set -> void
Microsoft.AspNetCore.Mvc.ObjectResult.Formatters.get -> Microsoft.AspNetCore.Mvc.Formatters.FormatterCollection<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter!>!
Microsoft.AspNetCore.Mvc.ObjectResult.Formatters.set -> void
Microsoft.AspNetCore.Mvc.ObjectResult.ObjectResult(object? value) -> void
Microsoft.AspNetCore.Mvc.ObjectResult.StatusCode.get -> int?
Microsoft.AspNetCore.Mvc.ObjectResult.StatusCode.set -> void
Microsoft.AspNetCore.Mvc.ObjectResult.Value.get -> object?
Microsoft.AspNetCore.Mvc.ObjectResult.Value.set -> void
Microsoft.AspNetCore.Mvc.OkObjectResult
Microsoft.AspNetCore.Mvc.OkObjectResult.OkObjectResult(object? value) -> void
Microsoft.AspNetCore.Mvc.OkResult
Microsoft.AspNetCore.Mvc.OkResult.OkResult() -> void
Microsoft.AspNetCore.Mvc.PhysicalFileResult
Microsoft.AspNetCore.Mvc.PhysicalFileResult.FileName.get -> string!
Microsoft.AspNetCore.Mvc.PhysicalFileResult.FileName.set -> void
Microsoft.AspNetCore.Mvc.PhysicalFileResult.PhysicalFileResult(string! fileName, Microsoft.Net.Http.Headers.MediaTypeHeaderValue! contentType) -> void
Microsoft.AspNetCore.Mvc.PhysicalFileResult.PhysicalFileResult(string! fileName, string! contentType) -> void
Microsoft.AspNetCore.Mvc.ProblemDetails (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Detail.get -> string? (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Detail.set -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Extensions.get -> System.Collections.Generic.IDictionary<string!, object?>! (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Extensions.set -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Instance.get -> string? (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Instance.set -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.ProblemDetails() -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Status.get -> int? (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Status.set -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Title.get -> string? (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Title.set -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Type.get -> string? (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProblemDetails.Type.set -> void (forwarded, contained in Microsoft.AspNetCore.Http.Abstractions)
Microsoft.AspNetCore.Mvc.ProducesAttribute
Microsoft.AspNetCore.Mvc.ProducesAttribute.ContentTypes.get -> Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection!
Microsoft.AspNetCore.Mvc.ProducesAttribute.ContentTypes.set -> void
Microsoft.AspNetCore.Mvc.ProducesAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.ProducesAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.ProducesAttribute.ProducesAttribute(string! contentType, params string![]! additionalContentTypes) -> void
Microsoft.AspNetCore.Mvc.ProducesAttribute.ProducesAttribute(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ProducesAttribute.SetContentTypes(Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection! contentTypes) -> void
Microsoft.AspNetCore.Mvc.ProducesAttribute.StatusCode.get -> int
Microsoft.AspNetCore.Mvc.ProducesAttribute.Type.get -> System.Type?
Microsoft.AspNetCore.Mvc.ProducesAttribute.Type.set -> void
Microsoft.AspNetCore.Mvc.ProducesAttribute<T>
Microsoft.AspNetCore.Mvc.ProducesAttribute<T>.ProducesAttribute() -> void
Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute
Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.ProducesDefaultResponseTypeAttribute() -> void
Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.ProducesDefaultResponseTypeAttribute(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.StatusCode.get -> int
Microsoft.AspNetCore.Mvc.ProducesDefaultResponseTypeAttribute.Type.get -> System.Type!
Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute
Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute.ProducesErrorResponseTypeAttribute(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ProducesErrorResponseTypeAttribute.Type.get -> System.Type!
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.ProducesResponseTypeAttribute(int statusCode) -> void
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.ProducesResponseTypeAttribute(System.Type! type, int statusCode) -> void
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.ProducesResponseTypeAttribute(System.Type! type, int statusCode, string! contentType, params string![]! additionalContentTypes) -> void
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.StatusCode.get -> int
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.StatusCode.set -> void
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.Type.get -> System.Type!
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute.Type.set -> void
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute<T>
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute<T>.ProducesResponseTypeAttribute(int statusCode) -> void
Microsoft.AspNetCore.Mvc.ProducesResponseTypeAttribute<T>.ProducesResponseTypeAttribute(int statusCode, string! contentType, params string![]! additionalContentTypes) -> void
Microsoft.AspNetCore.Mvc.RedirectResult
Microsoft.AspNetCore.Mvc.RedirectResult.Permanent.get -> bool
Microsoft.AspNetCore.Mvc.RedirectResult.Permanent.set -> void
Microsoft.AspNetCore.Mvc.RedirectResult.PreserveMethod.get -> bool
Microsoft.AspNetCore.Mvc.RedirectResult.PreserveMethod.set -> void
Microsoft.AspNetCore.Mvc.RedirectResult.RedirectResult(string! url) -> void
Microsoft.AspNetCore.Mvc.RedirectResult.RedirectResult(string! url, bool permanent) -> void
Microsoft.AspNetCore.Mvc.RedirectResult.RedirectResult(string! url, bool permanent, bool preserveMethod) -> void
Microsoft.AspNetCore.Mvc.RedirectResult.Url.get -> string!
Microsoft.AspNetCore.Mvc.RedirectResult.Url.set -> void
Microsoft.AspNetCore.Mvc.RedirectResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.RedirectResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult
Microsoft.AspNetCore.Mvc.RedirectToActionResult.ActionName.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToActionResult.ActionName.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.ControllerName.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToActionResult.ControllerName.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.Fragment.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToActionResult.Fragment.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.Permanent.get -> bool
Microsoft.AspNetCore.Mvc.RedirectToActionResult.Permanent.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.PreserveMethod.get -> bool
Microsoft.AspNetCore.Mvc.RedirectToActionResult.PreserveMethod.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RedirectToActionResult(string? actionName, string? controllerName, object? routeValues) -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RedirectToActionResult(string? actionName, string? controllerName, object? routeValues, bool permanent) -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RedirectToActionResult(string? actionName, string? controllerName, object? routeValues, bool permanent, bool preserveMethod) -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RedirectToActionResult(string? actionName, string? controllerName, object? routeValues, bool permanent, bool preserveMethod, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RedirectToActionResult(string? actionName, string? controllerName, object? routeValues, bool permanent, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RedirectToActionResult(string? actionName, string? controllerName, object? routeValues, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.RedirectToActionResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.RedirectToActionResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.RedirectToActionResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Fragment.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Fragment.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Host.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Host.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.PageHandler.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.PageHandler.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.PageName.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.PageName.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Permanent.get -> bool
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Permanent.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.PreserveMethod.get -> bool
Microsoft.AspNetCore.Mvc.RedirectToPageResult.PreserveMethod.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Protocol.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.Protocol.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, object? routeValues) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler, object? routeValues) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler, object? routeValues, bool permanent) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler, object? routeValues, bool permanent, bool preserveMethod) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler, object? routeValues, bool permanent, bool preserveMethod, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler, object? routeValues, bool permanent, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RedirectToPageResult(string? pageName, string? pageHandler, object? routeValues, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.RedirectToPageResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.RedirectToPageResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.Fragment.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.Fragment.set -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.Permanent.get -> bool
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.Permanent.set -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.PreserveMethod.get -> bool
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.PreserveMethod.set -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(object? routeValues) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(string? routeName, object? routeValues) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(string? routeName, object? routeValues, bool permanent) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(string? routeName, object? routeValues, bool permanent, bool preserveMethod) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(string? routeName, object? routeValues, bool permanent, bool preserveMethod, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(string? routeName, object? routeValues, bool permanent, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RedirectToRouteResult(string? routeName, object? routeValues, string? fragment) -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RouteName.get -> string?
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RouteName.set -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RouteValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary?
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.RouteValues.set -> void
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.UrlHelper.get -> Microsoft.AspNetCore.Mvc.IUrlHelper?
Microsoft.AspNetCore.Mvc.RedirectToRouteResult.UrlHelper.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.BufferBody.get -> bool
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.BufferBody.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.BufferBodyLengthLimit.get -> long
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.BufferBodyLengthLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.KeyLengthLimit.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.KeyLengthLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MemoryBufferThreshold.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MemoryBufferThreshold.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartBodyLengthLimit.get -> long
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartBodyLengthLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartBoundaryLengthLimit.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartBoundaryLengthLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartHeadersCountLimit.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartHeadersCountLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartHeadersLengthLimit.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.MultipartHeadersLengthLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.RequestFormLimitsAttribute() -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.ValueCountLimit.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.ValueCountLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.ValueLengthLimit.get -> int
Microsoft.AspNetCore.Mvc.RequestFormLimitsAttribute.ValueLengthLimit.set -> void
Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute
Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.RequestSizeLimitAttribute.RequestSizeLimitAttribute(long bytes) -> void
Microsoft.AspNetCore.Mvc.RequireHttpsAttribute
Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.Permanent.get -> bool
Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.Permanent.set -> void
Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.RequireHttpsAttribute() -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.CacheProfileName.get -> string?
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.CacheProfileName.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.Duration.get -> int
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.Duration.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.GetCacheProfile(Microsoft.AspNetCore.Mvc.MvcOptions! options) -> Microsoft.AspNetCore.Mvc.CacheProfile!
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.Location.get -> Microsoft.AspNetCore.Mvc.ResponseCacheLocation
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.Location.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.NoStore.get -> bool
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.NoStore.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.ResponseCacheAttribute() -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.VaryByHeader.get -> string?
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.VaryByHeader.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.VaryByQueryKeys.get -> string![]?
Microsoft.AspNetCore.Mvc.ResponseCacheAttribute.VaryByQueryKeys.set -> void
Microsoft.AspNetCore.Mvc.ResponseCacheLocation
Microsoft.AspNetCore.Mvc.ResponseCacheLocation.Any = 0 -> Microsoft.AspNetCore.Mvc.ResponseCacheLocation
Microsoft.AspNetCore.Mvc.ResponseCacheLocation.Client = 1 -> Microsoft.AspNetCore.Mvc.ResponseCacheLocation
Microsoft.AspNetCore.Mvc.ResponseCacheLocation.None = 2 -> Microsoft.AspNetCore.Mvc.ResponseCacheLocation
Microsoft.AspNetCore.Mvc.RouteAttribute
Microsoft.AspNetCore.Mvc.RouteAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.RouteAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.RouteAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.RouteAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.RouteAttribute.RouteAttribute(string! template) -> void
Microsoft.AspNetCore.Mvc.RouteAttribute.Template.get -> string!
Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer
Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.DynamicRouteValueTransformer() -> void
Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State.get -> object?
Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State.set -> void
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.HttpMethodAttribute(System.Collections.Generic.IEnumerable<string!>! httpMethods) -> void
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.HttpMethodAttribute(System.Collections.Generic.IEnumerable<string!>! httpMethods, string? template) -> void
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.HttpMethods.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.Name.get -> string?
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.Name.set -> void
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.Routing.HttpMethodAttribute.Template.get -> string?
Microsoft.AspNetCore.Mvc.Routing.IActionHttpMethodProvider
Microsoft.AspNetCore.Mvc.Routing.IActionHttpMethodProvider.HttpMethods.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider
Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Name.get -> string?
Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Order.get -> int?
Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider.Template.get -> string?
Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider
Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteKey.get -> string!
Microsoft.AspNetCore.Mvc.Routing.IRouteValueProvider.RouteValue.get -> string?
Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory
Microsoft.AspNetCore.Mvc.Routing.IUrlHelperFactory.GetUrlHelper(Microsoft.AspNetCore.Mvc.ActionContext! context) -> Microsoft.AspNetCore.Mvc.IUrlHelper!
Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint
Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint.KnownRouteValueConstraint(Microsoft.AspNetCore.Mvc.Infrastructure.IActionDescriptorCollectionProvider! actionDescriptorCollectionProvider) -> void
Microsoft.AspNetCore.Mvc.Routing.KnownRouteValueConstraint.Match(Microsoft.AspNetCore.Http.HttpContext? httpContext, Microsoft.AspNetCore.Routing.IRouter? route, string! routeKey, Microsoft.AspNetCore.Routing.RouteValueDictionary! values, Microsoft.AspNetCore.Routing.RouteDirection routeDirection) -> bool
Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute
Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute.RouteKey.get -> string!
Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute.RouteValue.get -> string!
Microsoft.AspNetCore.Mvc.Routing.RouteValueAttribute.RouteValueAttribute(string! routeKey, string! routeValue) -> void
Microsoft.AspNetCore.Mvc.Routing.UrlHelper
Microsoft.AspNetCore.Mvc.Routing.UrlHelper.HttpContext.get -> Microsoft.AspNetCore.Http.HttpContext!
Microsoft.AspNetCore.Mvc.Routing.UrlHelper.Router.get -> Microsoft.AspNetCore.Routing.IRouter!
Microsoft.AspNetCore.Mvc.Routing.UrlHelper.UrlHelper(Microsoft.AspNetCore.Mvc.ActionContext! actionContext) -> void
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext!
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.AmbientValues.get -> Microsoft.AspNetCore.Routing.RouteValueDictionary!
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.GenerateUrl(string? protocol, string? host, string? path) -> string?
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.GenerateUrl(string? protocol, string? host, string? virtualPath, string? fragment) -> string?
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.GetValuesDictionary(object? values) -> Microsoft.AspNetCore.Routing.RouteValueDictionary!
Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.UrlHelperBase(Microsoft.AspNetCore.Mvc.ActionContext! actionContext) -> void
Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory
Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory.GetUrlHelper(Microsoft.AspNetCore.Mvc.ActionContext! context) -> Microsoft.AspNetCore.Mvc.IUrlHelper!
Microsoft.AspNetCore.Mvc.Routing.UrlHelperFactory.UrlHelperFactory() -> void
Microsoft.AspNetCore.Mvc.SerializableError
Microsoft.AspNetCore.Mvc.SerializableError.SerializableError() -> void
Microsoft.AspNetCore.Mvc.SerializableError.SerializableError(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> void
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.IsReusable.set -> void
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.ServiceFilterAttribute(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute.ServiceType.get -> System.Type!
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute<TFilter>
Microsoft.AspNetCore.Mvc.ServiceFilterAttribute<TFilter>.ServiceFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.SignInResult
Microsoft.AspNetCore.Mvc.SignInResult.AuthenticationScheme.get -> string?
Microsoft.AspNetCore.Mvc.SignInResult.AuthenticationScheme.set -> void
Microsoft.AspNetCore.Mvc.SignInResult.Principal.get -> System.Security.Claims.ClaimsPrincipal!
Microsoft.AspNetCore.Mvc.SignInResult.Principal.set -> void
Microsoft.AspNetCore.Mvc.SignInResult.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
Microsoft.AspNetCore.Mvc.SignInResult.Properties.set -> void
Microsoft.AspNetCore.Mvc.SignInResult.SignInResult(string? authenticationScheme, System.Security.Claims.ClaimsPrincipal! principal) -> void
Microsoft.AspNetCore.Mvc.SignInResult.SignInResult(string? authenticationScheme, System.Security.Claims.ClaimsPrincipal! principal, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.SignInResult.SignInResult(System.Security.Claims.ClaimsPrincipal! principal) -> void
Microsoft.AspNetCore.Mvc.SignInResult.SignInResult(System.Security.Claims.ClaimsPrincipal! principal, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.SignOutResult
Microsoft.AspNetCore.Mvc.SignOutResult.AuthenticationSchemes.get -> System.Collections.Generic.IList<string!>!
Microsoft.AspNetCore.Mvc.SignOutResult.AuthenticationSchemes.set -> void
Microsoft.AspNetCore.Mvc.SignOutResult.Properties.get -> Microsoft.AspNetCore.Authentication.AuthenticationProperties?
Microsoft.AspNetCore.Mvc.SignOutResult.Properties.set -> void
Microsoft.AspNetCore.Mvc.SignOutResult.SignOutResult() -> void
Microsoft.AspNetCore.Mvc.SignOutResult.SignOutResult(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> void
Microsoft.AspNetCore.Mvc.SignOutResult.SignOutResult(string! authenticationScheme) -> void
Microsoft.AspNetCore.Mvc.SignOutResult.SignOutResult(string! authenticationScheme, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.SignOutResult.SignOutResult(System.Collections.Generic.IList<string!>! authenticationSchemes) -> void
Microsoft.AspNetCore.Mvc.SignOutResult.SignOutResult(System.Collections.Generic.IList<string!>! authenticationSchemes, Microsoft.AspNetCore.Authentication.AuthenticationProperties? properties) -> void
Microsoft.AspNetCore.Mvc.StatusCodeResult
Microsoft.AspNetCore.Mvc.StatusCodeResult.StatusCode.get -> int
Microsoft.AspNetCore.Mvc.StatusCodeResult.StatusCodeResult(int statusCode) -> void
Microsoft.AspNetCore.Mvc.TypeFilterAttribute
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.Arguments.get -> object![]?
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.Arguments.set -> void
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.CreateInstance(System.IServiceProvider! serviceProvider) -> Microsoft.AspNetCore.Mvc.Filters.IFilterMetadata!
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.ImplementationType.get -> System.Type!
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.IsReusable.get -> bool
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.IsReusable.set -> void
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.Order.get -> int
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.Order.set -> void
Microsoft.AspNetCore.Mvc.TypeFilterAttribute.TypeFilterAttribute(System.Type! type) -> void
Microsoft.AspNetCore.Mvc.TypeFilterAttribute<TFilter>
Microsoft.AspNetCore.Mvc.TypeFilterAttribute<TFilter>.TypeFilterAttribute() -> void
Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult
Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult.UnauthorizedObjectResult(object? value) -> void
Microsoft.AspNetCore.Mvc.UnauthorizedResult
Microsoft.AspNetCore.Mvc.UnauthorizedResult.UnauthorizedResult() -> void
Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult
Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult.UnprocessableEntityObjectResult(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> void
Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult.UnprocessableEntityObjectResult(object? error) -> void
Microsoft.AspNetCore.Mvc.UnprocessableEntityResult
Microsoft.AspNetCore.Mvc.UnprocessableEntityResult.UnprocessableEntityResult() -> void
Microsoft.AspNetCore.Mvc.UnsupportedMediaTypeResult
Microsoft.AspNetCore.Mvc.UnsupportedMediaTypeResult.UnsupportedMediaTypeResult() -> void
Microsoft.AspNetCore.Mvc.UrlHelperExtensions
Microsoft.AspNetCore.Mvc.ValidationProblemDetails
Microsoft.AspNetCore.Mvc.ValidationProblemDetails.Errors.get -> System.Collections.Generic.IDictionary<string!, string![]!>!
Microsoft.AspNetCore.Mvc.ValidationProblemDetails.Errors.set -> void
Microsoft.AspNetCore.Mvc.ValidationProblemDetails.ValidationProblemDetails() -> void
Microsoft.AspNetCore.Mvc.ValidationProblemDetails.ValidationProblemDetails(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> void
Microsoft.AspNetCore.Mvc.ValidationProblemDetails.ValidationProblemDetails(System.Collections.Generic.IDictionary<string!, string![]!>! errors) -> void
Microsoft.AspNetCore.Mvc.ViewFeatures.IKeepTempDataResult
Microsoft.AspNetCore.Mvc.VirtualFileResult
Microsoft.AspNetCore.Mvc.VirtualFileResult.FileName.get -> string!
Microsoft.AspNetCore.Mvc.VirtualFileResult.FileName.set -> void
Microsoft.AspNetCore.Mvc.VirtualFileResult.FileProvider.get -> Microsoft.Extensions.FileProviders.IFileProvider?
Microsoft.AspNetCore.Mvc.VirtualFileResult.FileProvider.set -> void
Microsoft.AspNetCore.Mvc.VirtualFileResult.VirtualFileResult(string! fileName, Microsoft.Net.Http.Headers.MediaTypeHeaderValue! contentType) -> void
Microsoft.AspNetCore.Mvc.VirtualFileResult.VirtualFileResult(string! fileName, string! contentType) -> void
Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions
Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions
Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions
Microsoft.Extensions.DependencyInjection.IMvcBuilder
Microsoft.Extensions.DependencyInjection.IMvcBuilder.PartManager.get -> Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager!
Microsoft.Extensions.DependencyInjection.IMvcBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder
Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder.PartManager.get -> Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager!
Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions
Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions
Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions
override Microsoft.AspNetCore.Mvc.AcceptedAtActionResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.AcceptedResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.Name.get -> string!
override Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly! assembly) -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>!
override Microsoft.AspNetCore.Mvc.ApplicationParts.NullApplicationPartFactory.GetApplicationParts(System.Reflection.Assembly! assembly) -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>!
override Microsoft.AspNetCore.Mvc.ChallengeResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.ContentResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.DisplayName.get -> string?
override Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.DisplayName.set -> void
override Microsoft.AspNetCore.Mvc.CreatedAtActionResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.CreatedAtRouteResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.CreatedResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.EmptyResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.FileContentResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.FileStreamResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.ForbidResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality.ToString() -> string!
override Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext! context) -> bool
override Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
override Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector.SelectFormatter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext! context, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter!>! formatters, Microsoft.AspNetCore.Mvc.Formatters.MediaTypeCollection! contentTypes) -> Microsoft.AspNetCore.Mvc.Formatters.IOutputFormatter?
override Microsoft.AspNetCore.Mvc.Infrastructure.DefaultProblemDetailsFactory.CreateProblemDetails(Microsoft.AspNetCore.Http.HttpContext! httpContext, int? statusCode = null, string? title = null, string? type = null, string? detail = null, string? instance = null) -> Microsoft.AspNetCore.Mvc.ProblemDetails!
override Microsoft.AspNetCore.Mvc.Infrastructure.DefaultProblemDetailsFactory.CreateValidationProblemDetails(Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelStateDictionary, int? statusCode = null, string? title = null, string? type = null, string? detail = null, string? instance = null) -> Microsoft.AspNetCore.Mvc.ValidationProblemDetails!
override Microsoft.AspNetCore.Mvc.JsonResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.LocalRedirectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.CanCreateInstance(System.Type! targetType) -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.ConvertToCollectionType(System.Type! targetType, System.Collections.Generic.IEnumerable<TElement?>! collection) -> object?
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.CopyToModel(object! target, System.Collections.Generic.IEnumerable<TElement?>! sourceCollection) -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinder<TElement>.CreateEmptyCollection(System.Type! targetType) -> object!
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.CanCreateInstance(System.Type! targetType) -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.ConvertToCollectionType(System.Type! targetType, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue?>>! collection) -> object?
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinder<TKey, TValue>.CreateEmptyCollection(System.Type! targetType) -> object!
override Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinder.CheckModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext, Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult valueProviderResult, object? model) -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.InsertItem(int index, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! item) -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.SetItem(int index, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! item) -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ActionContext.get -> Microsoft.AspNetCore.Mvc.ActionContext!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ActionContext.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.BinderModelName.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.BinderModelName.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource?
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.BindingSource.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.EnterNestedScope() -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.EnterNestedScope(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! modelMetadata, string! fieldName, string! modelName, object? model) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext.NestedScope
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ExitNestedScope() -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.FieldName.get -> string!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.FieldName.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.IsTopLevelObject.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.IsTopLevelObject.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.Model.get -> object?
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.Model.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ModelMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ModelMetadata.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ModelName.get -> string!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ModelName.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ModelState.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ModelState.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.PropertyFilter.get -> System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!, bool>?
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.PropertyFilter.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.Result.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.Result.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ValidationState.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ValidationState.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ValueProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider!
override Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.ValueProvider.set -> void
override Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.ContainsPrefix(string! prefix) -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
override Microsoft.AspNetCore.Mvc.ModelBinding.JQueryFormValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
override Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.ContainsPrefix(string! prefix) -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.JQueryValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.AttemptedValueIsInvalidAccessor.get -> System.Func<string!, string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.MissingBindRequiredValueAccessor.get -> System.Func<string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.MissingKeyOrValueAccessor.get -> System.Func<string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.MissingRequestBodyRequiredValueAccessor.get -> System.Func<string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.NonPropertyAttemptedValueIsInvalidAccessor.get -> System.Func<string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.NonPropertyUnknownValueIsInvalidAccessor.get -> System.Func<string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.NonPropertyValueMustBeANumberAccessor.get -> System.Func<string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.UnknownValueIsInvalidAccessor.get -> System.Func<string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.ValueIsInvalidAccessor.get -> System.Func<string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.ValueMustBeANumberAccessor.get -> System.Func<string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelBindingMessageProvider.ValueMustNotBeNullAccessor.get -> System.Func<string!, string!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.AdditionalValues.get -> System.Collections.Generic.IReadOnlyDictionary<object!, object!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BinderModelName.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BinderType.get -> System.Type?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BoundConstructor.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BoundConstructorInvoker.get -> System.Func<object?[]!, object!>?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.BoundConstructorParameters.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!>?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ContainerMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ConvertEmptyStringToNull.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.DataTypeName.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.Description.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.DisplayFormatString.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.DisplayName.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.EditFormatString.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ElementMetadata.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.EnumGroupedDisplayNamesAndValues.get -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<Microsoft.AspNetCore.Mvc.ModelBinding.EnumGroupAndName, string!>>?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.EnumNamesAndValues.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.GetMetadataForProperties(System.Type! modelType) -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.GetMetadataForType(System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.HasNonDefaultEditFormat.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.HasValidators.get -> bool?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.HideSurroundingHtml.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.HtmlEncode.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.IsBindingAllowed.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.IsBindingRequired.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.IsEnum.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.IsFlagsEnum.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.IsReadOnly.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.IsRequired.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ModelBindingMessageProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelBindingMessageProvider!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.NullDisplayText.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.Order.get -> int
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.Placeholder.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.Properties.get -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelPropertyCollection!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.PropertyFilterProvider.get -> Microsoft.AspNetCore.Mvc.ModelBinding.IPropertyFilterProvider?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.PropertyGetter.get -> System.Func<object!, object?>?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.PropertySetter.get -> System.Action<object!, object?>?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.PropertyValidationFilter.get -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IPropertyValidationFilter?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ShowForDisplay.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ShowForEdit.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.SimpleDisplayProperty.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.TemplateHint.get -> string?
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ValidateChildren.get -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadata.ValidatorMetadata.get -> System.Collections.Generic.IReadOnlyList<object!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForConstructor(System.Reflection.ConstructorInfo! constructorInfo, System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForParameter(System.Reflection.ParameterInfo! parameter) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForParameter(System.Reflection.ParameterInfo! parameter, System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForProperties(System.Type! modelType) -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!>!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForProperty(System.Reflection.PropertyInfo! propertyInfo, System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.GetMetadataForType(System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
override Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.ContainsPrefix(string! prefix) -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
override Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.ContainsPrefix(string! key) -> bool
override Microsoft.AspNetCore.Mvc.ModelBinding.RouteValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
override Microsoft.AspNetCore.Mvc.ObjectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.PhysicalFileResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.RedirectResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.RedirectToActionResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.RedirectToPageResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.RedirectToRouteResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Routing.UrlHelper.Action(Microsoft.AspNetCore.Mvc.Routing.UrlActionContext! actionContext) -> string?
override Microsoft.AspNetCore.Mvc.Routing.UrlHelper.RouteUrl(Microsoft.AspNetCore.Mvc.Routing.UrlRouteContext! routeContext) -> string?
override Microsoft.AspNetCore.Mvc.SignInResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.SignOutResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.StatusCodeResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
override Microsoft.AspNetCore.Mvc.VirtualFileResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
override sealed Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
override sealed Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.Text.Encoding! selectedEncoding) -> System.Threading.Tasks.Task!
override sealed Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Threading.Tasks.Task!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapAreaControllerRoute(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! name, string! areaName, string! pattern, object? defaults = null, object? constraints = null, object? dataTokens = null) -> Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapControllerRoute(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! name, string! pattern, object? defaults = null, object? constraints = null, object? dataTokens = null) -> Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapControllers(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints) -> Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDefaultControllerRoute(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints) -> Microsoft.AspNetCore.Builder.ControllerActionEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDynamicControllerRoute<TTransformer>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! pattern) -> void
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDynamicControllerRoute<TTransformer>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! pattern, object! state, int order) -> void
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDynamicControllerRoute<TTransformer>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! pattern, object? state) -> void
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToAreaController(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! action, string! controller, string! area) -> Microsoft.AspNetCore.Builder.IEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToAreaController(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! pattern, string! action, string! controller, string! area) -> Microsoft.AspNetCore.Builder.IEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToController(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! action, string! controller) -> Microsoft.AspNetCore.Builder.IEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapFallbackToController(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints, string! pattern, string! action, string! controller) -> Microsoft.AspNetCore.Builder.IEndpointConventionBuilder!
static Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app, System.Action<Microsoft.AspNetCore.Routing.IRouteBuilder!>! configureRoutes) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvcWithDefaultRoute(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(this Microsoft.AspNetCore.Routing.IRouteBuilder! routeBuilder, string! name, string! areaName, string? template) -> Microsoft.AspNetCore.Routing.IRouteBuilder!
static Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(this Microsoft.AspNetCore.Routing.IRouteBuilder! routeBuilder, string! name, string! areaName, string? template, object? defaults) -> Microsoft.AspNetCore.Routing.IRouteBuilder!
static Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(this Microsoft.AspNetCore.Routing.IRouteBuilder! routeBuilder, string! name, string! areaName, string? template, object? defaults, object? constraints) -> Microsoft.AspNetCore.Routing.IRouteBuilder!
static Microsoft.AspNetCore.Builder.MvcAreaRouteBuilderExtensions.MapAreaRoute(this Microsoft.AspNetCore.Routing.IRouteBuilder! routeBuilder, string! name, string! areaName, string? template, object? defaults, object? constraints, object? dataTokens) -> Microsoft.AspNetCore.Routing.IRouteBuilder!
static Microsoft.AspNetCore.Mvc.ActionResult<TValue>.implicit operator Microsoft.AspNetCore.Mvc.ActionResult<TValue>!(Microsoft.AspNetCore.Mvc.ActionResult! result) -> Microsoft.AspNetCore.Mvc.ActionResult<TValue>!
static Microsoft.AspNetCore.Mvc.ActionResult<TValue>.implicit operator Microsoft.AspNetCore.Mvc.ActionResult<TValue>!(TValue value) -> Microsoft.AspNetCore.Mvc.ActionResult<TValue>!
static Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.CombineAttributeRouteModel(Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel? left, Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel? right) -> Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel?
static Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.CombineTemplates(string? prefix, string? template) -> string?
static Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.IsOverridePattern(string? template) -> bool
static Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.ReplaceTokens(string! template, System.Collections.Generic.IDictionary<string!, string?>! values) -> string!
static Microsoft.AspNetCore.Mvc.ApplicationModels.AttributeRouteModel.ReplaceTokens(string! template, System.Collections.Generic.IDictionary<string!, string?>! values, Microsoft.AspNetCore.Routing.IOutboundParameterTransformer? routeTokenTransformer) -> string!
static Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory.GetApplicationPartFactory(System.Reflection.Assembly! assembly) -> Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartFactory!
static Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.GetDefaultApplicationParts(System.Reflection.Assembly! assembly) -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart!>!
static Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory.Instance.get -> Microsoft.AspNetCore.Mvc.ApplicationParts.DefaultApplicationPartFactory!
static Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(System.Reflection.Assembly! assembly, bool throwOnError) -> System.Collections.Generic.IReadOnlyList<System.Reflection.Assembly!>!
static Microsoft.AspNetCore.Mvc.ControllerBase.Empty.get -> Microsoft.AspNetCore.Mvc.EmptyResult!
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Create(object! model) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Delete(object! id) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Edit(object! id, object! model) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Find(object! id) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Get(object! id) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Post(object! model) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Put(object! id, object! model) -> void
static Microsoft.AspNetCore.Mvc.DefaultApiConventions.Update(object! id, object! model) -> void
static Microsoft.AspNetCore.Mvc.Formatters.MediaType.CreateMediaTypeSegmentWithQuality(string! mediaType, int start) -> Microsoft.AspNetCore.Mvc.Formatters.MediaTypeSegmentWithQuality
static Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetEncoding(Microsoft.Extensions.Primitives.StringSegment mediaType) -> System.Text.Encoding?
static Microsoft.AspNetCore.Mvc.Formatters.MediaType.GetEncoding(string! mediaType) -> System.Text.Encoding?
static Microsoft.AspNetCore.Mvc.Formatters.MediaType.ReplaceEncoding(Microsoft.Extensions.Primitives.StringSegment mediaType, System.Text.Encoding! encoding) -> string!
static Microsoft.AspNetCore.Mvc.Formatters.MediaType.ReplaceEncoding(string! mediaType, System.Text.Encoding! encoding) -> string!
static Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.CreateLogger<T>(Microsoft.Extensions.Logging.ILoggerFactory! factory) -> Microsoft.Extensions.Logging.ILogger!
static Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.WriteFileAsync(Microsoft.AspNetCore.Http.HttpContext! context, System.IO.Stream! fileStream, Microsoft.Net.Http.Headers.RangeItemHeaderValue? range, long rangeLength) -> System.Threading.Tasks.Task!
static Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.CreateAsync(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory!>! factories) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider!>!
static Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.CreateAsync(Microsoft.AspNetCore.Mvc.ControllerContext! controllerContext) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider!>!
static Microsoft.AspNetCore.Mvc.ModelBinding.DefaultModelBindingContext.CreateBindingContext(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, Microsoft.AspNetCore.Mvc.ModelBinding.BindingInfo? bindingInfo, string! modelName) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext!
static Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider!>! list, System.Type! type) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.MetadataDetailsProviderExtensions.RemoveType<TMetadataDetailsProvider>(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.IMetadataDetailsProvider!>! list) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForParameter(System.Reflection.ParameterInfo! parameterInfo) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForParameter(System.Reflection.ParameterInfo! parameterInfo, System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForProperty(System.Type! containerType, System.Reflection.PropertyInfo! property, System.Type! modelType) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForProperty(System.Type! type, System.Reflection.PropertyInfo! property) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes.GetAttributesForType(System.Type! type) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelAttributes!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider!>! list, System.Type! type) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderProviderExtensions.RemoveType<TModelBinderProvider>(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinderProvider!>! list) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadataProviderExtensions.GetMetadataForProperty(this Microsoft.AspNetCore.Mvc.ModelBinding.IModelMetadataProvider! provider, System.Type! containerType, string! propertyName) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreateIndexModelName(string! parentName, int index) -> string!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreateIndexModelName(string! parentName, string! index) -> string!
static Microsoft.AspNetCore.Mvc.ModelBinding.ModelNames.CreatePropertyModelName(string? prefix, string? propertyName) -> string!
static Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!>! list, System.Type! type) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ModelValidatorProviderExtensions.RemoveType<TModelValidatorProvider>(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IModelValidatorProvider!>! list) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.StateManager.Recurse(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor! visitor, string! key, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, object? model, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy! strategy) -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.StateManager
static Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory!>! list, System.Type! type) -> void
static Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderFactoryExtensions.RemoveType<TValueProviderFactory>(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory!>! list) -> void
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action, object? values) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action, string? controller) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action, string? controller, object? values) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action, string? controller, object? values, string? protocol) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action, string? controller, object? values, string? protocol, string? host) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Action(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action, string? controller, object? values, string? protocol, string? host, string? fragment) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.ActionLink(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? action = null, string? controller = null, object? values = null, string? protocol = null, string? host = null, string? fragment = null) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName, object? values) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName, string? pageHandler) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName, string? pageHandler, object? values) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName, string? pageHandler, object? values, string? protocol) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName, string? pageHandler, object? values, string? protocol, string? host) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.Page(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName, string? pageHandler, object? values, string? protocol, string? host, string? fragment) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.PageLink(this Microsoft.AspNetCore.Mvc.IUrlHelper! urlHelper, string? pageName = null, string? pageHandler = null, object? values = null, string? protocol = null, string? host = null, string? fragment = null) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, object? values) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? routeName) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? routeName, object? values) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? routeName, object? values, string? protocol) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? routeName, object? values, string? protocol, string? host) -> string?
static Microsoft.AspNetCore.Mvc.UrlHelperExtensions.RouteUrl(this Microsoft.AspNetCore.Mvc.IUrlHelper! helper, string? routeName, object? values, string? protocol, string? host, string? fragment) -> string?
static Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetPathByAction(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, Microsoft.AspNetCore.Http.HttpContext! httpContext, string? action = null, string? controller = null, object? values = null, Microsoft.AspNetCore.Http.PathString? pathBase = null, Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetPathByAction(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, string! action, string! controller, object? values = null, Microsoft.AspNetCore.Http.PathString pathBase = default(Microsoft.AspNetCore.Http.PathString), Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetUriByAction(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, Microsoft.AspNetCore.Http.HttpContext! httpContext, string? action = null, string? controller = null, object? values = null, string? scheme = null, Microsoft.AspNetCore.Http.HostString? host = null, Microsoft.AspNetCore.Http.PathString? pathBase = null, Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.ControllerLinkGeneratorExtensions.GetUriByAction(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, string! action, string! controller, object? values, string! scheme, Microsoft.AspNetCore.Http.HostString host, Microsoft.AspNetCore.Http.PathString pathBase = default(Microsoft.AspNetCore.Http.PathString), Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetPathByPage(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, Microsoft.AspNetCore.Http.HttpContext! httpContext, string? page = null, string? handler = null, object? values = null, Microsoft.AspNetCore.Http.PathString? pathBase = null, Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetPathByPage(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, string! page, string? handler = null, object? values = null, Microsoft.AspNetCore.Http.PathString pathBase = default(Microsoft.AspNetCore.Http.PathString), Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetUriByPage(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, Microsoft.AspNetCore.Http.HttpContext! httpContext, string? page = null, string? handler = null, object? values = null, string? scheme = null, Microsoft.AspNetCore.Http.HostString? host = null, Microsoft.AspNetCore.Http.PathString? pathBase = null, Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.AspNetCore.Routing.PageLinkGeneratorExtensions.GetUriByPage(this Microsoft.AspNetCore.Routing.LinkGenerator! generator, string! page, string? handler, object? values, string! scheme, Microsoft.AspNetCore.Http.HostString host, Microsoft.AspNetCore.Http.PathString pathBase = default(Microsoft.AspNetCore.Http.PathString), Microsoft.AspNetCore.Http.FragmentString fragment = default(Microsoft.AspNetCore.Http.FragmentString), Microsoft.AspNetCore.Routing.LinkOptions? options = null) -> string?
static Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>! conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IActionModelConvention! actionModelConvention) -> void
static Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>! conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IControllerModelConvention! controllerModelConvention) -> void
static Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>! conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelBaseConvention! parameterModelConvention) -> void
static Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.Add(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>! conventions, Microsoft.AspNetCore.Mvc.ApplicationModels.IParameterModelConvention! parameterModelConvention) -> void
static Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>! list, System.Type! type) -> void
static Microsoft.Extensions.DependencyInjection.ApplicationModelConventionExtensions.RemoveType<TApplicationModelConvention>(this System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ApplicationModels.IApplicationModelConvention!>! list) -> void
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddApplicationPart(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Reflection.Assembly! assembly) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddControllersAsServices(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddFormatterMappings(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddJsonOptions(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.JsonOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.AddMvcOptions(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApiBehaviorOptions(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.ConfigureApplicationPartManager(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcBuilderExtensions.SetCompatibilityVersion(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, Microsoft.AspNetCore.Mvc.CompatibilityVersion version) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddApplicationPart(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Reflection.Assembly! assembly) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddAuthorization(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Authorization.AuthorizationOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddControllersAsServices(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddFormatterMappings(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.FormatterMappings!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddJsonOptions(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.JsonOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.AddMvcOptions(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApiBehaviorOptions(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.ApiBehaviorOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.ConfigureApplicationPartManager(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreMvcCoreBuilderExtensions.SetCompatibilityVersion(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, Microsoft.AspNetCore.Mvc.CompatibilityVersion version) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Mvc.MvcOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static readonly Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.HttpMethodConstraintOrder -> int
static readonly Microsoft.AspNetCore.Mvc.ConsumesAttribute.ConsumesActionConstraintOrder -> int
static readonly Microsoft.AspNetCore.Mvc.Filters.FilterScope.Action -> int
static readonly Microsoft.AspNetCore.Mvc.Filters.FilterScope.Controller -> int
static readonly Microsoft.AspNetCore.Mvc.Filters.FilterScope.First -> int
static readonly Microsoft.AspNetCore.Mvc.Filters.FilterScope.Global -> int
static readonly Microsoft.AspNetCore.Mvc.Filters.FilterScope.Last -> int
static readonly Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.UTF16EncodingLittleEndian -> System.Text.Encoding!
static readonly Microsoft.AspNetCore.Mvc.Formatters.TextInputFormatter.UTF8EncodingWithoutBOM -> System.Text.Encoding!
virtual Microsoft.AspNetCore.Mvc.ActionConstraints.HttpMethodActionConstraint.Accept(Microsoft.AspNetCore.Mvc.ActionConstraints.ActionConstraintContext! context) -> bool
virtual Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResult(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResultAsync(Microsoft.AspNetCore.Mvc.ActionContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.ApiConventionApplicationModelConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.ApiVisibilityConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.ClientErrorResultFilterConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.ConsumesConstraintForFormFileParameterConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.InferParameterBindingInfoConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.InvalidModelStateFilterConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.ApplicationModels.RouteTokenTransformerConvention.ShouldApply(Microsoft.AspNetCore.Mvc.ApplicationModels.ActionModel! action) -> bool
virtual Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.BindPropertyAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource?
virtual Microsoft.AspNetCore.Mvc.BindPropertyAttribute.BindingSource.set -> void
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Accepted() -> Microsoft.AspNetCore.Mvc.AcceptedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(object? value) -> Microsoft.AspNetCore.Mvc.AcceptedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(string? uri) -> Microsoft.AspNetCore.Mvc.AcceptedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(string? uri, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri! uri) -> Microsoft.AspNetCore.Mvc.AcceptedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Accepted(System.Uri! uri, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(string? actionName) -> Microsoft.AspNetCore.Mvc.AcceptedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(string? actionName, object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(string? actionName, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(string? actionName, string? controllerName) -> Microsoft.AspNetCore.Mvc.AcceptedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(string? actionName, string? controllerName, object? routeValues) -> Microsoft.AspNetCore.Mvc.AcceptedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtAction(string? actionName, string? controllerName, object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(object? routeValues) -> Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(string? routeName) -> Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(string? routeName, object? routeValues) -> Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.AcceptedAtRoute(string? routeName, object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.AcceptedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest() -> Microsoft.AspNetCore.Mvc.BadRequestResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> Microsoft.AspNetCore.Mvc.BadRequestObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.BadRequest(object? error) -> Microsoft.AspNetCore.Mvc.BadRequestObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Challenge() -> Microsoft.AspNetCore.Mvc.ChallengeResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> Microsoft.AspNetCore.Mvc.ChallengeResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties, params string![]! authenticationSchemes) -> Microsoft.AspNetCore.Mvc.ChallengeResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Challenge(params string![]! authenticationSchemes) -> Microsoft.AspNetCore.Mvc.ChallengeResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Conflict() -> Microsoft.AspNetCore.Mvc.ConflictResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> Microsoft.AspNetCore.Mvc.ConflictObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Conflict(object? error) -> Microsoft.AspNetCore.Mvc.ConflictObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Content(string! content) -> Microsoft.AspNetCore.Mvc.ContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Content(string! content, Microsoft.Net.Http.Headers.MediaTypeHeaderValue? contentType) -> Microsoft.AspNetCore.Mvc.ContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Content(string! content, string! contentType) -> Microsoft.AspNetCore.Mvc.ContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Content(string! content, string! contentType, System.Text.Encoding! contentEncoding) -> Microsoft.AspNetCore.Mvc.ContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Created() -> Microsoft.AspNetCore.Mvc.CreatedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Created(string? uri, object? value) -> Microsoft.AspNetCore.Mvc.CreatedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Created(System.Uri? uri, object? value) -> Microsoft.AspNetCore.Mvc.CreatedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(string? actionName, object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.CreatedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(string? actionName, object? value) -> Microsoft.AspNetCore.Mvc.CreatedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtAction(string? actionName, string? controllerName, object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.CreatedAtActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.CreatedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(string? routeName, object? routeValues, object? value) -> Microsoft.AspNetCore.Mvc.CreatedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.CreatedAtRoute(string? routeName, object? value) -> Microsoft.AspNetCore.Mvc.CreatedAtRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, string? fileDownloadName) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, string? fileDownloadName, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(byte[]! fileContents, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, string? fileDownloadName) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, string? fileDownloadName, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(string! virtualPath, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.VirtualFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, string? fileDownloadName) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, string? fileDownloadName, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.File(System.IO.Stream! fileStream, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.FileStreamResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Forbid() -> Microsoft.AspNetCore.Mvc.ForbidResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> Microsoft.AspNetCore.Mvc.ForbidResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties, params string![]! authenticationSchemes) -> Microsoft.AspNetCore.Mvc.ForbidResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Forbid(params string![]! authenticationSchemes) -> Microsoft.AspNetCore.Mvc.ForbidResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirect(string! localUrl) -> Microsoft.AspNetCore.Mvc.LocalRedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanent(string! localUrl) -> Microsoft.AspNetCore.Mvc.LocalRedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPermanentPreserveMethod(string! localUrl) -> Microsoft.AspNetCore.Mvc.LocalRedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.LocalRedirectPreserveMethod(string! localUrl) -> Microsoft.AspNetCore.Mvc.LocalRedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.NoContent() -> Microsoft.AspNetCore.Mvc.NoContentResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.NotFound() -> Microsoft.AspNetCore.Mvc.NotFoundResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.NotFound(object? value) -> Microsoft.AspNetCore.Mvc.NotFoundObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Ok() -> Microsoft.AspNetCore.Mvc.OkResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Ok(object? value) -> Microsoft.AspNetCore.Mvc.OkObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, string? fileDownloadName) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, string? fileDownloadName, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, string? fileDownloadName, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.PhysicalFile(string! physicalPath, string! contentType, System.DateTimeOffset? lastModified, Microsoft.Net.Http.Headers.EntityTagHeaderValue! entityTag, bool enableRangeProcessing) -> Microsoft.AspNetCore.Mvc.PhysicalFileResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Problem(string? detail = null, string? instance = null, int? statusCode = null, string? title = null, string? type = null, System.Collections.Generic.IDictionary<string!, object?>? extensions = null) -> Microsoft.AspNetCore.Mvc.ObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Problem(string? detail, string? instance, int? statusCode, string? title, string? type) -> Microsoft.AspNetCore.Mvc.ObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Redirect(string! url) -> Microsoft.AspNetCore.Mvc.RedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanent(string! url) -> Microsoft.AspNetCore.Mvc.RedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPermanentPreserveMethod(string! url) -> Microsoft.AspNetCore.Mvc.RedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectPreserveMethod(string! url) -> Microsoft.AspNetCore.Mvc.RedirectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction() -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(string? actionName) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(string? actionName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(string? actionName, string? controllerName) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(string? actionName, string? controllerName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(string? actionName, string? controllerName, object? routeValues, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToAction(string? actionName, string? controllerName, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(string? actionName) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(string? actionName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(string? actionName, string? controllerName) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(string? actionName, string? controllerName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(string? actionName, string? controllerName, object? routeValues, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanent(string? actionName, string? controllerName, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPermanentPreserveMethod(string? actionName = null, string? controllerName = null, object? routeValues = null, string? fragment = null) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToActionPreserveMethod(string? actionName = null, string? controllerName = null, object? routeValues = null, string? fragment = null) -> Microsoft.AspNetCore.Mvc.RedirectToActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(string! pageName) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(string! pageName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(string! pageName, string? pageHandler) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(string! pageName, string? pageHandler, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(string! pageName, string? pageHandler, object? routeValues, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPage(string! pageName, string? pageHandler, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(string! pageName) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(string! pageName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(string! pageName, string? pageHandler) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(string! pageName, string? pageHandler, object? routeValues, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanent(string! pageName, string? pageHandler, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePermanentPreserveMethod(string! pageName, string? pageHandler = null, object? routeValues = null, string? fragment = null) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToPagePreserveMethod(string! pageName, string? pageHandler = null, object? routeValues = null, string? fragment = null) -> Microsoft.AspNetCore.Mvc.RedirectToPageResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(string? routeName) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(string? routeName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(string? routeName, object? routeValues, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoute(string? routeName, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(string? routeName) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(string? routeName, object? routeValues) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(string? routeName, object? routeValues, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanent(string? routeName, string? fragment) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePermanentPreserveMethod(string? routeName = null, object? routeValues = null, string? fragment = null) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.RedirectToRoutePreserveMethod(string? routeName = null, object? routeValues = null, string? fragment = null) -> Microsoft.AspNetCore.Mvc.RedirectToRouteResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal! principal) -> Microsoft.AspNetCore.Mvc.SignInResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal! principal, Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> Microsoft.AspNetCore.Mvc.SignInResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal! principal, Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties, string! authenticationScheme) -> Microsoft.AspNetCore.Mvc.SignInResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignIn(System.Security.Claims.ClaimsPrincipal! principal, string! authenticationScheme) -> Microsoft.AspNetCore.Mvc.SignInResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignOut() -> Microsoft.AspNetCore.Mvc.SignOutResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties) -> Microsoft.AspNetCore.Mvc.SignOutResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(Microsoft.AspNetCore.Authentication.AuthenticationProperties! properties, params string![]! authenticationSchemes) -> Microsoft.AspNetCore.Mvc.SignOutResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.SignOut(params string![]! authenticationSchemes) -> Microsoft.AspNetCore.Mvc.SignOutResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(int statusCode) -> Microsoft.AspNetCore.Mvc.StatusCodeResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.StatusCode(int statusCode, object? value) -> Microsoft.AspNetCore.Mvc.ObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync(object! model, System.Type! modelType, string! prefix) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model, string! prefix) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.TryUpdateModelAsync<TModel>(TModel! model, string! prefix, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(object! model) -> bool
virtual Microsoft.AspNetCore.Mvc.ControllerBase.TryValidateModel(object! model, string? prefix) -> bool
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized() -> Microsoft.AspNetCore.Mvc.UnauthorizedResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.Unauthorized(object? value) -> Microsoft.AspNetCore.Mvc.UnauthorizedObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity() -> Microsoft.AspNetCore.Mvc.UnprocessableEntityResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.UnprocessableEntity(object? error) -> Microsoft.AspNetCore.Mvc.UnprocessableEntityObjectResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem() -> Microsoft.AspNetCore.Mvc.ActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelStateDictionary) -> Microsoft.AspNetCore.Mvc.ActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(Microsoft.AspNetCore.Mvc.ValidationProblemDetails! descriptor) -> Microsoft.AspNetCore.Mvc.ActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(string? detail = null, string? instance = null, int? statusCode = null, string? title = null, string? type = null, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary? modelStateDictionary = null, System.Collections.Generic.IDictionary<string!, object?>? extensions = null) -> Microsoft.AspNetCore.Mvc.ActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerBase.ValidationProblem(string? detail, string? instance, int? statusCode, string? title, string? type, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary? modelStateDictionary) -> Microsoft.AspNetCore.Mvc.ActionResult!
virtual Microsoft.AspNetCore.Mvc.ControllerContext.ValueProviderFactories.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.ModelBinding.IValueProviderFactory!>!
virtual Microsoft.AspNetCore.Mvc.ControllerContext.ValueProviderFactories.set -> void
virtual Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ActionName.get -> string!
virtual Microsoft.AspNetCore.Mvc.Controllers.ControllerActionDescriptor.ActionName.set -> void
virtual Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.IsController(System.Reflection.TypeInfo! typeInfo) -> bool
virtual Microsoft.AspNetCore.Mvc.Controllers.ServiceBasedControllerActivator.Release(Microsoft.AspNetCore.Mvc.ControllerContext! context, object! controller) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecuted(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext! context, Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate! next) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ActionFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! context, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate! next) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ExceptionFilterAttribute.OnExceptionAsync(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Filters.ResultFilterAttribute.OnResultExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! context, Microsoft.AspNetCore.Mvc.Filters.ResultExecutionDelegate! next) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Formatters.FormatFilter.GetFormat(Microsoft.AspNetCore.Mvc.ActionContext! context) -> string?
virtual Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> bool
virtual Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.CanReadType(System.Type! type) -> bool
virtual Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetDefaultValueForType(System.Type! modelType) -> object?
virtual Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.GetSupportedContentTypes(string! contentType, System.Type! objectType) -> System.Collections.Generic.IReadOnlyList<string!>?
virtual Microsoft.AspNetCore.Mvc.Formatters.InputFormatter.ReadAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
virtual Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteResult(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterCanWriteContext! context) -> bool
virtual Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.CanWriteType(System.Type? type) -> bool
virtual Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.GetSupportedContentTypes(string! contentType, System.Type! objectType) -> System.Collections.Generic.IReadOnlyList<string!>?
virtual Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Formatters.OutputFormatter.WriteResponseHeaders(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.SelectCharacterEncoding(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> System.Text.Encoding!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.ConfigureCompatibilityOptions<TOptions>.PostConfigure(string? name, TOptions! options) -> void
virtual Microsoft.AspNetCore.Mvc.Infrastructure.ContentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.ContentResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.FileContentResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.FileContentResultExecutor.WriteFileAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.FileContentResult! result, Microsoft.Net.Http.Headers.RangeItemHeaderValue? range, long rangeLength) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.FileResultExecutorBase.SetHeadersAndLog(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.FileResult! result, long? fileLength, bool enableRangeProcessing, System.DateTimeOffset? lastModified = null, Microsoft.Net.Http.Headers.EntityTagHeaderValue? etag = null) -> (Microsoft.Net.Http.Headers.RangeItemHeaderValue? range, long rangeLength, bool serveBody)
virtual Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.FileStreamResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.FileStreamResultExecutor.WriteFileAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.FileStreamResult! result, Microsoft.Net.Http.Headers.RangeItemHeaderValue? range, long rangeLength) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.LocalRedirectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.LocalRedirectResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.ObjectResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.PhysicalFileResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.GetFileInfo(string! path) -> Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.FileMetadata!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.GetFileStream(string! path) -> System.IO.Stream!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.PhysicalFileResultExecutor.WriteFileAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.PhysicalFileResult! result, Microsoft.Net.Http.Headers.RangeItemHeaderValue? range, long rangeLength) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.RedirectResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.RedirectResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToActionResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.RedirectToActionResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToPageResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.RedirectToPageResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.RedirectToRouteResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.RedirectToRouteResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.VirtualFileResult! result) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor.GetFileStream(Microsoft.Extensions.FileProviders.IFileInfo! fileInfo) -> System.IO.Stream!
virtual Microsoft.AspNetCore.Mvc.Infrastructure.VirtualFileResultExecutor.WriteFileAsync(Microsoft.AspNetCore.Mvc.ActionContext! context, Microsoft.AspNetCore.Mvc.VirtualFileResult! result, Microsoft.Extensions.FileProviders.IFileInfo! fileInfo, Microsoft.Net.Http.Headers.RangeItemHeaderValue? range, long rangeLength) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.ModelBinderAttribute.BindingSource.get -> Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource?
virtual Microsoft.AspNetCore.Mvc.ModelBinderAttribute.BindingSource.set -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.BindModelAsync(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CanCreateInstance(System.Type! targetType) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.ConvertToCollectionType(System.Type! targetType, System.Collections.Generic.IEnumerable<TElement?>! collection) -> object?
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CopyToModel(object! target, System.Collections.Generic.IEnumerable<TElement?>! sourceCollection) -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinder<TElement>.CreateEmptyCollection(System.Type! targetType) -> object!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinder.CheckModel(Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingContext! bindingContext, Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult valueProviderResult, object? model) -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.BindingSourceValueProvider.Filter(Microsoft.AspNetCore.Mvc.ModelBinding.BindingSource! bindingSource) -> Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider?
virtual Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.ContainsPrefix(string! prefix) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.GetKeysFromPrefix(string! prefix) -> System.Collections.Generic.IDictionary<string!, string!>!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.GetValue(string! key) -> Microsoft.AspNetCore.Mvc.ModelBinding.ValueProviderResult
virtual Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider<TModel>.Prefix.get -> string!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider<TModel>.PropertyFilter.get -> System.Func<Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!, bool>!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.DefaultPropertyFilterProvider<TModel>.PropertyIncludeExpressions.get -> System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression<System.Func<TModel!, object?>!>!>?
virtual Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProvider.GetKeysFromPrefix(string! prefix) -> System.Collections.Generic.IDictionary<string!, string!>!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.CreateModelMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails! entry) -> Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.CreateParameterDetails(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key) -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.CreatePropertyDetails(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key) -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails![]!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultModelMetadataProvider.CreateTypeDetails(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.ModelMetadataIdentity key) -> Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DefaultMetadataDetails!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary? validationState, string? prefix, object? model) -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary? validationState, string? prefix, object? model, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata) -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.ObjectModelValidator.Validate(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateDictionary? validationState, string? prefix, object? model, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, object? container) -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! modelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider, Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor! parameter, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, object? value) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult>!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.ParameterBinder.BindModelAsync(Microsoft.AspNetCore.Mvc.ActionContext! actionContext, Microsoft.AspNetCore.Mvc.ModelBinding.IModelBinder! modelBinder, Microsoft.AspNetCore.Mvc.ModelBinding.IValueProvider! valueProvider, Microsoft.AspNetCore.Mvc.Abstractions.ParameterDescriptor! parameter, Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, object? value, object? container) -> System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Mvc.ModelBinding.ModelBindingResult>
virtual Microsoft.AspNetCore.Mvc.ModelBinding.QueryStringValueProvider.GetKeysFromPrefix(string! prefix) -> System.Collections.Generic.IDictionary<string!, string!>!
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.GetValidationEntry(object? model) -> Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationStateEntry?
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.SuppressValidation(string! key) -> void
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata? metadata, string? key, object? model, bool alwaysValidateAtTopLevel) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Validate(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata? metadata, string? key, object? model, bool alwaysValidateAtTopLevel, object? container) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.ValidateNode() -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.Visit(Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata! metadata, string? key, object? model) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitChildren(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy! strategy) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitComplexType(Microsoft.AspNetCore.Mvc.ModelBinding.Validation.IValidationStrategy! defaultStrategy) -> bool
virtual Microsoft.AspNetCore.Mvc.ModelBinding.Validation.ValidationVisitor.VisitSimpleType() -> bool
virtual Microsoft.AspNetCore.Mvc.ObjectResult.OnFormatting(Microsoft.AspNetCore.Mvc.ActionContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.ProducesAttribute.OnResultExecuted(Microsoft.AspNetCore.Mvc.Filters.ResultExecutedContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.ProducesAttribute.OnResultExecuting(Microsoft.AspNetCore.Mvc.Filters.ResultExecutingContext! context) -> void
virtual Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext! filterContext) -> void
virtual Microsoft.AspNetCore.Mvc.RequireHttpsAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext! filterContext) -> void
virtual Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary! values, System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint!>! endpoints) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Http.Endpoint!>!>
virtual Microsoft.AspNetCore.Mvc.Routing.UrlHelper.GenerateUrl(string? protocol, string? host, Microsoft.AspNetCore.Routing.VirtualPathData? pathData, string? fragment) -> string?
virtual Microsoft.AspNetCore.Mvc.Routing.UrlHelper.GetVirtualPathData(string? routeName, Microsoft.AspNetCore.Routing.RouteValueDictionary! values) -> Microsoft.AspNetCore.Routing.VirtualPathData?
virtual Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.Content(string? contentPath) -> string?
virtual Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.IsLocalUrl(string? url) -> bool
virtual Microsoft.AspNetCore.Mvc.Routing.UrlHelperBase.Link(string? routeName, object? values) -> string?
