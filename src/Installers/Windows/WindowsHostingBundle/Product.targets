<Project>
  <PropertyGroup>
    <DotNetDarkOutputPath>$(IntermediateOutputPath)d\</DotNetDarkOutputPath>
    <DepsPath>$(BaseIntermediateOutputPath)</DepsPath>
    <DefineConstants>$(DefineConstants);DepsPath=$(DepsPath)</DefineConstants>
    <DefineConstants>$(DefineConstants);InstallersOutputPath=$(InstallersOutputPath)</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <RuntimeInstallers Include="$(DepsPath)dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
      <BundleNameProperty>DotNetRedistLtsInstallerx64</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi">
      <BundleNameProperty>DotNetRedistLtsInstallerx86</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi">
      <BundleNameProperty>DotNetRedistLtsInstallerarm64</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
      <BundleNameProperty>DotNetRedistHostInstallerx64</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi">
      <BundleNameProperty>DotNetRedistHostInstallerx86</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi">
      <BundleNameProperty>DotNetRedistHostInstallerarm64</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
      <BundleNameProperty>DotNetRedistHostfxrInstallerx64</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi">
      <BundleNameProperty>DotNetRedistHostfxrInstallerx86</BundleNameProperty>
    </RuntimeInstallers>
    <RuntimeInstallers Include="$(DepsPath)dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi">
      <BundleNameProperty>DotNetRedistHostfxrInstallerarm64</BundleNameProperty>
    </RuntimeInstallers>
  </ItemGroup>

  <!--
    Runs before FetchDependencies but can't be depended up because this sets up the item group that target
    uses for batching.
  -->
  <Target Name="CollectDependencies" BeforeTargets="Restore;CollectPackageReferences">
    <!-- Use the BrowserDebugHost as a sentinel for the nonshipping version for NETCoreApp. -->
    <ItemGroup>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
        <TargetFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi">
        <TargetFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi">
        <TargetFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
        <TargetFileName>dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi">
        <TargetFileName>dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi">
        <TargetFileName>dotnet-host-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi">
        <TargetFileName>dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-x64.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi">
        <TargetFileName>dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-x86.msi</TargetFileName>
      </RemoteAsset>
      <RemoteAsset Include="$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi">
        <TargetFileName>dotnet-hostfxr-$(MicrosoftNETCoreAppRuntimeVersion)-win-arm64.msi</TargetFileName>
      </RemoteAsset>
    </ItemGroup>

    <MakeDir Directories="$(DepsPath)" />
  </Target>

  <Target Name="FetchDependencies" BeforeTargets="Restore;CollectPackageReferences"
      Outputs="$(DepsPath)%(RemoteAsset.TargetFilename)">
    <!--
      Try various places to find the runtime. It's either released (use official version), public but
      unreleased (use dotnetbuilds/public), or internal and unreleased (use dotnetbuilds/internal).
    -->
    <ItemGroup>
      <UrisToDownload Remove="@(UrisToDownload)" />
      <UrisToDownload Include="https://dotnetcli.azureedge.net/dotnet/Runtime/%(RemoteAsset.Identity)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/public/Runtime/%(RemoteAsset.Identity)" />
      <UrisToDownload Include="https://dotnetbuilds.azureedge.net/internal/Runtime/%(RemoteAsset.Identity)"
          Condition=" '$(DotnetRuntimeSourceFeedKey)' != '' ">
        <token>$(DotnetRuntimeSourceFeedKey)</token>
      </UrisToDownload>
    </ItemGroup>

    <DownloadFile Condition=" ! Exists('$(DepsPath)%(RemoteAsset.TargetFilename)') "
                  Uris="@(UrisToDownload)"
                  DestinationPath="$(DepsPath)%(RemoteAsset.TargetFilename)" />
  </Target>

  <Target Name="ExtractPropertiesFromDotNetMsi" DependsOnTargets="CollectDependencies;FetchDependencies" BeforeTargets="BeforeBuild">
    <!-- Create properties that holds the executable name. These are passed to the bundles so we can reference them as variables
             from inside the ExePackage authoring. -->
    <CreateProperty Value="%(RuntimeInstallers.Filename)%(Extension)">
      <Output TaskParameter="Value" PropertyName="%(RuntimeInstallers.BundleNameProperty)"/>
    </CreateProperty>

    <PropertyGroup>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerx64=$(DotNetRedistLtsInstallerx64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerx86=$(DotNetRedistLtsInstallerx86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistLtsInstallerarm64=$(DotNetRedistLtsInstallerarm64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistHostInstallerx64=$(DotNetRedistHostInstallerx64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistHostInstallerx86=$(DotNetRedistHostInstallerx86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistHostInstallerarm64=$(DotNetRedistHostInstallerarm64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistHostfxrInstallerx64=$(DotNetRedistHostfxrInstallerx64)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistHostfxrInstallerx86=$(DotNetRedistHostfxrInstallerx86)</DefineConstants>
      <DefineConstants>$(DefineConstants);DotNetRedistHostfxrInstallerarm64=$(DotNetRedistHostfxrInstallerarm64)</DefineConstants>
    </PropertyGroup>
  </Target>
</Project>
