<Project>

  <!-- Using explicit SDK imports here because the default way conflicts with the AfterBuild target -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <Description>Razor is a markup syntax for adding server-side logic to web pages. This package contains MSBuild support for Razor.</Description>
    <TargetFramework>netstandard2.0</TargetFramework>

    <!-- This project doesn't have any code, so don't include it in the .nupkg -->
    <IncludeBuildOutput>false</IncludeBuildOutput>

    <NuspecFile>$(MSBuildProjectName).nuspec</NuspecFile>
    <TaskDirNet46>$(MSBuildProjectDirectory)\bin\Release\netstandard2.0\tasks\net46\</TaskDirNet46>
    <TaskDirNetStandard>$(MSBuildProjectDirectory)\bin\Release\netstandard2.0\tasks\netstandard2.0\</TaskDirNetStandard>
  </PropertyGroup>

  <!-- 
    Building this package is somewhat complicated because we need to Build or Publish some other projects
    that have different TFM's including one with multiple TFMs. 

    We then need to include the output of those projects in our output directory (where it will be used
    by tests) and in the nukpg.
  -->

  <!-- This is the tasks project that needs to be included in the package. -->
  <ItemGroup>
    <TaskProject Include="..\..\Razor.Tasks\src\Microsoft.AspNetCore.Razor.Tasks.csproj" />
  </ItemGroup>

  <!-- These are tools that need to be included in the package. -->
  <ItemGroup>
    <ToolProject Include="..\..\Razor.Tools\src\rzc.csproj" />
  </ItemGroup>

  <!-- Using explicit SDK imports here because the default way conflicts with the AfterBuild target -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <BuildDependsOn>_BuildDependencyProjects;$(BuildDependsOn)</BuildDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <!-- These files should be signed by aspnet/razor -->
    <ExcludePackageFileFromSigning Include="Microsoft.CodeAnalysis.dll"  />
    <ExcludePackageFileFromSigning Include="Microsoft.CodeAnalysis.CSharp.dll"  />
    <!-- These files should be signed by dotnet/corefx -->
    <ExcludePackageFileFromSigning Include="System.Text.Encoding.CodePages.dll" />
    <SignedPackageFile Include="rzc.dll" Certificate="MicrosoftSHA2" Visible="false" />
    <SignedPackageFile Include="Microsoft.AspNetCore.Razor.Tasks.dll" Certificate="MicrosoftSHA2" Visible="false" />
    <SignedPackageFile Include="Newtonsoft.Json.dll" Certificate="3PartySHA2" Visible="false" />
  </ItemGroup>

  <Target Name="_BuildDependencyProjects">
    <!-- 
      The Microsoft.AspNetCore.Razor.Tasks package needs to support both net46 and netstandard2.0 for desktop vs
      coreclr MSBuild - so we have to build it twice.

      We're careful here to avoid setting properties when building the other projects. This can create problems
      with concurrency.

      First, build the project, then copy it to the ouput directory, then add it as packable content.
    -->
    <MSBuild Projects="@(TaskProject)" />

    <MSBuild Projects="@(TaskProject)" Properties="TargetFramework=net46" Targets="BuiltProjectOutputGroup">
      <Output TaskParameter="TargetOutputs" ItemName="TaskAssemblyNet46" />
    </MSBuild>

    <MSBuild Projects="@(TaskProject)" Properties="TargetFramework=net46" Targets="DebugSymbolsProjectOutputGroup">
      <Output TaskParameter="TargetOutputs" ItemName="TaskSymbolNet46" />
    </MSBuild>

    <MSBuild Projects="@(TaskProject)" Properties="TargetFramework=netstandard2.0" Targets="BuiltProjectOutputGroup">
      <Output TaskParameter="TargetOutputs" ItemName="TaskAssemblyNetStandard" />
    </MSBuild>

    <MSBuild Projects="@(TaskProject)" Properties="TargetFramework=netstandard2.0" Targets="DebugSymbolsProjectOutputGroup">
      <Output TaskParameter="TargetOutputs" ItemName="TaskSymbolNetStandard" />
    </MSBuild>

    <Copy SourceFiles="@(TaskAssemblyNet46)" DestinationFolder="$(TaskDirNet46)">
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>
    <Copy SourceFiles="@(TaskSymbolNet46)" DestinationFolder="$(TaskDirNet46)">
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>
    <Copy SourceFiles="@(TaskAssemblyNetStandard)" DestinationFolder="$(TaskDirNetStandard)">
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>
    <Copy SourceFiles="@(TaskSymbolNetStandard)" DestinationFolder="$(TaskDirNetStandard)">
      <Output TaskParameter="CopiedFiles" ItemName="FileWrites" />
    </Copy>

    <Error Text="TaskAssemblyNet46 is empty. This is a bug" Condition="'@(TaskAssemblyNet46)'==''" />
    <Error Text="TaskAssemblyNetStandard is empty. This is a bug" Condition="'@(TaskAssemblyNetStandard)'==''" />

    <!--
      Next we need to build the netcoreapp2.0 tools. In this case we need to do a publish, because we need
      all of the output to put in the package. 
    -->
    <RemoveDir Directories="tools\" />
    <MSBuild Projects="@(ToolProject)" />
    <MSBuild Projects="@(ToolProject)" Properties="PublishDir=$(MSBuildProjectDirectory)\$(OutputPath)tools\" Targets="Publish" />

    <ItemGroup>
      <_RazorTool Include="$(OutputPath)tools\**\*" />
    </ItemGroup>

    <Error Text="_RazorTool is empty. This is a bug" Condition="'@(_RazorTool)'==''" />
  </Target>

  <Target Name="PopulateNuspec" BeforeTargets="GenerateNuspec" DependsOnTargets="BuiltProjectOutputGroup;DebugSymbolsProjectOutputGroup">

    <PropertyGroup>
      <!-- Make sure we create a symbols.nupkg. -->
      <IncludeSymbols>true</IncludeSymbols>

      <NuspecProperties>
        id=$(PackageId);
        version=$(PackageVersion);
        authors=$(Authors);
        description=$(Description);
        tags=$(PackageTags.Replace(';', ' '));
        licenseUrl=$(PackageLicenseUrl);
        projectUrl=$(PackageProjectUrl);
        iconUrl=$(PackageIconUrl);
        repositoryUrl=$(RepositoryUrl);
        repositoryCommit=$(RepositoryCommit);
        copyright=$(Copyright);

        <!-- Include the assembly and symbols from the tasks project -->
        TaskDirNet46=$(TaskDirNet46)**\*;
        TaskDirNetStandard=$(TaskDirNetStandard)**\*;

        <!-- Include the assembly and symbols from the tools project -->
        ToolAssembly=$(OutputPath)tools\**\*;
      </NuspecProperties>
    </PropertyGroup>
  </Target>
</Project>
