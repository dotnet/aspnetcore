<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCopyProperty" xml:space="preserve">
    <value>The property at '{0}' could not be copied.</value>
  </data>
  <data name="CannotDeterminePropertyType" xml:space="preserve">
    <value>The type of the property at path '{0}' could not be determined.</value>
  </data>
  <data name="CannotPerformOperation" xml:space="preserve">
    <value>The '{0}' operation at path '{1}' could not be performed.</value>
  </data>
  <data name="CannotReadProperty" xml:space="preserve">
    <value>The property at '{0}' could not be read.</value>
  </data>
  <data name="CannotUpdateProperty" xml:space="preserve">
    <value>The property at path '{0}' could not be updated.</value>
  </data>
  <data name="ExpressionTypeNotSupported" xml:space="preserve">
    <value>The expression '{0}' is not supported. Supported expressions include member access and indexer expressions.</value>
  </data>
  <data name="IndexOutOfBounds" xml:space="preserve">
    <value>The index value provided by path segment '{0}' is out of bounds of the array size.</value>
  </data>
  <data name="InvalidIndexValue" xml:space="preserve">
    <value>The path segment '{0}' is invalid for an array index.</value>
  </data>
  <data name="InvalidJsonPatchDocument" xml:space="preserve">
    <value>The JSON patch document was malformed and could not be parsed.</value>
  </data>
  <data name="InvalidJsonPatchOperation" xml:space="preserve">
    <value>Invalid JsonPatch operation '{0}'.</value>
  </data>
  <data name="InvalidPathSegment" xml:space="preserve">
    <value>The provided path segment '{0}' cannot be converted to the target type.</value>
  </data>
  <data name="InvalidValueForPath" xml:space="preserve">
    <value>The provided string '{0}' is an invalid path.</value>
  </data>
  <data name="InvalidValueForProperty" xml:space="preserve">
    <value>The value '{0}' is invalid for target location.</value>
  </data>
  <data name="ParameterMustMatchType" xml:space="preserve">
    <value>'{0}' must be of type '{1}'.</value>
  </data>
  <data name="PatchNotSupportedForArrays" xml:space="preserve">
    <value>The type '{0}' which is an array is not supported for json patch operations as it has a fixed size.</value>
  </data>
  <data name="PatchNotSupportedForNonGenericLists" xml:space="preserve">
    <value>The type '{0}' which is a non generic list is not supported for json patch operations. Only generic list types are supported.</value>
  </data>
  <data name="TargetLocationAtPathSegmentNotFound" xml:space="preserve">
    <value>The target location specified by path segment '{0}' was not found.</value>
  </data>
  <data name="TargetLocationNotFound" xml:space="preserve">
    <value>For operation '{0}', the target location specified by path '{1}' was not found.</value>
  </data>
  <data name="TestOperationNotSupported" xml:space="preserve">
    <value>The test operation is not supported.</value>
  </data>
  <data name="ValueAtListPositionNotEqualToTestValue" xml:space="preserve">
    <value>The current value '{0}' at position '{2}' is not equal to the test value '{1}'.</value>
  </data>
  <data name="ValueForTargetSegmentCannotBeNullOrEmpty" xml:space="preserve">
    <value>The value at '{0}' cannot be null or empty to perform the test operation.</value>
  </data>
  <data name="ValueNotEqualToTestValue" xml:space="preserve">
    <value>The current value '{0}' at path '{2}' is not equal to the test value '{1}'.</value>
  </data>
</root>