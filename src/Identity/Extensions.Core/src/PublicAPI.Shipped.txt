#nullable enable
abstract Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
const Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangePhoneNumberTokenPurpose = "ChangePhoneNumber" -> string!
const Microsoft.AspNetCore.Identity.UserManager<TUser>.ConfirmEmailTokenPurpose = "EmailConfirmation" -> string!
const Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetPasswordTokenPurpose = "ResetPassword" -> string!
Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider<TUser>
Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider<TUser>.AuthenticatorTokenProvider() -> void
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.ClaimsIdentityOptions() -> void
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.EmailClaimType.get -> string!
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.EmailClaimType.set -> void
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.RoleClaimType.get -> string!
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.RoleClaimType.set -> void
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.SecurityStampClaimType.get -> string!
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.SecurityStampClaimType.set -> void
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.UserIdClaimType.get -> string!
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.UserIdClaimType.set -> void
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.UserNameClaimType.get -> string!
Microsoft.AspNetCore.Identity.ClaimsIdentityOptions.UserNameClaimType.set -> void
Microsoft.AspNetCore.Identity.DefaultPersonalDataProtector
Microsoft.AspNetCore.Identity.DefaultPersonalDataProtector.DefaultPersonalDataProtector(Microsoft.AspNetCore.Identity.ILookupProtectorKeyRing! keyRing, Microsoft.AspNetCore.Identity.ILookupProtector! protector) -> void
Microsoft.AspNetCore.Identity.DefaultUserConfirmation<TUser>
Microsoft.AspNetCore.Identity.DefaultUserConfirmation<TUser>.DefaultUserConfirmation() -> void
Microsoft.AspNetCore.Identity.EmailTokenProvider<TUser>
Microsoft.AspNetCore.Identity.EmailTokenProvider<TUser>.EmailTokenProvider() -> void
Microsoft.AspNetCore.Identity.IdentityBuilder
Microsoft.AspNetCore.Identity.IdentityBuilder.IdentityBuilder(System.Type! user, Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
Microsoft.AspNetCore.Identity.IdentityBuilder.IdentityBuilder(System.Type! user, System.Type! role, Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
Microsoft.AspNetCore.Identity.IdentityBuilder.RoleType.get -> System.Type?
Microsoft.AspNetCore.Identity.IdentityBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.AspNetCore.Identity.IdentityBuilder.UserType.get -> System.Type!
Microsoft.AspNetCore.Identity.IdentityError
Microsoft.AspNetCore.Identity.IdentityError.Code.get -> string!
Microsoft.AspNetCore.Identity.IdentityError.Code.set -> void
Microsoft.AspNetCore.Identity.IdentityError.Description.get -> string!
Microsoft.AspNetCore.Identity.IdentityError.Description.set -> void
Microsoft.AspNetCore.Identity.IdentityError.IdentityError() -> void
Microsoft.AspNetCore.Identity.IdentityErrorDescriber
Microsoft.AspNetCore.Identity.IdentityErrorDescriber.IdentityErrorDescriber() -> void
Microsoft.AspNetCore.Identity.IdentityOptions
Microsoft.AspNetCore.Identity.IdentityOptions.ClaimsIdentity.get -> Microsoft.AspNetCore.Identity.ClaimsIdentityOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.ClaimsIdentity.set -> void
Microsoft.AspNetCore.Identity.IdentityOptions.IdentityOptions() -> void
Microsoft.AspNetCore.Identity.IdentityOptions.Lockout.get -> Microsoft.AspNetCore.Identity.LockoutOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.Lockout.set -> void
Microsoft.AspNetCore.Identity.IdentityOptions.Password.get -> Microsoft.AspNetCore.Identity.PasswordOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.Password.set -> void
Microsoft.AspNetCore.Identity.IdentityOptions.SignIn.get -> Microsoft.AspNetCore.Identity.SignInOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.SignIn.set -> void
Microsoft.AspNetCore.Identity.IdentityOptions.Stores.get -> Microsoft.AspNetCore.Identity.StoreOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.Stores.set -> void
Microsoft.AspNetCore.Identity.IdentityOptions.Tokens.get -> Microsoft.AspNetCore.Identity.TokenOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.Tokens.set -> void
Microsoft.AspNetCore.Identity.IdentityOptions.User.get -> Microsoft.AspNetCore.Identity.UserOptions!
Microsoft.AspNetCore.Identity.IdentityOptions.User.set -> void
Microsoft.AspNetCore.Identity.IdentityResult
Microsoft.AspNetCore.Identity.IdentityResult.Errors.get -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IdentityError!>!
Microsoft.AspNetCore.Identity.IdentityResult.IdentityResult() -> void
Microsoft.AspNetCore.Identity.IdentityResult.Succeeded.get -> bool
Microsoft.AspNetCore.Identity.IdentityResult.Succeeded.set -> void
Microsoft.AspNetCore.Identity.IdentitySchemaVersions
Microsoft.AspNetCore.Identity.ILookupNormalizer
Microsoft.AspNetCore.Identity.ILookupNormalizer.NormalizeEmail(string? email) -> string?
Microsoft.AspNetCore.Identity.ILookupNormalizer.NormalizeName(string? name) -> string?
Microsoft.AspNetCore.Identity.ILookupProtector
Microsoft.AspNetCore.Identity.ILookupProtector.Protect(string! keyId, string? data) -> string?
Microsoft.AspNetCore.Identity.ILookupProtector.Unprotect(string! keyId, string? data) -> string?
Microsoft.AspNetCore.Identity.ILookupProtectorKeyRing
Microsoft.AspNetCore.Identity.ILookupProtectorKeyRing.CurrentKeyId.get -> string!
Microsoft.AspNetCore.Identity.ILookupProtectorKeyRing.GetAllKeyIds() -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Identity.ILookupProtectorKeyRing.this[string! keyId].get -> string!
Microsoft.AspNetCore.Identity.IPasswordHasher<TUser>
Microsoft.AspNetCore.Identity.IPasswordHasher<TUser>.HashPassword(TUser! user, string! password) -> string!
Microsoft.AspNetCore.Identity.IPasswordHasher<TUser>.VerifyHashedPassword(TUser! user, string! hashedPassword, string! providedPassword) -> Microsoft.AspNetCore.Identity.PasswordVerificationResult
Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>
Microsoft.AspNetCore.Identity.IPasswordValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user, string? password) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IPersonalDataProtector
Microsoft.AspNetCore.Identity.IPersonalDataProtector.Protect(string? data) -> string?
Microsoft.AspNetCore.Identity.IPersonalDataProtector.Unprotect(string? data) -> string?
Microsoft.AspNetCore.Identity.IProtectedUserStore<TUser>
Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>
Microsoft.AspNetCore.Identity.IQueryableRoleStore<TRole>.Roles.get -> System.Linq.IQueryable<TRole!>!
Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>
Microsoft.AspNetCore.Identity.IQueryableUserStore<TUser>.Users.get -> System.Linq.IQueryable<TUser!>!
Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>
Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.AddClaimAsync(TRole! role, System.Security.Claims.Claim! claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.GetClaimsAsync(TRole! role, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim!>!>!
Microsoft.AspNetCore.Identity.IRoleClaimStore<TRole>.RemoveClaimAsync(TRole! role, System.Security.Claims.Claim! claim, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.CreateAsync(TRole! role, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.DeleteAsync(TRole! role, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByIdAsync(string! roleId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TRole?>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.FindByNameAsync(string! normalizedRoleName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TRole?>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetNormalizedRoleNameAsync(TRole! role, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleIdAsync(TRole! role, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.GetRoleNameAsync(TRole! role, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetNormalizedRoleNameAsync(TRole! role, string? normalizedName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.SetRoleNameAsync(TRole! role, string? roleName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IRoleStore<TRole>.UpdateAsync(TRole! role, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IRoleValidator<TRole>
Microsoft.AspNetCore.Identity.IRoleValidator<TRole>.ValidateAsync(Microsoft.AspNetCore.Identity.RoleManager<TRole!>! manager, TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>
Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.GetTokenAsync(TUser! user, string! loginProvider, string! name, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.RemoveTokenAsync(TUser! user, string! loginProvider, string! name, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore<TUser>.SetTokenAsync(TUser! user, string! loginProvider, string! name, string? value, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>
Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.GetAuthenticatorKeyAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore<TUser>.SetAuthenticatorKeyAsync(TUser! user, string! key, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>
Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory<TUser>.CreateAsync(TUser! user) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal!>!
Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>
Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.AddClaimsAsync(TUser! user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim!>! claims, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetClaimsAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim!>!>!
Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim! claim, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser!>!>!
Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.RemoveClaimsAsync(TUser! user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim!>! claims, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserClaimStore<TUser>.ReplaceClaimAsync(TUser! user, System.Security.Claims.Claim! claim, System.Security.Claims.Claim! newClaim, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserConfirmation<TUser>
Microsoft.AspNetCore.Identity.IUserConfirmation<TUser>.IsConfirmedAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.FindByEmailAsync(string! normalizedEmail, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TUser?>!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetEmailConfirmedAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.GetNormalizedEmailAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailAsync(TUser! user, string? email, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetEmailConfirmedAsync(TUser! user, bool confirmed, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserEmailStore<TUser>.SetNormalizedEmailAsync(TUser! user, string? normalizedEmail, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetAccessFailedCountAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEnabledAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.GetLockoutEndDateAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.DateTimeOffset?>!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.IncrementAccessFailedCountAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.ResetAccessFailedCountAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEnabledAsync(TUser! user, bool enabled, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserLockoutStore<TUser>.SetLockoutEndDateAsync(TUser! user, System.DateTimeOffset? lockoutEnd, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>
Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.AddLoginAsync(TUser! user, Microsoft.AspNetCore.Identity.UserLoginInfo! login, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.FindByLoginAsync(string! loginProvider, string! providerKey, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TUser?>!
Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.GetLoginsAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.UserLoginInfo!>!>!
Microsoft.AspNetCore.Identity.IUserLoginStore<TUser>.RemoveLoginAsync(TUser! user, string! loginProvider, string! providerKey, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>
Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.HasPasswordAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser>.SetPasswordHashAsync(TUser! user, string? passwordHash, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>
Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.GetPhoneNumberConfirmedAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberAsync(TUser! user, string? phoneNumber, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserPhoneNumberStore<TUser>.SetPhoneNumberConfirmedAsync(TUser! user, bool confirmed, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>
Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.AddToRoleAsync(TUser! user, string! roleName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetRolesAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<string!>!>!
Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.GetUsersInRoleAsync(string! roleName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser!>!>!
Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.IsInRoleAsync(TUser! user, string! roleName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserRoleStore<TUser>.RemoveFromRoleAsync(TUser! user, string! roleName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>
Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.GetSecurityStampAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserSecurityStampStore<TUser>.SetSecurityStampAsync(TUser! user, string! stamp, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserStore<TUser>
Microsoft.AspNetCore.Identity.IUserStore<TUser>.CreateAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.DeleteAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByIdAsync(string! userId, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TUser?>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.FindByNameAsync(string! normalizedUserName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TUser?>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetNormalizedUserNameAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserIdAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.GetUserNameAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetNormalizedUserNameAsync(TUser! user, string? normalizedName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.SetUserNameAsync(TUser! user, string? userName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserStore<TUser>.UpdateAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>
Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.CountCodesAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.RedeemCodeAsync(TUser! user, string! code, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore<TUser>.ReplaceCodesAsync(TUser! user, System.Collections.Generic.IEnumerable<string!>! recoveryCodes, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>
Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.GetTwoFactorEnabledAsync(TUser! user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserTwoFactorStore<TUser>.SetTwoFactorEnabledAsync(TUser! user, bool enabled, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>
Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.GenerateAsync(string! purpose, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<string!>!
Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser>.ValidateAsync(string! purpose, string! token, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
Microsoft.AspNetCore.Identity.IUserValidator<TUser>
Microsoft.AspNetCore.Identity.IUserValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.LockoutOptions
Microsoft.AspNetCore.Identity.LockoutOptions.AllowedForNewUsers.get -> bool
Microsoft.AspNetCore.Identity.LockoutOptions.AllowedForNewUsers.set -> void
Microsoft.AspNetCore.Identity.LockoutOptions.DefaultLockoutTimeSpan.get -> System.TimeSpan
Microsoft.AspNetCore.Identity.LockoutOptions.DefaultLockoutTimeSpan.set -> void
Microsoft.AspNetCore.Identity.LockoutOptions.LockoutOptions() -> void
Microsoft.AspNetCore.Identity.LockoutOptions.MaxFailedAccessAttempts.get -> int
Microsoft.AspNetCore.Identity.LockoutOptions.MaxFailedAccessAttempts.set -> void
Microsoft.AspNetCore.Identity.PasswordHasher<TUser>
Microsoft.AspNetCore.Identity.PasswordHasher<TUser>.PasswordHasher(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.PasswordHasherOptions!>? optionsAccessor = null) -> void
Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode
Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode.IdentityV2 = 0 -> Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode
Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode.IdentityV3 = 1 -> Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode
Microsoft.AspNetCore.Identity.PasswordHasherOptions
Microsoft.AspNetCore.Identity.PasswordHasherOptions.CompatibilityMode.get -> Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode
Microsoft.AspNetCore.Identity.PasswordHasherOptions.CompatibilityMode.set -> void
Microsoft.AspNetCore.Identity.PasswordHasherOptions.IterationCount.get -> int
Microsoft.AspNetCore.Identity.PasswordHasherOptions.IterationCount.set -> void
Microsoft.AspNetCore.Identity.PasswordHasherOptions.PasswordHasherOptions() -> void
Microsoft.AspNetCore.Identity.PasswordOptions
Microsoft.AspNetCore.Identity.PasswordOptions.PasswordOptions() -> void
Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit.get -> bool
Microsoft.AspNetCore.Identity.PasswordOptions.RequireDigit.set -> void
Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength.get -> int
Microsoft.AspNetCore.Identity.PasswordOptions.RequiredLength.set -> void
Microsoft.AspNetCore.Identity.PasswordOptions.RequiredUniqueChars.get -> int
Microsoft.AspNetCore.Identity.PasswordOptions.RequiredUniqueChars.set -> void
Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase.get -> bool
Microsoft.AspNetCore.Identity.PasswordOptions.RequireLowercase.set -> void
Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric.get -> bool
Microsoft.AspNetCore.Identity.PasswordOptions.RequireNonAlphanumeric.set -> void
Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase.get -> bool
Microsoft.AspNetCore.Identity.PasswordOptions.RequireUppercase.set -> void
Microsoft.AspNetCore.Identity.PasswordValidator<TUser>
Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.Describer.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.PasswordValidator(Microsoft.AspNetCore.Identity.IdentityErrorDescriber? errors = null) -> void
Microsoft.AspNetCore.Identity.PasswordVerificationResult
Microsoft.AspNetCore.Identity.PasswordVerificationResult.Failed = 0 -> Microsoft.AspNetCore.Identity.PasswordVerificationResult
Microsoft.AspNetCore.Identity.PasswordVerificationResult.Success = 1 -> Microsoft.AspNetCore.Identity.PasswordVerificationResult
Microsoft.AspNetCore.Identity.PasswordVerificationResult.SuccessRehashNeeded = 2 -> Microsoft.AspNetCore.Identity.PasswordVerificationResult
Microsoft.AspNetCore.Identity.PersonalDataAttribute
Microsoft.AspNetCore.Identity.PersonalDataAttribute.PersonalDataAttribute() -> void
Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider<TUser>
Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider<TUser>.PhoneNumberTokenProvider() -> void
Microsoft.AspNetCore.Identity.ProtectedPersonalDataAttribute
Microsoft.AspNetCore.Identity.ProtectedPersonalDataAttribute.ProtectedPersonalDataAttribute() -> void
Microsoft.AspNetCore.Identity.RoleManager<TRole>
Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose() -> void
Microsoft.AspNetCore.Identity.RoleManager<TRole>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.RoleManager<TRole>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.RoleManager<TRole>.KeyNormalizer.get -> Microsoft.AspNetCore.Identity.ILookupNormalizer!
Microsoft.AspNetCore.Identity.RoleManager<TRole>.KeyNormalizer.set -> void
Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleManager(Microsoft.AspNetCore.Identity.IRoleStore<TRole!>! store, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IRoleValidator<TRole!>!>! roleValidators, Microsoft.AspNetCore.Identity.ILookupNormalizer! keyNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber! errors, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.RoleManager<TRole!>!>! logger) -> void
Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleValidators.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.IRoleValidator<TRole!>!>!
Microsoft.AspNetCore.Identity.RoleManager<TRole>.Store.get -> Microsoft.AspNetCore.Identity.IRoleStore<TRole!>!
Microsoft.AspNetCore.Identity.RoleManager<TRole>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.RoleValidator<TRole>
Microsoft.AspNetCore.Identity.RoleValidator<TRole>.RoleValidator(Microsoft.AspNetCore.Identity.IdentityErrorDescriber? errors = null) -> void
Microsoft.AspNetCore.Identity.SignInOptions
Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedAccount.get -> bool
Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedAccount.set -> void
Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedEmail.get -> bool
Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedEmail.set -> void
Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedPhoneNumber.get -> bool
Microsoft.AspNetCore.Identity.SignInOptions.RequireConfirmedPhoneNumber.set -> void
Microsoft.AspNetCore.Identity.SignInOptions.SignInOptions() -> void
Microsoft.AspNetCore.Identity.SignInResult
Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut.get -> bool
Microsoft.AspNetCore.Identity.SignInResult.IsLockedOut.set -> void
Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed.get -> bool
Microsoft.AspNetCore.Identity.SignInResult.IsNotAllowed.set -> void
Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor.get -> bool
Microsoft.AspNetCore.Identity.SignInResult.RequiresTwoFactor.set -> void
Microsoft.AspNetCore.Identity.SignInResult.SignInResult() -> void
Microsoft.AspNetCore.Identity.SignInResult.Succeeded.get -> bool
Microsoft.AspNetCore.Identity.SignInResult.Succeeded.set -> void
Microsoft.AspNetCore.Identity.StoreOptions
Microsoft.AspNetCore.Identity.StoreOptions.MaxLengthForKeys.get -> int
Microsoft.AspNetCore.Identity.StoreOptions.MaxLengthForKeys.set -> void
Microsoft.AspNetCore.Identity.StoreOptions.ProtectPersonalData.get -> bool
Microsoft.AspNetCore.Identity.StoreOptions.ProtectPersonalData.set -> void
Microsoft.AspNetCore.Identity.StoreOptions.SchemaVersion.get -> System.Version!
Microsoft.AspNetCore.Identity.StoreOptions.SchemaVersion.set -> void
Microsoft.AspNetCore.Identity.StoreOptions.StoreOptions() -> void
Microsoft.AspNetCore.Identity.TokenOptions
Microsoft.AspNetCore.Identity.TokenOptions.AuthenticatorIssuer.get -> string!
Microsoft.AspNetCore.Identity.TokenOptions.AuthenticatorIssuer.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.AuthenticatorTokenProvider.get -> string!
Microsoft.AspNetCore.Identity.TokenOptions.AuthenticatorTokenProvider.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.ChangeEmailTokenProvider.get -> string!
Microsoft.AspNetCore.Identity.TokenOptions.ChangeEmailTokenProvider.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.ChangePhoneNumberTokenProvider.get -> string!
Microsoft.AspNetCore.Identity.TokenOptions.ChangePhoneNumberTokenProvider.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.EmailConfirmationTokenProvider.get -> string!
Microsoft.AspNetCore.Identity.TokenOptions.EmailConfirmationTokenProvider.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.PasswordResetTokenProvider.get -> string!
Microsoft.AspNetCore.Identity.TokenOptions.PasswordResetTokenProvider.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.ProviderMap.get -> System.Collections.Generic.Dictionary<string!, Microsoft.AspNetCore.Identity.TokenProviderDescriptor!>!
Microsoft.AspNetCore.Identity.TokenOptions.ProviderMap.set -> void
Microsoft.AspNetCore.Identity.TokenOptions.TokenOptions() -> void
Microsoft.AspNetCore.Identity.TokenProviderDescriptor
Microsoft.AspNetCore.Identity.TokenProviderDescriptor.ProviderInstance.get -> object?
Microsoft.AspNetCore.Identity.TokenProviderDescriptor.ProviderInstance.set -> void
Microsoft.AspNetCore.Identity.TokenProviderDescriptor.ProviderType.get -> System.Type!
Microsoft.AspNetCore.Identity.TokenProviderDescriptor.TokenProviderDescriptor(System.Type! type) -> void
Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider<TUser>
Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider<TUser>.TotpSecurityStampBasedTokenProvider() -> void
Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer
Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.NormalizeEmail(string? email) -> string?
Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.NormalizeName(string? name) -> string?
Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer.UpperInvariantLookupNormalizer() -> void
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.RoleManager.get -> Microsoft.AspNetCore.Identity.RoleManager<TRole!>!
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.UserClaimsPrincipalFactory(Microsoft.AspNetCore.Identity.UserManager<TUser!>! userManager, Microsoft.AspNetCore.Identity.RoleManager<TRole!>! roleManager, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityOptions!>! options) -> void
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.Options.get -> Microsoft.AspNetCore.Identity.IdentityOptions!
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.UserClaimsPrincipalFactory(Microsoft.AspNetCore.Identity.UserManager<TUser!>! userManager, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityOptions!>! optionsAccessor) -> void
Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.UserManager.get -> Microsoft.AspNetCore.Identity.UserManager<TUser!>!
Microsoft.AspNetCore.Identity.UserLoginInfo
Microsoft.AspNetCore.Identity.UserLoginInfo.LoginProvider.get -> string!
Microsoft.AspNetCore.Identity.UserLoginInfo.LoginProvider.set -> void
Microsoft.AspNetCore.Identity.UserLoginInfo.ProviderDisplayName.get -> string?
Microsoft.AspNetCore.Identity.UserLoginInfo.ProviderDisplayName.set -> void
Microsoft.AspNetCore.Identity.UserLoginInfo.ProviderKey.get -> string!
Microsoft.AspNetCore.Identity.UserLoginInfo.ProviderKey.set -> void
Microsoft.AspNetCore.Identity.UserLoginInfo.UserLoginInfo(string! loginProvider, string! providerKey, string? displayName) -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>
Microsoft.AspNetCore.Identity.UserManager<TUser>.Dispose() -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.ErrorDescriber.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.UserManager<TUser>.ErrorDescriber.set -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.KeyNormalizer.get -> Microsoft.AspNetCore.Identity.ILookupNormalizer!
Microsoft.AspNetCore.Identity.UserManager<TUser>.KeyNormalizer.set -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.Options.get -> Microsoft.AspNetCore.Identity.IdentityOptions!
Microsoft.AspNetCore.Identity.UserManager<TUser>.Options.set -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.PasswordHasher.get -> Microsoft.AspNetCore.Identity.IPasswordHasher<TUser!>!
Microsoft.AspNetCore.Identity.UserManager<TUser>.PasswordHasher.set -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.PasswordValidators.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.IPasswordValidator<TUser!>!>!
Microsoft.AspNetCore.Identity.UserManager<TUser>.Store.get -> Microsoft.AspNetCore.Identity.IUserStore<TUser!>!
Microsoft.AspNetCore.Identity.UserManager<TUser>.Store.set -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.ThrowIfDisposed() -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.UserManager(Microsoft.AspNetCore.Identity.IUserStore<TUser!>! store, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Identity.IdentityOptions!>! optionsAccessor, Microsoft.AspNetCore.Identity.IPasswordHasher<TUser!>! passwordHasher, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IUserValidator<TUser!>!>! userValidators, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Identity.IPasswordValidator<TUser!>!>! passwordValidators, Microsoft.AspNetCore.Identity.ILookupNormalizer! keyNormalizer, Microsoft.AspNetCore.Identity.IdentityErrorDescriber! errors, System.IServiceProvider! services, Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.Identity.UserManager<TUser!>!>! logger) -> void
Microsoft.AspNetCore.Identity.UserManager<TUser>.UserValidators.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.IUserValidator<TUser!>!>!
Microsoft.AspNetCore.Identity.UserManager<TUser>.ValidatePasswordAsync(TUser! user, string? password) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.UserManager<TUser>.ValidateUserAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
Microsoft.AspNetCore.Identity.UserOptions
Microsoft.AspNetCore.Identity.UserOptions.AllowedUserNameCharacters.get -> string!
Microsoft.AspNetCore.Identity.UserOptions.AllowedUserNameCharacters.set -> void
Microsoft.AspNetCore.Identity.UserOptions.RequireUniqueEmail.get -> bool
Microsoft.AspNetCore.Identity.UserOptions.RequireUniqueEmail.set -> void
Microsoft.AspNetCore.Identity.UserOptions.UserOptions() -> void
Microsoft.AspNetCore.Identity.UserValidator<TUser>
Microsoft.AspNetCore.Identity.UserValidator<TUser>.Describer.get -> Microsoft.AspNetCore.Identity.IdentityErrorDescriber!
Microsoft.AspNetCore.Identity.UserValidator<TUser>.UserValidator(Microsoft.AspNetCore.Identity.IdentityErrorDescriber? errors = null) -> void
Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions
override Microsoft.AspNetCore.Identity.EmailTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
override Microsoft.AspNetCore.Identity.EmailTokenProvider<TUser>.GetUserModifierAsync(string! purpose, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<string!>!
override Microsoft.AspNetCore.Identity.IdentityResult.ToString() -> string!
override Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
override Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider<TUser>.GetUserModifierAsync(string! purpose, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<string!>!
override Microsoft.AspNetCore.Identity.SignInResult.ToString() -> string!
override Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser, TRole>.GenerateClaimsAsync(TUser! user) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsIdentity!>!
static Microsoft.AspNetCore.Identity.IdentityResult.Failed(params Microsoft.AspNetCore.Identity.IdentityError![]! errors) -> Microsoft.AspNetCore.Identity.IdentityResult!
static Microsoft.AspNetCore.Identity.IdentityResult.Success.get -> Microsoft.AspNetCore.Identity.IdentityResult!
static Microsoft.AspNetCore.Identity.SignInResult.Failed.get -> Microsoft.AspNetCore.Identity.SignInResult!
static Microsoft.AspNetCore.Identity.SignInResult.LockedOut.get -> Microsoft.AspNetCore.Identity.SignInResult!
static Microsoft.AspNetCore.Identity.SignInResult.NotAllowed.get -> Microsoft.AspNetCore.Identity.SignInResult!
static Microsoft.AspNetCore.Identity.SignInResult.Success.get -> Microsoft.AspNetCore.Identity.SignInResult!
static Microsoft.AspNetCore.Identity.SignInResult.TwoFactorRequired.get -> Microsoft.AspNetCore.Identity.SignInResult!
static Microsoft.AspNetCore.Identity.UserManager<TUser>.GetChangeEmailTokenPurpose(string! newEmail) -> string!
static Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentityCore<TUser>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions.AddIdentityCore<TUser>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Identity.IdentityOptions!>! setupAction) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
static readonly Microsoft.AspNetCore.Identity.IdentitySchemaVersions.Default -> System.Version!
static readonly Microsoft.AspNetCore.Identity.IdentitySchemaVersions.Version1 -> System.Version!
static readonly Microsoft.AspNetCore.Identity.IdentitySchemaVersions.Version2 -> System.Version!
static readonly Microsoft.AspNetCore.Identity.TokenOptions.DefaultAuthenticatorProvider -> string!
static readonly Microsoft.AspNetCore.Identity.TokenOptions.DefaultEmailProvider -> string!
static readonly Microsoft.AspNetCore.Identity.TokenOptions.DefaultPhoneProvider -> string!
static readonly Microsoft.AspNetCore.Identity.TokenOptions.DefaultProvider -> string!
static System.Security.Claims.PrincipalExtensions.FindFirstValue(this System.Security.Claims.ClaimsPrincipal! principal, string! claimType) -> string?
System.Security.Claims.PrincipalExtensions
virtual Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider<TUser>.CanGenerateTwoFactorTokenAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider<TUser>.GenerateAsync(string! purpose, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider<TUser>.ValidateAsync(string! purpose, string! token, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.DefaultPersonalDataProtector.Protect(string? data) -> string?
virtual Microsoft.AspNetCore.Identity.DefaultPersonalDataProtector.Unprotect(string? data) -> string?
virtual Microsoft.AspNetCore.Identity.DefaultUserConfirmation<TUser>.IsConfirmedAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddClaimsPrincipalFactory<TFactory>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddErrorDescriber<TDescriber>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddPasswordValidator<TValidator>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddPersonalDataProtection<TProtector, TKeyRing>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoleManager<TRoleManager>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoles<TRole>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoleStore<TStore>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddRoleValidator<TRole>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddTokenProvider(string! providerName, System.Type! provider) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddTokenProvider<TProvider>(string! providerName) -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserConfirmation<TUserConfirmation>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserManager<TUserManager>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserStore<TStore>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityBuilder.AddUserValidator<TValidator>() -> Microsoft.AspNetCore.Identity.IdentityBuilder!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.ConcurrencyFailure() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DefaultError() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DuplicateEmail(string! email) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DuplicateRoleName(string! role) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.DuplicateUserName(string! userName) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidEmail(string? email) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidRoleName(string? role) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidToken() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.InvalidUserName(string? userName) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.LoginAlreadyAssociated() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordMismatch() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresDigit() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresLower() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresNonAlphanumeric() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresUniqueChars(int uniqueChars) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordRequiresUpper() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.PasswordTooShort(int length) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.RecoveryCodeRedemptionFailed() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserAlreadyHasPassword() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserAlreadyInRole(string! role) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserLockoutNotEnabled() -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.IdentityErrorDescriber.UserNotInRole(string! role) -> Microsoft.AspNetCore.Identity.IdentityError!
virtual Microsoft.AspNetCore.Identity.PasswordHasher<TUser>.HashPassword(TUser! user, string! password) -> string!
virtual Microsoft.AspNetCore.Identity.PasswordHasher<TUser>.VerifyHashedPassword(TUser! user, string! hashedPassword, string! providedPassword) -> Microsoft.AspNetCore.Identity.PasswordVerificationResult
virtual Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsDigit(char c) -> bool
virtual Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsLetterOrDigit(char c) -> bool
virtual Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsLower(char c) -> bool
virtual Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.IsUpper(char c) -> bool
virtual Microsoft.AspNetCore.Identity.PasswordValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user, string? password) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.AddClaimAsync(TRole! role, System.Security.Claims.Claim! claim) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.CancellationToken.get -> System.Threading.CancellationToken
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.CreateAsync(TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.DeleteAsync(TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.Dispose(bool disposing) -> void
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByIdAsync(string! roleId) -> System.Threading.Tasks.Task<TRole?>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.FindByNameAsync(string! roleName) -> System.Threading.Tasks.Task<TRole?>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetClaimsAsync(TRole! role) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim!>!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleIdAsync(TRole! role) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.GetRoleNameAsync(TRole! role) -> System.Threading.Tasks.Task<string?>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.Logger.set -> void
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.NormalizeKey(string? key) -> string?
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.RemoveClaimAsync(TRole! role, System.Security.Claims.Claim! claim) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.RoleExistsAsync(string! roleName) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.Roles.get -> System.Linq.IQueryable<TRole!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.SetRoleNameAsync(TRole! role, string? name) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.SupportsQueryableRoles.get -> bool
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.SupportsRoleClaims.get -> bool
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateAsync(TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateNormalizedRoleNameAsync(TRole! role) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.UpdateRoleAsync(TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleManager<TRole>.ValidateRoleAsync(TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.RoleValidator<TRole>.ValidateAsync(Microsoft.AspNetCore.Identity.RoleManager<TRole!>! manager, TRole! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider<TUser>.GenerateAsync(string! purpose, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider<TUser>.GetUserModifierAsync(string! purpose, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider<TUser>.ValidateAsync(string! purpose, string! token, Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.CreateAsync(TUser! user) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal!>!
virtual Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory<TUser>.GenerateClaimsAsync(TUser! user) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsIdentity!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AccessFailedAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AddClaimAsync(TUser! user, System.Security.Claims.Claim! claim) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AddClaimsAsync(TUser! user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim!>! claims) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AddLoginAsync(TUser! user, Microsoft.AspNetCore.Identity.UserLoginInfo! login) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AddPasswordAsync(TUser! user, string! password) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AddToRoleAsync(TUser! user, string! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.AddToRolesAsync(TUser! user, System.Collections.Generic.IEnumerable<string!>! roles) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CancellationToken.get -> System.Threading.CancellationToken
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangeEmailAsync(TUser! user, string! newEmail, string! token) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangePasswordAsync(TUser! user, string! currentPassword, string! newPassword) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ChangePhoneNumberAsync(TUser! user, string! phoneNumber, string! token) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CheckPasswordAsync(TUser! user, string! password) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ConfirmEmailAsync(TUser! user, string! token) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CountRecoveryCodesAsync(TUser! user) -> System.Threading.Tasks.Task<int>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CreateAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CreateAsync(TUser! user, string! password) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CreateSecurityTokenAsync(TUser! user) -> System.Threading.Tasks.Task<byte[]!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.CreateTwoFactorRecoveryCode() -> string!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.DeleteAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.Dispose(bool disposing) -> void
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByEmailAsync(string! email) -> System.Threading.Tasks.Task<TUser?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByIdAsync(string! userId) -> System.Threading.Tasks.Task<TUser?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByLoginAsync(string! loginProvider, string! providerKey) -> System.Threading.Tasks.Task<TUser?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.FindByNameAsync(string! userName) -> System.Threading.Tasks.Task<TUser?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateChangeEmailTokenAsync(TUser! user, string! newEmail) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateChangePhoneNumberTokenAsync(TUser! user, string! phoneNumber) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateConcurrencyStampAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateEmailConfirmationTokenAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateNewAuthenticatorKey() -> string!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateNewTwoFactorRecoveryCodesAsync(TUser! user, int number) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GeneratePasswordResetTokenAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateTwoFactorTokenAsync(TUser! user, string! tokenProvider) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GenerateUserTokenAsync(TUser! user, string! tokenProvider, string! purpose) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetAccessFailedCountAsync(TUser! user) -> System.Threading.Tasks.Task<int>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetAuthenticationTokenAsync(TUser! user, string! loginProvider, string! tokenName) -> System.Threading.Tasks.Task<string?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetAuthenticatorKeyAsync(TUser! user) -> System.Threading.Tasks.Task<string?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetClaimsAsync(TUser! user) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<System.Security.Claims.Claim!>!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetEmailAsync(TUser! user) -> System.Threading.Tasks.Task<string?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetLockoutEnabledAsync(TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetLockoutEndDateAsync(TUser! user) -> System.Threading.Tasks.Task<System.DateTimeOffset?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetLoginsAsync(TUser! user) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.AspNetCore.Identity.UserLoginInfo!>!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetPhoneNumberAsync(TUser! user) -> System.Threading.Tasks.Task<string?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetRolesAsync(TUser! user) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<string!>!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetSecurityStampAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetTwoFactorEnabledAsync(TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserAsync(System.Security.Claims.ClaimsPrincipal! principal) -> System.Threading.Tasks.Task<TUser?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserId(System.Security.Claims.ClaimsPrincipal! principal) -> string?
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserIdAsync(TUser! user) -> System.Threading.Tasks.Task<string!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserName(System.Security.Claims.ClaimsPrincipal! principal) -> string?
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUserNameAsync(TUser! user) -> System.Threading.Tasks.Task<string?>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUsersForClaimAsync(System.Security.Claims.Claim! claim) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser!>!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetUsersInRoleAsync(string! roleName) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<TUser!>!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.GetValidTwoFactorProvidersAsync(TUser! user) -> System.Threading.Tasks.Task<System.Collections.Generic.IList<string!>!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.HasPasswordAsync(TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.IsEmailConfirmedAsync(TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.IsInRoleAsync(TUser! user, string! role) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.IsLockedOutAsync(TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.IsPhoneNumberConfirmedAsync(TUser! user) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.Logger.get -> Microsoft.Extensions.Logging.ILogger!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.Logger.set -> void
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.NormalizeEmail(string? email) -> string?
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.NormalizeName(string? name) -> string?
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RedeemTwoFactorRecoveryCodeAsync(TUser! user, string! code) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RegisterTokenProvider(string! providerName, Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider<TUser!>! provider) -> void
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveAuthenticationTokenAsync(TUser! user, string! loginProvider, string! tokenName) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveClaimAsync(TUser! user, System.Security.Claims.Claim! claim) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveClaimsAsync(TUser! user, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim!>! claims) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveFromRoleAsync(TUser! user, string! role) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveFromRolesAsync(TUser! user, System.Collections.Generic.IEnumerable<string!>! roles) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemoveLoginAsync(TUser! user, string! loginProvider, string! providerKey) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.RemovePasswordAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ReplaceClaimAsync(TUser! user, System.Security.Claims.Claim! claim, System.Security.Claims.Claim! newClaim) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetAccessFailedCountAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetAuthenticatorKeyAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.ResetPasswordAsync(TUser! user, string! token, string! newPassword) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetAuthenticationTokenAsync(TUser! user, string! loginProvider, string! tokenName, string? tokenValue) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetEmailAsync(TUser! user, string? email) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetLockoutEnabledAsync(TUser! user, bool enabled) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetLockoutEndDateAsync(TUser! user, System.DateTimeOffset? lockoutEnd) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetPhoneNumberAsync(TUser! user, string? phoneNumber) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetTwoFactorEnabledAsync(TUser! user, bool enabled) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SetUserNameAsync(TUser! user, string? userName) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsQueryableUsers.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserAuthenticationTokens.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserAuthenticatorKey.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserClaim.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserEmail.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserLockout.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserLogin.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserPassword.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserPhoneNumber.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserRole.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserSecurityStamp.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserTwoFactor.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.SupportsUserTwoFactorRecoveryCodes.get -> bool
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateNormalizedEmailAsync(TUser! user) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateNormalizedUserNameAsync(TUser! user) -> System.Threading.Tasks.Task!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdatePasswordHash(TUser! user, string! newPassword, bool validatePassword) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateSecurityStampAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.UpdateUserAsync(TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.Users.get -> System.Linq.IQueryable<TUser!>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyChangePhoneNumberTokenAsync(TUser! user, string! token, string! phoneNumber) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyPasswordAsync(Microsoft.AspNetCore.Identity.IUserPasswordStore<TUser!>! store, TUser! user, string! password) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.PasswordVerificationResult>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyTwoFactorTokenAsync(TUser! user, string! tokenProvider, string! token) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserManager<TUser>.VerifyUserTokenAsync(TUser! user, string! tokenProvider, string! purpose, string! token) -> System.Threading.Tasks.Task<bool>!
virtual Microsoft.AspNetCore.Identity.UserValidator<TUser>.ValidateAsync(Microsoft.AspNetCore.Identity.UserManager<TUser!>! manager, TUser! user) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Identity.IdentityResult!>!
